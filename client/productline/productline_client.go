// Copyright 2020 Bjerk AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package productline

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new productline API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for productline API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	InventoryStocktakingProductlineDelete(params *InventoryStocktakingProductlineDeleteParams, authInfo runtime.ClientAuthInfoWriter) error

	InventoryStocktakingProductlineGet(params *InventoryStocktakingProductlineGetParams, authInfo runtime.ClientAuthInfoWriter) (*InventoryStocktakingProductlineGetOK, error)

	InventoryStocktakingProductlinePost(params *InventoryStocktakingProductlinePostParams, authInfo runtime.ClientAuthInfoWriter) (*InventoryStocktakingProductlinePostCreated, error)

	InventoryStocktakingProductlinePut(params *InventoryStocktakingProductlinePutParams, authInfo runtime.ClientAuthInfoWriter) (*InventoryStocktakingProductlinePutOK, error)

	InventoryStocktakingProductlineSearch(params *InventoryStocktakingProductlineSearchParams, authInfo runtime.ClientAuthInfoWriter) (*InventoryStocktakingProductlineSearchOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  InventoryStocktakingProductlineDelete bs e t a delete product line
*/
func (a *Client) InventoryStocktakingProductlineDelete(params *InventoryStocktakingProductlineDeleteParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventoryStocktakingProductlineDeleteParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "InventoryStocktakingProductlineDelete",
		Method:             "DELETE",
		PathPattern:        "/inventory/stocktaking/productline/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventoryStocktakingProductlineDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  InventoryStocktakingProductlineGet bs e t a get product line by ID
*/
func (a *Client) InventoryStocktakingProductlineGet(params *InventoryStocktakingProductlineGetParams, authInfo runtime.ClientAuthInfoWriter) (*InventoryStocktakingProductlineGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventoryStocktakingProductlineGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "InventoryStocktakingProductlineGet",
		Method:             "GET",
		PathPattern:        "/inventory/stocktaking/productline/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventoryStocktakingProductlineGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventoryStocktakingProductlineGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InventoryStocktakingProductlineGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InventoryStocktakingProductlinePost bs e t a create product line when creating several product lines use list for better performance
*/
func (a *Client) InventoryStocktakingProductlinePost(params *InventoryStocktakingProductlinePostParams, authInfo runtime.ClientAuthInfoWriter) (*InventoryStocktakingProductlinePostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventoryStocktakingProductlinePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "InventoryStocktakingProductlinePost",
		Method:             "POST",
		PathPattern:        "/inventory/stocktaking/productline",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventoryStocktakingProductlinePostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventoryStocktakingProductlinePostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InventoryStocktakingProductlinePost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InventoryStocktakingProductlinePut bs e t a update product line
*/
func (a *Client) InventoryStocktakingProductlinePut(params *InventoryStocktakingProductlinePutParams, authInfo runtime.ClientAuthInfoWriter) (*InventoryStocktakingProductlinePutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventoryStocktakingProductlinePutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "InventoryStocktakingProductlinePut",
		Method:             "PUT",
		PathPattern:        "/inventory/stocktaking/productline/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventoryStocktakingProductlinePutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventoryStocktakingProductlinePutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InventoryStocktakingProductlinePut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InventoryStocktakingProductlineSearch bs e t a find all product lines by stocktaking ID
*/
func (a *Client) InventoryStocktakingProductlineSearch(params *InventoryStocktakingProductlineSearchParams, authInfo runtime.ClientAuthInfoWriter) (*InventoryStocktakingProductlineSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventoryStocktakingProductlineSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "InventoryStocktakingProductlineSearch",
		Method:             "GET",
		PathPattern:        "/inventory/stocktaking/productline",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventoryStocktakingProductlineSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventoryStocktakingProductlineSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InventoryStocktakingProductlineSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
