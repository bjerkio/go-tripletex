// Code generated by go-swagger; DO NOT EDIT.

package entry

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/bjerkio/tripletex-go/models"
)

// TimesheetEntryTotalHoursGetTotalHoursReader is a Reader for the TimesheetEntryTotalHoursGetTotalHours structure.
type TimesheetEntryTotalHoursGetTotalHoursReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TimesheetEntryTotalHoursGetTotalHoursReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTimesheetEntryTotalHoursGetTotalHoursOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewTimesheetEntryTotalHoursGetTotalHoursOK creates a TimesheetEntryTotalHoursGetTotalHoursOK with default headers values
func NewTimesheetEntryTotalHoursGetTotalHoursOK() *TimesheetEntryTotalHoursGetTotalHoursOK {
	return &TimesheetEntryTotalHoursGetTotalHoursOK{}
}

/*TimesheetEntryTotalHoursGetTotalHoursOK handles this case with default header values.

successful operation
*/
type TimesheetEntryTotalHoursGetTotalHoursOK struct {
	Payload *models.ResponseWrapperDouble
}

func (o *TimesheetEntryTotalHoursGetTotalHoursOK) Error() string {
	return fmt.Sprintf("[GET /timesheet/entry/>totalHours][%d] timesheetEntryTotalHoursGetTotalHoursOK  %+v", 200, o.Payload)
}

func (o *TimesheetEntryTotalHoursGetTotalHoursOK) GetPayload() *models.ResponseWrapperDouble {
	return o.Payload
}

func (o *TimesheetEntryTotalHoursGetTotalHoursOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperDouble)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
