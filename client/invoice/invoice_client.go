// Copyright 2020 Bjerk AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package invoice

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new invoice API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for invoice API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	InvoiceCreateCreditNoteCreateCreditNote(params *InvoiceCreateCreditNoteCreateCreditNoteParams, authInfo runtime.ClientAuthInfoWriter) (*InvoiceCreateCreditNoteCreateCreditNoteOK, error)

	InvoiceCreateReminderCreateReminder(params *InvoiceCreateReminderCreateReminderParams, authInfo runtime.ClientAuthInfoWriter) error

	InvoiceGet(params *InvoiceGetParams, authInfo runtime.ClientAuthInfoWriter) (*InvoiceGetOK, error)

	InvoicePaymentPayment(params *InvoicePaymentPaymentParams, authInfo runtime.ClientAuthInfoWriter) (*InvoicePaymentPaymentOK, error)

	InvoicePdfDownloadPdf(params *InvoicePdfDownloadPdfParams, authInfo runtime.ClientAuthInfoWriter) (*InvoicePdfDownloadPdfOK, error)

	InvoicePost(params *InvoicePostParams, authInfo runtime.ClientAuthInfoWriter) (*InvoicePostCreated, error)

	InvoiceSearch(params *InvoiceSearchParams, authInfo runtime.ClientAuthInfoWriter) (*InvoiceSearchOK, error)

	InvoiceSendSend(params *InvoiceSendSendParams, authInfo runtime.ClientAuthInfoWriter) error

	SetTransport(transport runtime.ClientTransport)
}

/*
  InvoiceCreateCreditNoteCreateCreditNote creates a new invoice representing a credit memo that nullifies the given invoice updates this invoice and any pre existing inverse invoice
*/
func (a *Client) InvoiceCreateCreditNoteCreateCreditNote(params *InvoiceCreateCreditNoteCreateCreditNoteParams, authInfo runtime.ClientAuthInfoWriter) (*InvoiceCreateCreditNoteCreateCreditNoteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInvoiceCreateCreditNoteCreateCreditNoteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "InvoiceCreateCreditNoteCreateCreditNote",
		Method:             "PUT",
		PathPattern:        "/invoice/{id}/:createCreditNote",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InvoiceCreateCreditNoteCreateCreditNoteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InvoiceCreateCreditNoteCreateCreditNoteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InvoiceCreateCreditNoteCreateCreditNote: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InvoiceCreateReminderCreateReminder creates invoice reminder and sends it by the given dispatch type supports the reminder types s o f t r e m i n d e r r e m i n d e r and n o t i c e o f d e b t c o l l e c t i o n dispatch type n e t s p r i n t must have type n o t i c e o f d e b t c o l l e c t i o n s m s and n e t s p r i n t must be activated prior to usage in the API
*/
func (a *Client) InvoiceCreateReminderCreateReminder(params *InvoiceCreateReminderCreateReminderParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInvoiceCreateReminderCreateReminderParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "InvoiceCreateReminderCreateReminder",
		Method:             "PUT",
		PathPattern:        "/invoice/{id}/:createReminder",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InvoiceCreateReminderCreateReminderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  InvoiceGet gets invoice by ID
*/
func (a *Client) InvoiceGet(params *InvoiceGetParams, authInfo runtime.ClientAuthInfoWriter) (*InvoiceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInvoiceGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "InvoiceGet",
		Method:             "GET",
		PathPattern:        "/invoice/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InvoiceGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InvoiceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InvoiceGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InvoicePaymentPayment updates invoice the invoice is updated with payment information the amount is in the invoice s currency
*/
func (a *Client) InvoicePaymentPayment(params *InvoicePaymentPaymentParams, authInfo runtime.ClientAuthInfoWriter) (*InvoicePaymentPaymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInvoicePaymentPaymentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "InvoicePaymentPayment",
		Method:             "PUT",
		PathPattern:        "/invoice/{id}/:payment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InvoicePaymentPaymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InvoicePaymentPaymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InvoicePaymentPayment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InvoicePdfDownloadPdf gets invoice document by invoice ID
*/
func (a *Client) InvoicePdfDownloadPdf(params *InvoicePdfDownloadPdfParams, authInfo runtime.ClientAuthInfoWriter) (*InvoicePdfDownloadPdfOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInvoicePdfDownloadPdfParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "InvoicePdfDownloadPdf",
		Method:             "GET",
		PathPattern:        "/invoice/{invoiceId}/pdf",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InvoicePdfDownloadPdfReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InvoicePdfDownloadPdfOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InvoicePdfDownloadPdf: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InvoicePost creates invoice
*/
func (a *Client) InvoicePost(params *InvoicePostParams, authInfo runtime.ClientAuthInfoWriter) (*InvoicePostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInvoicePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "InvoicePost",
		Method:             "POST",
		PathPattern:        "/invoice",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InvoicePostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InvoicePostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InvoicePost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InvoiceSearch finds invoices corresponding with sent data includes charged outgoing invoices only
*/
func (a *Client) InvoiceSearch(params *InvoiceSearchParams, authInfo runtime.ClientAuthInfoWriter) (*InvoiceSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInvoiceSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "InvoiceSearch",
		Method:             "GET",
		PathPattern:        "/invoice",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InvoiceSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InvoiceSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InvoiceSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InvoiceSendSend sends invoice by ID and send type optionally override email recipient
*/
func (a *Client) InvoiceSendSend(params *InvoiceSendSendParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInvoiceSendSendParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "InvoiceSendSend",
		Method:             "PUT",
		PathPattern:        "/invoice/{id}/:send",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InvoiceSendSendReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
