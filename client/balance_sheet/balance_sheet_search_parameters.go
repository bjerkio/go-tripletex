// Code generated by go-swagger; DO NOT EDIT.

package balance_sheet

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewBalanceSheetSearchParams creates a new BalanceSheetSearchParams object
// with the default values initialized.
func NewBalanceSheetSearchParams() *BalanceSheetSearchParams {
	var (
		countDefault                                 = int64(1000)
		fromDefault                                  = int64(0)
		includeActiveAccountsWithoutMovementsDefault = bool(false)
		includeSubProjectsDefault                    = bool(false)
	)
	return &BalanceSheetSearchParams{
		Count:                                 &countDefault,
		From:                                  &fromDefault,
		IncludeActiveAccountsWithoutMovements: &includeActiveAccountsWithoutMovementsDefault,
		IncludeSubProjects:                    &includeSubProjectsDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewBalanceSheetSearchParamsWithTimeout creates a new BalanceSheetSearchParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewBalanceSheetSearchParamsWithTimeout(timeout time.Duration) *BalanceSheetSearchParams {
	var (
		countDefault                                 = int64(1000)
		fromDefault                                  = int64(0)
		includeActiveAccountsWithoutMovementsDefault = bool(false)
		includeSubProjectsDefault                    = bool(false)
	)
	return &BalanceSheetSearchParams{
		Count:                                 &countDefault,
		From:                                  &fromDefault,
		IncludeActiveAccountsWithoutMovements: &includeActiveAccountsWithoutMovementsDefault,
		IncludeSubProjects:                    &includeSubProjectsDefault,

		timeout: timeout,
	}
}

// NewBalanceSheetSearchParamsWithContext creates a new BalanceSheetSearchParams object
// with the default values initialized, and the ability to set a context for a request
func NewBalanceSheetSearchParamsWithContext(ctx context.Context) *BalanceSheetSearchParams {
	var (
		countDefault                                 = int64(1000)
		fromDefault                                  = int64(0)
		includeActiveAccountsWithoutMovementsDefault = bool(false)
		includeSubProjectsDefault                    = bool(false)
	)
	return &BalanceSheetSearchParams{
		Count:                                 &countDefault,
		From:                                  &fromDefault,
		IncludeActiveAccountsWithoutMovements: &includeActiveAccountsWithoutMovementsDefault,
		IncludeSubProjects:                    &includeSubProjectsDefault,

		Context: ctx,
	}
}

// NewBalanceSheetSearchParamsWithHTTPClient creates a new BalanceSheetSearchParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewBalanceSheetSearchParamsWithHTTPClient(client *http.Client) *BalanceSheetSearchParams {
	var (
		countDefault                                 = int64(1000)
		fromDefault                                  = int64(0)
		includeActiveAccountsWithoutMovementsDefault = bool(false)
		includeSubProjectsDefault                    = bool(false)
	)
	return &BalanceSheetSearchParams{
		Count:                                 &countDefault,
		From:                                  &fromDefault,
		IncludeActiveAccountsWithoutMovements: &includeActiveAccountsWithoutMovementsDefault,
		IncludeSubProjects:                    &includeSubProjectsDefault,
		HTTPClient:                            client,
	}
}

/*BalanceSheetSearchParams contains all the parameters to send to the API endpoint
for the balance sheet search operation typically these are written to a http.Request
*/
type BalanceSheetSearchParams struct {

	/*AccountNumberFrom
	  From and including

	*/
	AccountNumberFrom *int32
	/*AccountNumberTo
	  To and excluding

	*/
	AccountNumberTo *int32
	/*Count
	  Number of elements to return

	*/
	Count *int64
	/*CustomerID
	  Element ID

	*/
	CustomerID *int32
	/*DateFrom
	  Format is yyyy-MM-dd (from and incl.).

	*/
	DateFrom string
	/*DateTo
	  Format is yyyy-MM-dd (to and excl.).

	*/
	DateTo string
	/*DepartmentID
	  Element ID

	*/
	DepartmentID *int32
	/*EmployeeID
	  Element ID

	*/
	EmployeeID *int32
	/*Fields
	  Fields filter pattern

	*/
	Fields *string
	/*From
	  From index

	*/
	From *int64
	/*IncludeActiveAccountsWithoutMovements
	  Should active accounts with no movements be included

	*/
	IncludeActiveAccountsWithoutMovements *bool
	/*IncludeSubProjects
	  Should sub projects of the given project be included

	*/
	IncludeSubProjects *bool
	/*ProjectID
	  Element ID

	*/
	ProjectID *int32
	/*Sorting
	  Sorting pattern

	*/
	Sorting *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the balance sheet search params
func (o *BalanceSheetSearchParams) WithTimeout(timeout time.Duration) *BalanceSheetSearchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the balance sheet search params
func (o *BalanceSheetSearchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the balance sheet search params
func (o *BalanceSheetSearchParams) WithContext(ctx context.Context) *BalanceSheetSearchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the balance sheet search params
func (o *BalanceSheetSearchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the balance sheet search params
func (o *BalanceSheetSearchParams) WithHTTPClient(client *http.Client) *BalanceSheetSearchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the balance sheet search params
func (o *BalanceSheetSearchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountNumberFrom adds the accountNumberFrom to the balance sheet search params
func (o *BalanceSheetSearchParams) WithAccountNumberFrom(accountNumberFrom *int32) *BalanceSheetSearchParams {
	o.SetAccountNumberFrom(accountNumberFrom)
	return o
}

// SetAccountNumberFrom adds the accountNumberFrom to the balance sheet search params
func (o *BalanceSheetSearchParams) SetAccountNumberFrom(accountNumberFrom *int32) {
	o.AccountNumberFrom = accountNumberFrom
}

// WithAccountNumberTo adds the accountNumberTo to the balance sheet search params
func (o *BalanceSheetSearchParams) WithAccountNumberTo(accountNumberTo *int32) *BalanceSheetSearchParams {
	o.SetAccountNumberTo(accountNumberTo)
	return o
}

// SetAccountNumberTo adds the accountNumberTo to the balance sheet search params
func (o *BalanceSheetSearchParams) SetAccountNumberTo(accountNumberTo *int32) {
	o.AccountNumberTo = accountNumberTo
}

// WithCount adds the count to the balance sheet search params
func (o *BalanceSheetSearchParams) WithCount(count *int64) *BalanceSheetSearchParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the balance sheet search params
func (o *BalanceSheetSearchParams) SetCount(count *int64) {
	o.Count = count
}

// WithCustomerID adds the customerID to the balance sheet search params
func (o *BalanceSheetSearchParams) WithCustomerID(customerID *int32) *BalanceSheetSearchParams {
	o.SetCustomerID(customerID)
	return o
}

// SetCustomerID adds the customerId to the balance sheet search params
func (o *BalanceSheetSearchParams) SetCustomerID(customerID *int32) {
	o.CustomerID = customerID
}

// WithDateFrom adds the dateFrom to the balance sheet search params
func (o *BalanceSheetSearchParams) WithDateFrom(dateFrom string) *BalanceSheetSearchParams {
	o.SetDateFrom(dateFrom)
	return o
}

// SetDateFrom adds the dateFrom to the balance sheet search params
func (o *BalanceSheetSearchParams) SetDateFrom(dateFrom string) {
	o.DateFrom = dateFrom
}

// WithDateTo adds the dateTo to the balance sheet search params
func (o *BalanceSheetSearchParams) WithDateTo(dateTo string) *BalanceSheetSearchParams {
	o.SetDateTo(dateTo)
	return o
}

// SetDateTo adds the dateTo to the balance sheet search params
func (o *BalanceSheetSearchParams) SetDateTo(dateTo string) {
	o.DateTo = dateTo
}

// WithDepartmentID adds the departmentID to the balance sheet search params
func (o *BalanceSheetSearchParams) WithDepartmentID(departmentID *int32) *BalanceSheetSearchParams {
	o.SetDepartmentID(departmentID)
	return o
}

// SetDepartmentID adds the departmentId to the balance sheet search params
func (o *BalanceSheetSearchParams) SetDepartmentID(departmentID *int32) {
	o.DepartmentID = departmentID
}

// WithEmployeeID adds the employeeID to the balance sheet search params
func (o *BalanceSheetSearchParams) WithEmployeeID(employeeID *int32) *BalanceSheetSearchParams {
	o.SetEmployeeID(employeeID)
	return o
}

// SetEmployeeID adds the employeeId to the balance sheet search params
func (o *BalanceSheetSearchParams) SetEmployeeID(employeeID *int32) {
	o.EmployeeID = employeeID
}

// WithFields adds the fields to the balance sheet search params
func (o *BalanceSheetSearchParams) WithFields(fields *string) *BalanceSheetSearchParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the balance sheet search params
func (o *BalanceSheetSearchParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithFrom adds the from to the balance sheet search params
func (o *BalanceSheetSearchParams) WithFrom(from *int64) *BalanceSheetSearchParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the balance sheet search params
func (o *BalanceSheetSearchParams) SetFrom(from *int64) {
	o.From = from
}

// WithIncludeActiveAccountsWithoutMovements adds the includeActiveAccountsWithoutMovements to the balance sheet search params
func (o *BalanceSheetSearchParams) WithIncludeActiveAccountsWithoutMovements(includeActiveAccountsWithoutMovements *bool) *BalanceSheetSearchParams {
	o.SetIncludeActiveAccountsWithoutMovements(includeActiveAccountsWithoutMovements)
	return o
}

// SetIncludeActiveAccountsWithoutMovements adds the includeActiveAccountsWithoutMovements to the balance sheet search params
func (o *BalanceSheetSearchParams) SetIncludeActiveAccountsWithoutMovements(includeActiveAccountsWithoutMovements *bool) {
	o.IncludeActiveAccountsWithoutMovements = includeActiveAccountsWithoutMovements
}

// WithIncludeSubProjects adds the includeSubProjects to the balance sheet search params
func (o *BalanceSheetSearchParams) WithIncludeSubProjects(includeSubProjects *bool) *BalanceSheetSearchParams {
	o.SetIncludeSubProjects(includeSubProjects)
	return o
}

// SetIncludeSubProjects adds the includeSubProjects to the balance sheet search params
func (o *BalanceSheetSearchParams) SetIncludeSubProjects(includeSubProjects *bool) {
	o.IncludeSubProjects = includeSubProjects
}

// WithProjectID adds the projectID to the balance sheet search params
func (o *BalanceSheetSearchParams) WithProjectID(projectID *int32) *BalanceSheetSearchParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the balance sheet search params
func (o *BalanceSheetSearchParams) SetProjectID(projectID *int32) {
	o.ProjectID = projectID
}

// WithSorting adds the sorting to the balance sheet search params
func (o *BalanceSheetSearchParams) WithSorting(sorting *string) *BalanceSheetSearchParams {
	o.SetSorting(sorting)
	return o
}

// SetSorting adds the sorting to the balance sheet search params
func (o *BalanceSheetSearchParams) SetSorting(sorting *string) {
	o.Sorting = sorting
}

// WriteToRequest writes these params to a swagger request
func (o *BalanceSheetSearchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccountNumberFrom != nil {

		// query param accountNumberFrom
		var qrAccountNumberFrom int32
		if o.AccountNumberFrom != nil {
			qrAccountNumberFrom = *o.AccountNumberFrom
		}
		qAccountNumberFrom := swag.FormatInt32(qrAccountNumberFrom)
		if qAccountNumberFrom != "" {
			if err := r.SetQueryParam("accountNumberFrom", qAccountNumberFrom); err != nil {
				return err
			}
		}

	}

	if o.AccountNumberTo != nil {

		// query param accountNumberTo
		var qrAccountNumberTo int32
		if o.AccountNumberTo != nil {
			qrAccountNumberTo = *o.AccountNumberTo
		}
		qAccountNumberTo := swag.FormatInt32(qrAccountNumberTo)
		if qAccountNumberTo != "" {
			if err := r.SetQueryParam("accountNumberTo", qAccountNumberTo); err != nil {
				return err
			}
		}

	}

	if o.Count != nil {

		// query param count
		var qrCount int64
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt64(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	if o.CustomerID != nil {

		// query param customerId
		var qrCustomerID int32
		if o.CustomerID != nil {
			qrCustomerID = *o.CustomerID
		}
		qCustomerID := swag.FormatInt32(qrCustomerID)
		if qCustomerID != "" {
			if err := r.SetQueryParam("customerId", qCustomerID); err != nil {
				return err
			}
		}

	}

	// query param dateFrom
	qrDateFrom := o.DateFrom
	qDateFrom := qrDateFrom
	if qDateFrom != "" {
		if err := r.SetQueryParam("dateFrom", qDateFrom); err != nil {
			return err
		}
	}

	// query param dateTo
	qrDateTo := o.DateTo
	qDateTo := qrDateTo
	if qDateTo != "" {
		if err := r.SetQueryParam("dateTo", qDateTo); err != nil {
			return err
		}
	}

	if o.DepartmentID != nil {

		// query param departmentId
		var qrDepartmentID int32
		if o.DepartmentID != nil {
			qrDepartmentID = *o.DepartmentID
		}
		qDepartmentID := swag.FormatInt32(qrDepartmentID)
		if qDepartmentID != "" {
			if err := r.SetQueryParam("departmentId", qDepartmentID); err != nil {
				return err
			}
		}

	}

	if o.EmployeeID != nil {

		// query param employeeId
		var qrEmployeeID int32
		if o.EmployeeID != nil {
			qrEmployeeID = *o.EmployeeID
		}
		qEmployeeID := swag.FormatInt32(qrEmployeeID)
		if qEmployeeID != "" {
			if err := r.SetQueryParam("employeeId", qEmployeeID); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.From != nil {

		// query param from
		var qrFrom int64
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := swag.FormatInt64(qrFrom)
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	if o.IncludeActiveAccountsWithoutMovements != nil {

		// query param includeActiveAccountsWithoutMovements
		var qrIncludeActiveAccountsWithoutMovements bool
		if o.IncludeActiveAccountsWithoutMovements != nil {
			qrIncludeActiveAccountsWithoutMovements = *o.IncludeActiveAccountsWithoutMovements
		}
		qIncludeActiveAccountsWithoutMovements := swag.FormatBool(qrIncludeActiveAccountsWithoutMovements)
		if qIncludeActiveAccountsWithoutMovements != "" {
			if err := r.SetQueryParam("includeActiveAccountsWithoutMovements", qIncludeActiveAccountsWithoutMovements); err != nil {
				return err
			}
		}

	}

	if o.IncludeSubProjects != nil {

		// query param includeSubProjects
		var qrIncludeSubProjects bool
		if o.IncludeSubProjects != nil {
			qrIncludeSubProjects = *o.IncludeSubProjects
		}
		qIncludeSubProjects := swag.FormatBool(qrIncludeSubProjects)
		if qIncludeSubProjects != "" {
			if err := r.SetQueryParam("includeSubProjects", qIncludeSubProjects); err != nil {
				return err
			}
		}

	}

	if o.ProjectID != nil {

		// query param projectId
		var qrProjectID int32
		if o.ProjectID != nil {
			qrProjectID = *o.ProjectID
		}
		qProjectID := swag.FormatInt32(qrProjectID)
		if qProjectID != "" {
			if err := r.SetQueryParam("projectId", qProjectID); err != nil {
				return err
			}
		}

	}

	if o.Sorting != nil {

		// query param sorting
		var qrSorting string
		if o.Sorting != nil {
			qrSorting = *o.Sorting
		}
		qSorting := qrSorting
		if qSorting != "" {
			if err := r.SetQueryParam("sorting", qSorting); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
