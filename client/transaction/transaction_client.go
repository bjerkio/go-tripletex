// Code generated by go-swagger; DO NOT EDIT.

package transaction

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new transaction API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for transaction API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	BankStatementTransactionDetailsGetDetails(params *BankStatementTransactionDetailsGetDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*BankStatementTransactionDetailsGetDetailsOK, error)

	BankStatementTransactionGet(params *BankStatementTransactionGetParams, authInfo runtime.ClientAuthInfoWriter) (*BankStatementTransactionGetOK, error)

	BankStatementTransactionSearch(params *BankStatementTransactionSearchParams, authInfo runtime.ClientAuthInfoWriter) (*BankStatementTransactionSearchOK, error)

	SalaryTransactionDelete(params *SalaryTransactionDeleteParams, authInfo runtime.ClientAuthInfoWriter) error

	SalaryTransactionGet(params *SalaryTransactionGetParams, authInfo runtime.ClientAuthInfoWriter) (*SalaryTransactionGetOK, error)

	SalaryTransactionPost(params *SalaryTransactionPostParams, authInfo runtime.ClientAuthInfoWriter) (*SalaryTransactionPostCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  BankStatementTransactionDetailsGetDetails bs e t a get additional details about transaction by ID
*/
func (a *Client) BankStatementTransactionDetailsGetDetails(params *BankStatementTransactionDetailsGetDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*BankStatementTransactionDetailsGetDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBankStatementTransactionDetailsGetDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BankStatementTransactionDetails_getDetails",
		Method:             "GET",
		PathPattern:        "/bank/statement/transaction/{id}/details",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BankStatementTransactionDetailsGetDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BankStatementTransactionDetailsGetDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BankStatementTransactionDetails_getDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BankStatementTransactionGet bs e t a get bank transaction by ID
*/
func (a *Client) BankStatementTransactionGet(params *BankStatementTransactionGetParams, authInfo runtime.ClientAuthInfoWriter) (*BankStatementTransactionGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBankStatementTransactionGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BankStatementTransaction_get",
		Method:             "GET",
		PathPattern:        "/bank/statement/transaction/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BankStatementTransactionGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BankStatementTransactionGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BankStatementTransaction_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BankStatementTransactionSearch bs e t a find bank transaction corresponding with sent data
*/
func (a *Client) BankStatementTransactionSearch(params *BankStatementTransactionSearchParams, authInfo runtime.ClientAuthInfoWriter) (*BankStatementTransactionSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBankStatementTransactionSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BankStatementTransaction_search",
		Method:             "GET",
		PathPattern:        "/bank/statement/transaction",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BankStatementTransactionSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BankStatementTransactionSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BankStatementTransaction_search: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SalaryTransactionDelete bs e t a delete salary transaction by ID
*/
func (a *Client) SalaryTransactionDelete(params *SalaryTransactionDeleteParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalaryTransactionDeleteParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SalaryTransaction_delete",
		Method:             "DELETE",
		PathPattern:        "/salary/transaction/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SalaryTransactionDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  SalaryTransactionGet bs e t a find salary transaction by ID
*/
func (a *Client) SalaryTransactionGet(params *SalaryTransactionGetParams, authInfo runtime.ClientAuthInfoWriter) (*SalaryTransactionGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalaryTransactionGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SalaryTransaction_get",
		Method:             "GET",
		PathPattern:        "/salary/transaction/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SalaryTransactionGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SalaryTransactionGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SalaryTransaction_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SalaryTransactionPost bs e t a create a new salary transaction
*/
func (a *Client) SalaryTransactionPost(params *SalaryTransactionPostParams, authInfo runtime.ClientAuthInfoWriter) (*SalaryTransactionPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalaryTransactionPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SalaryTransaction_post",
		Method:             "POST",
		PathPattern:        "/salary/transaction",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SalaryTransactionPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SalaryTransactionPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SalaryTransaction_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
