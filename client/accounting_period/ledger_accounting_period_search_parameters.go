// Code generated by go-swagger; DO NOT EDIT.

package accounting_period

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewLedgerAccountingPeriodSearchParams creates a new LedgerAccountingPeriodSearchParams object
// with the default values initialized.
func NewLedgerAccountingPeriodSearchParams() *LedgerAccountingPeriodSearchParams {
	var (
		countDefault = int32(1400)
		fromDefault  = int64(0)
	)
	return &LedgerAccountingPeriodSearchParams{
		Count: &countDefault,
		From:  &fromDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewLedgerAccountingPeriodSearchParamsWithTimeout creates a new LedgerAccountingPeriodSearchParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewLedgerAccountingPeriodSearchParamsWithTimeout(timeout time.Duration) *LedgerAccountingPeriodSearchParams {
	var (
		countDefault = int32(1400)
		fromDefault  = int64(0)
	)
	return &LedgerAccountingPeriodSearchParams{
		Count: &countDefault,
		From:  &fromDefault,

		timeout: timeout,
	}
}

// NewLedgerAccountingPeriodSearchParamsWithContext creates a new LedgerAccountingPeriodSearchParams object
// with the default values initialized, and the ability to set a context for a request
func NewLedgerAccountingPeriodSearchParamsWithContext(ctx context.Context) *LedgerAccountingPeriodSearchParams {
	var (
		countDefault = int32(1400)
		fromDefault  = int64(0)
	)
	return &LedgerAccountingPeriodSearchParams{
		Count: &countDefault,
		From:  &fromDefault,

		Context: ctx,
	}
}

// NewLedgerAccountingPeriodSearchParamsWithHTTPClient creates a new LedgerAccountingPeriodSearchParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewLedgerAccountingPeriodSearchParamsWithHTTPClient(client *http.Client) *LedgerAccountingPeriodSearchParams {
	var (
		countDefault = int32(1400)
		fromDefault  = int64(0)
	)
	return &LedgerAccountingPeriodSearchParams{
		Count:      &countDefault,
		From:       &fromDefault,
		HTTPClient: client,
	}
}

/*LedgerAccountingPeriodSearchParams contains all the parameters to send to the API endpoint
for the ledger accounting period search operation typically these are written to a http.Request
*/
type LedgerAccountingPeriodSearchParams struct {

	/*Count
	  Number of elements to return

	*/
	Count *int32
	/*EndFrom
	  From and including

	*/
	EndFrom *string
	/*EndTo
	  To and excluding

	*/
	EndTo *string
	/*Fields
	  Fields filter pattern

	*/
	Fields *string
	/*From
	  From index

	*/
	From *int64
	/*ID
	  List of IDs

	*/
	ID *string
	/*NumberFrom
	  From and including

	*/
	NumberFrom *int32
	/*NumberTo
	  To and excluding

	*/
	NumberTo *int32
	/*Sorting
	  Sorting pattern

	*/
	Sorting *string
	/*StartFrom
	  From and including

	*/
	StartFrom *string
	/*StartTo
	  To and excluding

	*/
	StartTo *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the ledger accounting period search params
func (o *LedgerAccountingPeriodSearchParams) WithTimeout(timeout time.Duration) *LedgerAccountingPeriodSearchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the ledger accounting period search params
func (o *LedgerAccountingPeriodSearchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the ledger accounting period search params
func (o *LedgerAccountingPeriodSearchParams) WithContext(ctx context.Context) *LedgerAccountingPeriodSearchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the ledger accounting period search params
func (o *LedgerAccountingPeriodSearchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the ledger accounting period search params
func (o *LedgerAccountingPeriodSearchParams) WithHTTPClient(client *http.Client) *LedgerAccountingPeriodSearchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the ledger accounting period search params
func (o *LedgerAccountingPeriodSearchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCount adds the count to the ledger accounting period search params
func (o *LedgerAccountingPeriodSearchParams) WithCount(count *int32) *LedgerAccountingPeriodSearchParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the ledger accounting period search params
func (o *LedgerAccountingPeriodSearchParams) SetCount(count *int32) {
	o.Count = count
}

// WithEndFrom adds the endFrom to the ledger accounting period search params
func (o *LedgerAccountingPeriodSearchParams) WithEndFrom(endFrom *string) *LedgerAccountingPeriodSearchParams {
	o.SetEndFrom(endFrom)
	return o
}

// SetEndFrom adds the endFrom to the ledger accounting period search params
func (o *LedgerAccountingPeriodSearchParams) SetEndFrom(endFrom *string) {
	o.EndFrom = endFrom
}

// WithEndTo adds the endTo to the ledger accounting period search params
func (o *LedgerAccountingPeriodSearchParams) WithEndTo(endTo *string) *LedgerAccountingPeriodSearchParams {
	o.SetEndTo(endTo)
	return o
}

// SetEndTo adds the endTo to the ledger accounting period search params
func (o *LedgerAccountingPeriodSearchParams) SetEndTo(endTo *string) {
	o.EndTo = endTo
}

// WithFields adds the fields to the ledger accounting period search params
func (o *LedgerAccountingPeriodSearchParams) WithFields(fields *string) *LedgerAccountingPeriodSearchParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the ledger accounting period search params
func (o *LedgerAccountingPeriodSearchParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithFrom adds the from to the ledger accounting period search params
func (o *LedgerAccountingPeriodSearchParams) WithFrom(from *int64) *LedgerAccountingPeriodSearchParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the ledger accounting period search params
func (o *LedgerAccountingPeriodSearchParams) SetFrom(from *int64) {
	o.From = from
}

// WithID adds the id to the ledger accounting period search params
func (o *LedgerAccountingPeriodSearchParams) WithID(id *string) *LedgerAccountingPeriodSearchParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the ledger accounting period search params
func (o *LedgerAccountingPeriodSearchParams) SetID(id *string) {
	o.ID = id
}

// WithNumberFrom adds the numberFrom to the ledger accounting period search params
func (o *LedgerAccountingPeriodSearchParams) WithNumberFrom(numberFrom *int32) *LedgerAccountingPeriodSearchParams {
	o.SetNumberFrom(numberFrom)
	return o
}

// SetNumberFrom adds the numberFrom to the ledger accounting period search params
func (o *LedgerAccountingPeriodSearchParams) SetNumberFrom(numberFrom *int32) {
	o.NumberFrom = numberFrom
}

// WithNumberTo adds the numberTo to the ledger accounting period search params
func (o *LedgerAccountingPeriodSearchParams) WithNumberTo(numberTo *int32) *LedgerAccountingPeriodSearchParams {
	o.SetNumberTo(numberTo)
	return o
}

// SetNumberTo adds the numberTo to the ledger accounting period search params
func (o *LedgerAccountingPeriodSearchParams) SetNumberTo(numberTo *int32) {
	o.NumberTo = numberTo
}

// WithSorting adds the sorting to the ledger accounting period search params
func (o *LedgerAccountingPeriodSearchParams) WithSorting(sorting *string) *LedgerAccountingPeriodSearchParams {
	o.SetSorting(sorting)
	return o
}

// SetSorting adds the sorting to the ledger accounting period search params
func (o *LedgerAccountingPeriodSearchParams) SetSorting(sorting *string) {
	o.Sorting = sorting
}

// WithStartFrom adds the startFrom to the ledger accounting period search params
func (o *LedgerAccountingPeriodSearchParams) WithStartFrom(startFrom *string) *LedgerAccountingPeriodSearchParams {
	o.SetStartFrom(startFrom)
	return o
}

// SetStartFrom adds the startFrom to the ledger accounting period search params
func (o *LedgerAccountingPeriodSearchParams) SetStartFrom(startFrom *string) {
	o.StartFrom = startFrom
}

// WithStartTo adds the startTo to the ledger accounting period search params
func (o *LedgerAccountingPeriodSearchParams) WithStartTo(startTo *string) *LedgerAccountingPeriodSearchParams {
	o.SetStartTo(startTo)
	return o
}

// SetStartTo adds the startTo to the ledger accounting period search params
func (o *LedgerAccountingPeriodSearchParams) SetStartTo(startTo *string) {
	o.StartTo = startTo
}

// WriteToRequest writes these params to a swagger request
func (o *LedgerAccountingPeriodSearchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Count != nil {

		// query param count
		var qrCount int32
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt32(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	if o.EndFrom != nil {

		// query param endFrom
		var qrEndFrom string
		if o.EndFrom != nil {
			qrEndFrom = *o.EndFrom
		}
		qEndFrom := qrEndFrom
		if qEndFrom != "" {
			if err := r.SetQueryParam("endFrom", qEndFrom); err != nil {
				return err
			}
		}

	}

	if o.EndTo != nil {

		// query param endTo
		var qrEndTo string
		if o.EndTo != nil {
			qrEndTo = *o.EndTo
		}
		qEndTo := qrEndTo
		if qEndTo != "" {
			if err := r.SetQueryParam("endTo", qEndTo); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.From != nil {

		// query param from
		var qrFrom int64
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := swag.FormatInt64(qrFrom)
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	if o.ID != nil {

		// query param id
		var qrID string
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.NumberFrom != nil {

		// query param numberFrom
		var qrNumberFrom int32
		if o.NumberFrom != nil {
			qrNumberFrom = *o.NumberFrom
		}
		qNumberFrom := swag.FormatInt32(qrNumberFrom)
		if qNumberFrom != "" {
			if err := r.SetQueryParam("numberFrom", qNumberFrom); err != nil {
				return err
			}
		}

	}

	if o.NumberTo != nil {

		// query param numberTo
		var qrNumberTo int32
		if o.NumberTo != nil {
			qrNumberTo = *o.NumberTo
		}
		qNumberTo := swag.FormatInt32(qrNumberTo)
		if qNumberTo != "" {
			if err := r.SetQueryParam("numberTo", qNumberTo); err != nil {
				return err
			}
		}

	}

	if o.Sorting != nil {

		// query param sorting
		var qrSorting string
		if o.Sorting != nil {
			qrSorting = *o.Sorting
		}
		qSorting := qrSorting
		if qSorting != "" {
			if err := r.SetQueryParam("sorting", qSorting); err != nil {
				return err
			}
		}

	}

	if o.StartFrom != nil {

		// query param startFrom
		var qrStartFrom string
		if o.StartFrom != nil {
			qrStartFrom = *o.StartFrom
		}
		qStartFrom := qrStartFrom
		if qStartFrom != "" {
			if err := r.SetQueryParam("startFrom", qStartFrom); err != nil {
				return err
			}
		}

	}

	if o.StartTo != nil {

		// query param startTo
		var qrStartTo string
		if o.StartTo != nil {
			qrStartTo = *o.StartTo
		}
		qStartTo := qrStartTo
		if qStartTo != "" {
			if err := r.SetQueryParam("startTo", qStartTo); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
