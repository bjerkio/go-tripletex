// Copyright 2020 Bjerk AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package week

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewTimesheetWeekApproveApproveParams creates a new TimesheetWeekApproveApproveParams object
// with the default values initialized.
func NewTimesheetWeekApproveApproveParams() *TimesheetWeekApproveApproveParams {
	var ()
	return &TimesheetWeekApproveApproveParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTimesheetWeekApproveApproveParamsWithTimeout creates a new TimesheetWeekApproveApproveParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTimesheetWeekApproveApproveParamsWithTimeout(timeout time.Duration) *TimesheetWeekApproveApproveParams {
	var ()
	return &TimesheetWeekApproveApproveParams{

		timeout: timeout,
	}
}

// NewTimesheetWeekApproveApproveParamsWithContext creates a new TimesheetWeekApproveApproveParams object
// with the default values initialized, and the ability to set a context for a request
func NewTimesheetWeekApproveApproveParamsWithContext(ctx context.Context) *TimesheetWeekApproveApproveParams {
	var ()
	return &TimesheetWeekApproveApproveParams{

		Context: ctx,
	}
}

// NewTimesheetWeekApproveApproveParamsWithHTTPClient creates a new TimesheetWeekApproveApproveParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTimesheetWeekApproveApproveParamsWithHTTPClient(client *http.Client) *TimesheetWeekApproveApproveParams {
	var ()
	return &TimesheetWeekApproveApproveParams{
		HTTPClient: client,
	}
}

/*TimesheetWeekApproveApproveParams contains all the parameters to send to the API endpoint
for the timesheet week approve approve operation typically these are written to a http.Request
*/
type TimesheetWeekApproveApproveParams struct {

	/*EmployeeID
	  Equals

	*/
	EmployeeID *int32
	/*ID
	  Equals

	*/
	ID *int32
	/*WeekYear
	  ISO-8601 week-year

	*/
	WeekYear *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the timesheet week approve approve params
func (o *TimesheetWeekApproveApproveParams) WithTimeout(timeout time.Duration) *TimesheetWeekApproveApproveParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the timesheet week approve approve params
func (o *TimesheetWeekApproveApproveParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the timesheet week approve approve params
func (o *TimesheetWeekApproveApproveParams) WithContext(ctx context.Context) *TimesheetWeekApproveApproveParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the timesheet week approve approve params
func (o *TimesheetWeekApproveApproveParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the timesheet week approve approve params
func (o *TimesheetWeekApproveApproveParams) WithHTTPClient(client *http.Client) *TimesheetWeekApproveApproveParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the timesheet week approve approve params
func (o *TimesheetWeekApproveApproveParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEmployeeID adds the employeeID to the timesheet week approve approve params
func (o *TimesheetWeekApproveApproveParams) WithEmployeeID(employeeID *int32) *TimesheetWeekApproveApproveParams {
	o.SetEmployeeID(employeeID)
	return o
}

// SetEmployeeID adds the employeeId to the timesheet week approve approve params
func (o *TimesheetWeekApproveApproveParams) SetEmployeeID(employeeID *int32) {
	o.EmployeeID = employeeID
}

// WithID adds the id to the timesheet week approve approve params
func (o *TimesheetWeekApproveApproveParams) WithID(id *int32) *TimesheetWeekApproveApproveParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the timesheet week approve approve params
func (o *TimesheetWeekApproveApproveParams) SetID(id *int32) {
	o.ID = id
}

// WithWeekYear adds the weekYear to the timesheet week approve approve params
func (o *TimesheetWeekApproveApproveParams) WithWeekYear(weekYear *string) *TimesheetWeekApproveApproveParams {
	o.SetWeekYear(weekYear)
	return o
}

// SetWeekYear adds the weekYear to the timesheet week approve approve params
func (o *TimesheetWeekApproveApproveParams) SetWeekYear(weekYear *string) {
	o.WeekYear = weekYear
}

// WriteToRequest writes these params to a swagger request
func (o *TimesheetWeekApproveApproveParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EmployeeID != nil {

		// query param employeeId
		var qrEmployeeID int32
		if o.EmployeeID != nil {
			qrEmployeeID = *o.EmployeeID
		}
		qEmployeeID := swag.FormatInt32(qrEmployeeID)
		if qEmployeeID != "" {
			if err := r.SetQueryParam("employeeId", qEmployeeID); err != nil {
				return err
			}
		}

	}

	if o.ID != nil {

		// query param id
		var qrID int32
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatInt32(qrID)
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.WeekYear != nil {

		// query param weekYear
		var qrWeekYear string
		if o.WeekYear != nil {
			qrWeekYear = *o.WeekYear
		}
		qWeekYear := qrWeekYear
		if qWeekYear != "" {
			if err := r.SetQueryParam("weekYear", qWeekYear); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
