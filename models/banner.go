// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Banner banner
//
// swagger:model Banner
type Banner struct {

	// banner type
	// Read Only: true
	BannerType string `json:"bannerType,omitempty"`

	// button
	// Read Only: true
	// Max Length: 255
	Button string `json:"button,omitempty"`

	// changes
	// Read Only: true
	Changes []*Change `json:"changes"`

	// done
	// Read Only: true
	Done *bool `json:"done,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// link
	// Read Only: true
	Link string `json:"link,omitempty"`

	// message
	// Read Only: true
	Message string `json:"message,omitempty"`

	// tag
	// Read Only: true
	// Max Length: 255
	Tag string `json:"tag,omitempty"`

	// title
	// Read Only: true
	// Max Length: 255
	Title string `json:"title,omitempty"`

	// url
	// Read Only: true
	URL string `json:"url,omitempty"`

	// version
	Version int32 `json:"version,omitempty"`
}

// Validate validates this banner
func (m *Banner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateButton(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Banner) validateButton(formats strfmt.Registry) error {

	if swag.IsZero(m.Button) { // not required
		return nil
	}

	if err := validate.MaxLength("button", "body", string(m.Button), 255); err != nil {
		return err
	}

	return nil
}

func (m *Banner) validateChanges(formats strfmt.Registry) error {

	if swag.IsZero(m.Changes) { // not required
		return nil
	}

	for i := 0; i < len(m.Changes); i++ {
		if swag.IsZero(m.Changes[i]) { // not required
			continue
		}

		if m.Changes[i] != nil {
			if err := m.Changes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("changes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Banner) validateTag(formats strfmt.Registry) error {

	if swag.IsZero(m.Tag) { // not required
		return nil
	}

	if err := validate.MaxLength("tag", "body", string(m.Tag), 255); err != nil {
		return err
	}

	return nil
}

func (m *Banner) validateTitle(formats strfmt.Registry) error {

	if swag.IsZero(m.Title) { // not required
		return nil
	}

	if err := validate.MaxLength("title", "body", string(m.Title), 255); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Banner) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Banner) UnmarshalBinary(b []byte) error {
	var res Banner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
