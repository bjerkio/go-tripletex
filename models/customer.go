// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Customer customer
//
// swagger:model Customer
type Customer struct {

	// account manager
	AccountManager *Employee `json:"accountManager,omitempty"`

	// List of the bank account numbers for this customer. Norwegian bank account numbers only.
	BankAccounts []string `json:"bankAccounts"`

	// Category 1 of this customer
	Category1 *CustomerCategory `json:"category1,omitempty"`

	// Category 2 of this customer
	Category2 *CustomerCategory `json:"category2,omitempty"`

	// Category 3 of this customer
	Category3 *CustomerCategory `json:"category3,omitempty"`

	// changes
	// Read Only: true
	Changes []*Change `json:"changes"`

	// customer number
	// Minimum: 0
	CustomerNumber *int32 `json:"customerNumber,omitempty"`

	// delivery address
	DeliveryAddress *DeliveryAddress `json:"deliveryAddress,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// email
	// Max Length: 254
	// Min Length: 0
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// Define the invoice attachment type for emailing to the customer.<br>LINK: Send invoice as link in email.<br>ATTACHMENT: Send invoice as attachment in email.<br>
	// Enum: [LINK ATTACHMENT]
	EmailAttachmentType string `json:"emailAttachmentType,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// invoice email
	// Max Length: 254
	// Min Length: 0
	InvoiceEmail *string `json:"invoiceEmail,omitempty"`

	// Define the invoicing method for the customer.<br>EMAIL: Send invoices as email.<br>EHF: Send invoices as EHF.<br>EFAKTURA: Send invoices as EFAKTURA.<br>VIPPS: Send invoices through VIPPS.<br>PAPER: Send invoices as paper invoice.<br>MANUAL: User will have to send invocie manually.<br>
	// Enum: [EMAIL EHF EFAKTURA VIPPS PAPER MANUAL]
	InvoiceSendMethod string `json:"invoiceSendMethod,omitempty"`

	// Number of days/months in which invoices created from this customer is due
	// Maximum: 10000
	// Minimum: 0
	InvoicesDueIn *int32 `json:"invoicesDueIn,omitempty"`

	// Set the time unit of invoicesDueIn. The special case RECURRING_DAY_OF_MONTH enables the due date to be fixed to a specific day of the month, in this case the fixed due date will automatically be set as standard on all invoices created from this customer. Note that when RECURRING_DAY_OF_MONTH is set, the due date will be set to the last day of month if "31" is set in invoicesDueIn.
	// Enum: [DAYS MONTHS RECURRING_DAY_OF_MONTH]
	InvoicesDueInType string `json:"invoicesDueInType,omitempty"`

	// is customer
	// Read Only: true
	IsCustomer *bool `json:"isCustomer,omitempty"`

	// is inactive
	// Read Only: true
	IsInactive *bool `json:"isInactive,omitempty"`

	// is private individual
	IsPrivateIndividual *bool `json:"isPrivateIndividual,omitempty"`

	// Defines if the customer is also a supplier.
	IsSupplier *bool `json:"isSupplier,omitempty"`

	// language
	// Enum: [NO EN SV]
	Language string `json:"language,omitempty"`

	// name
	// Required: true
	// Max Length: 255
	Name *string `json:"name"`

	// organization number
	// Max Length: 100
	OrganizationNumber string `json:"organizationNumber,omitempty"`

	// The email address of the customer where the noticing emails are sent in case of an overdue
	// Max Length: 254
	// Min Length: 0
	// Format: email
	OverdueNoticeEmail strfmt.Email `json:"overdueNoticeEmail,omitempty"`

	// phone number
	// Max Length: 100
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// phone number mobile
	// Max Length: 100
	PhoneNumberMobile string `json:"phoneNumberMobile,omitempty"`

	// physical address
	PhysicalAddress *Address `json:"physicalAddress,omitempty"`

	// postal address
	PostalAddress *Address `json:"postalAddress,omitempty"`

	// Enables various orders on one customer invoice.
	SingleCustomerInvoice *bool `json:"singleCustomerInvoice,omitempty"`

	// supplier number
	// Minimum: 0
	SupplierNumber *int32 `json:"supplierNumber,omitempty"`

	// url
	// Read Only: true
	URL string `json:"url,omitempty"`

	// version
	Version int32 `json:"version,omitempty"`
}

// Validate validates this customer
func (m *Customer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountManager(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategory1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategory2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategory3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeliveryAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailAttachmentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvoiceEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvoiceSendMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvoicesDueIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvoicesDueInType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverdueNoticeEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneNumberMobile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysicalAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostalAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupplierNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Customer) validateAccountManager(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountManager) { // not required
		return nil
	}

	if m.AccountManager != nil {
		if err := m.AccountManager.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accountManager")
			}
			return err
		}
	}

	return nil
}

func (m *Customer) validateCategory1(formats strfmt.Registry) error {

	if swag.IsZero(m.Category1) { // not required
		return nil
	}

	if m.Category1 != nil {
		if err := m.Category1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("category1")
			}
			return err
		}
	}

	return nil
}

func (m *Customer) validateCategory2(formats strfmt.Registry) error {

	if swag.IsZero(m.Category2) { // not required
		return nil
	}

	if m.Category2 != nil {
		if err := m.Category2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("category2")
			}
			return err
		}
	}

	return nil
}

func (m *Customer) validateCategory3(formats strfmt.Registry) error {

	if swag.IsZero(m.Category3) { // not required
		return nil
	}

	if m.Category3 != nil {
		if err := m.Category3.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("category3")
			}
			return err
		}
	}

	return nil
}

func (m *Customer) validateChanges(formats strfmt.Registry) error {

	if swag.IsZero(m.Changes) { // not required
		return nil
	}

	for i := 0; i < len(m.Changes); i++ {
		if swag.IsZero(m.Changes[i]) { // not required
			continue
		}

		if m.Changes[i] != nil {
			if err := m.Changes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("changes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Customer) validateCustomerNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomerNumber) { // not required
		return nil
	}

	if err := validate.MinimumInt("customerNumber", "body", int64(*m.CustomerNumber), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateDeliveryAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.DeliveryAddress) { // not required
		return nil
	}

	if m.DeliveryAddress != nil {
		if err := m.DeliveryAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deliveryAddress")
			}
			return err
		}
	}

	return nil
}

func (m *Customer) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.MinLength("email", "body", string(m.Email), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("email", "body", string(m.Email), 254); err != nil {
		return err
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

var customerTypeEmailAttachmentTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LINK","ATTACHMENT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customerTypeEmailAttachmentTypePropEnum = append(customerTypeEmailAttachmentTypePropEnum, v)
	}
}

const (

	// CustomerEmailAttachmentTypeLINK captures enum value "LINK"
	CustomerEmailAttachmentTypeLINK string = "LINK"

	// CustomerEmailAttachmentTypeATTACHMENT captures enum value "ATTACHMENT"
	CustomerEmailAttachmentTypeATTACHMENT string = "ATTACHMENT"
)

// prop value enum
func (m *Customer) validateEmailAttachmentTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, customerTypeEmailAttachmentTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Customer) validateEmailAttachmentType(formats strfmt.Registry) error {

	if swag.IsZero(m.EmailAttachmentType) { // not required
		return nil
	}

	// value enum
	if err := m.validateEmailAttachmentTypeEnum("emailAttachmentType", "body", m.EmailAttachmentType); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateInvoiceEmail(formats strfmt.Registry) error {

	if swag.IsZero(m.InvoiceEmail) { // not required
		return nil
	}

	if err := validate.MinLength("invoiceEmail", "body", string(*m.InvoiceEmail), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("invoiceEmail", "body", string(*m.InvoiceEmail), 254); err != nil {
		return err
	}

	return nil
}

var customerTypeInvoiceSendMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EMAIL","EHF","EFAKTURA","VIPPS","PAPER","MANUAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customerTypeInvoiceSendMethodPropEnum = append(customerTypeInvoiceSendMethodPropEnum, v)
	}
}

const (

	// CustomerInvoiceSendMethodEMAIL captures enum value "EMAIL"
	CustomerInvoiceSendMethodEMAIL string = "EMAIL"

	// CustomerInvoiceSendMethodEHF captures enum value "EHF"
	CustomerInvoiceSendMethodEHF string = "EHF"

	// CustomerInvoiceSendMethodEFAKTURA captures enum value "EFAKTURA"
	CustomerInvoiceSendMethodEFAKTURA string = "EFAKTURA"

	// CustomerInvoiceSendMethodVIPPS captures enum value "VIPPS"
	CustomerInvoiceSendMethodVIPPS string = "VIPPS"

	// CustomerInvoiceSendMethodPAPER captures enum value "PAPER"
	CustomerInvoiceSendMethodPAPER string = "PAPER"

	// CustomerInvoiceSendMethodMANUAL captures enum value "MANUAL"
	CustomerInvoiceSendMethodMANUAL string = "MANUAL"
)

// prop value enum
func (m *Customer) validateInvoiceSendMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, customerTypeInvoiceSendMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Customer) validateInvoiceSendMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.InvoiceSendMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateInvoiceSendMethodEnum("invoiceSendMethod", "body", m.InvoiceSendMethod); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateInvoicesDueIn(formats strfmt.Registry) error {

	if swag.IsZero(m.InvoicesDueIn) { // not required
		return nil
	}

	if err := validate.MinimumInt("invoicesDueIn", "body", int64(*m.InvoicesDueIn), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("invoicesDueIn", "body", int64(*m.InvoicesDueIn), 10000, false); err != nil {
		return err
	}

	return nil
}

var customerTypeInvoicesDueInTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DAYS","MONTHS","RECURRING_DAY_OF_MONTH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customerTypeInvoicesDueInTypePropEnum = append(customerTypeInvoicesDueInTypePropEnum, v)
	}
}

const (

	// CustomerInvoicesDueInTypeDAYS captures enum value "DAYS"
	CustomerInvoicesDueInTypeDAYS string = "DAYS"

	// CustomerInvoicesDueInTypeMONTHS captures enum value "MONTHS"
	CustomerInvoicesDueInTypeMONTHS string = "MONTHS"

	// CustomerInvoicesDueInTypeRECURRINGDAYOFMONTH captures enum value "RECURRING_DAY_OF_MONTH"
	CustomerInvoicesDueInTypeRECURRINGDAYOFMONTH string = "RECURRING_DAY_OF_MONTH"
)

// prop value enum
func (m *Customer) validateInvoicesDueInTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, customerTypeInvoicesDueInTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Customer) validateInvoicesDueInType(formats strfmt.Registry) error {

	if swag.IsZero(m.InvoicesDueInType) { // not required
		return nil
	}

	// value enum
	if err := m.validateInvoicesDueInTypeEnum("invoicesDueInType", "body", m.InvoicesDueInType); err != nil {
		return err
	}

	return nil
}

var customerTypeLanguagePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NO","EN","SV"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customerTypeLanguagePropEnum = append(customerTypeLanguagePropEnum, v)
	}
}

const (

	// CustomerLanguageNO captures enum value "NO"
	CustomerLanguageNO string = "NO"

	// CustomerLanguageEN captures enum value "EN"
	CustomerLanguageEN string = "EN"

	// CustomerLanguageSV captures enum value "SV"
	CustomerLanguageSV string = "SV"
)

// prop value enum
func (m *Customer) validateLanguageEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, customerTypeLanguagePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Customer) validateLanguage(formats strfmt.Registry) error {

	if swag.IsZero(m.Language) { // not required
		return nil
	}

	// value enum
	if err := m.validateLanguageEnum("language", "body", m.Language); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 255); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateOrganizationNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.OrganizationNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("organizationNumber", "body", string(m.OrganizationNumber), 100); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateOverdueNoticeEmail(formats strfmt.Registry) error {

	if swag.IsZero(m.OverdueNoticeEmail) { // not required
		return nil
	}

	if err := validate.MinLength("overdueNoticeEmail", "body", string(m.OverdueNoticeEmail), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("overdueNoticeEmail", "body", string(m.OverdueNoticeEmail), 254); err != nil {
		return err
	}

	if err := validate.FormatOf("overdueNoticeEmail", "body", "email", m.OverdueNoticeEmail.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validatePhoneNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.PhoneNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("phoneNumber", "body", string(m.PhoneNumber), 100); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validatePhoneNumberMobile(formats strfmt.Registry) error {

	if swag.IsZero(m.PhoneNumberMobile) { // not required
		return nil
	}

	if err := validate.MaxLength("phoneNumberMobile", "body", string(m.PhoneNumberMobile), 100); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validatePhysicalAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.PhysicalAddress) { // not required
		return nil
	}

	if m.PhysicalAddress != nil {
		if err := m.PhysicalAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalAddress")
			}
			return err
		}
	}

	return nil
}

func (m *Customer) validatePostalAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.PostalAddress) { // not required
		return nil
	}

	if m.PostalAddress != nil {
		if err := m.PostalAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postalAddress")
			}
			return err
		}
	}

	return nil
}

func (m *Customer) validateSupplierNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.SupplierNumber) { // not required
		return nil
	}

	if err := validate.MinimumInt("supplierNumber", "body", int64(*m.SupplierNumber), 0, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Customer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Customer) UnmarshalBinary(b []byte) error {
	var res Customer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
