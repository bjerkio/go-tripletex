// Copyright 2020 Bjerk AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewProjectForTimeSheetGetForTimeSheetParams creates a new ProjectForTimeSheetGetForTimeSheetParams object
// with the default values initialized.
func NewProjectForTimeSheetGetForTimeSheetParams() *ProjectForTimeSheetGetForTimeSheetParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &ProjectForTimeSheetGetForTimeSheetParams{
		Count: &countDefault,
		From:  &fromDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewProjectForTimeSheetGetForTimeSheetParamsWithTimeout creates a new ProjectForTimeSheetGetForTimeSheetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewProjectForTimeSheetGetForTimeSheetParamsWithTimeout(timeout time.Duration) *ProjectForTimeSheetGetForTimeSheetParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &ProjectForTimeSheetGetForTimeSheetParams{
		Count: &countDefault,
		From:  &fromDefault,

		timeout: timeout,
	}
}

// NewProjectForTimeSheetGetForTimeSheetParamsWithContext creates a new ProjectForTimeSheetGetForTimeSheetParams object
// with the default values initialized, and the ability to set a context for a request
func NewProjectForTimeSheetGetForTimeSheetParamsWithContext(ctx context.Context) *ProjectForTimeSheetGetForTimeSheetParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &ProjectForTimeSheetGetForTimeSheetParams{
		Count: &countDefault,
		From:  &fromDefault,

		Context: ctx,
	}
}

// NewProjectForTimeSheetGetForTimeSheetParamsWithHTTPClient creates a new ProjectForTimeSheetGetForTimeSheetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewProjectForTimeSheetGetForTimeSheetParamsWithHTTPClient(client *http.Client) *ProjectForTimeSheetGetForTimeSheetParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &ProjectForTimeSheetGetForTimeSheetParams{
		Count:      &countDefault,
		From:       &fromDefault,
		HTTPClient: client,
	}
}

/*ProjectForTimeSheetGetForTimeSheetParams contains all the parameters to send to the API endpoint
for the project for time sheet get for time sheet operation typically these are written to a http.Request
*/
type ProjectForTimeSheetGetForTimeSheetParams struct {

	/*Count
	  Number of elements to return

	*/
	Count *int64
	/*Date
	  yyyy-MM-dd. Defaults to today.

	*/
	Date *string
	/*EmployeeID
	  Employee ID. Defaults to ID of token owner.

	*/
	EmployeeID *int32
	/*Fields
	  Fields filter pattern

	*/
	Fields *string
	/*From
	  From index

	*/
	From *int64
	/*Sorting
	  Sorting pattern

	*/
	Sorting *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the project for time sheet get for time sheet params
func (o *ProjectForTimeSheetGetForTimeSheetParams) WithTimeout(timeout time.Duration) *ProjectForTimeSheetGetForTimeSheetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the project for time sheet get for time sheet params
func (o *ProjectForTimeSheetGetForTimeSheetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the project for time sheet get for time sheet params
func (o *ProjectForTimeSheetGetForTimeSheetParams) WithContext(ctx context.Context) *ProjectForTimeSheetGetForTimeSheetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the project for time sheet get for time sheet params
func (o *ProjectForTimeSheetGetForTimeSheetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the project for time sheet get for time sheet params
func (o *ProjectForTimeSheetGetForTimeSheetParams) WithHTTPClient(client *http.Client) *ProjectForTimeSheetGetForTimeSheetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the project for time sheet get for time sheet params
func (o *ProjectForTimeSheetGetForTimeSheetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCount adds the count to the project for time sheet get for time sheet params
func (o *ProjectForTimeSheetGetForTimeSheetParams) WithCount(count *int64) *ProjectForTimeSheetGetForTimeSheetParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the project for time sheet get for time sheet params
func (o *ProjectForTimeSheetGetForTimeSheetParams) SetCount(count *int64) {
	o.Count = count
}

// WithDate adds the date to the project for time sheet get for time sheet params
func (o *ProjectForTimeSheetGetForTimeSheetParams) WithDate(date *string) *ProjectForTimeSheetGetForTimeSheetParams {
	o.SetDate(date)
	return o
}

// SetDate adds the date to the project for time sheet get for time sheet params
func (o *ProjectForTimeSheetGetForTimeSheetParams) SetDate(date *string) {
	o.Date = date
}

// WithEmployeeID adds the employeeID to the project for time sheet get for time sheet params
func (o *ProjectForTimeSheetGetForTimeSheetParams) WithEmployeeID(employeeID *int32) *ProjectForTimeSheetGetForTimeSheetParams {
	o.SetEmployeeID(employeeID)
	return o
}

// SetEmployeeID adds the employeeId to the project for time sheet get for time sheet params
func (o *ProjectForTimeSheetGetForTimeSheetParams) SetEmployeeID(employeeID *int32) {
	o.EmployeeID = employeeID
}

// WithFields adds the fields to the project for time sheet get for time sheet params
func (o *ProjectForTimeSheetGetForTimeSheetParams) WithFields(fields *string) *ProjectForTimeSheetGetForTimeSheetParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the project for time sheet get for time sheet params
func (o *ProjectForTimeSheetGetForTimeSheetParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithFrom adds the from to the project for time sheet get for time sheet params
func (o *ProjectForTimeSheetGetForTimeSheetParams) WithFrom(from *int64) *ProjectForTimeSheetGetForTimeSheetParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the project for time sheet get for time sheet params
func (o *ProjectForTimeSheetGetForTimeSheetParams) SetFrom(from *int64) {
	o.From = from
}

// WithSorting adds the sorting to the project for time sheet get for time sheet params
func (o *ProjectForTimeSheetGetForTimeSheetParams) WithSorting(sorting *string) *ProjectForTimeSheetGetForTimeSheetParams {
	o.SetSorting(sorting)
	return o
}

// SetSorting adds the sorting to the project for time sheet get for time sheet params
func (o *ProjectForTimeSheetGetForTimeSheetParams) SetSorting(sorting *string) {
	o.Sorting = sorting
}

// WriteToRequest writes these params to a swagger request
func (o *ProjectForTimeSheetGetForTimeSheetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Count != nil {

		// query param count
		var qrCount int64
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt64(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	if o.Date != nil {

		// query param date
		var qrDate string
		if o.Date != nil {
			qrDate = *o.Date
		}
		qDate := qrDate
		if qDate != "" {
			if err := r.SetQueryParam("date", qDate); err != nil {
				return err
			}
		}

	}

	if o.EmployeeID != nil {

		// query param employeeId
		var qrEmployeeID int32
		if o.EmployeeID != nil {
			qrEmployeeID = *o.EmployeeID
		}
		qEmployeeID := swag.FormatInt32(qrEmployeeID)
		if qEmployeeID != "" {
			if err := r.SetQueryParam("employeeId", qEmployeeID); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.From != nil {

		// query param from
		var qrFrom int64
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := swag.FormatInt64(qrFrom)
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	if o.Sorting != nil {

		// query param sorting
		var qrSorting string
		if o.Sorting != nil {
			qrSorting = *o.Sorting
		}
		qSorting := qrSorting
		if qSorting != "" {
			if err := r.SetQueryParam("sorting", qSorting); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
