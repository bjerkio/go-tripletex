// Copyright 2020 Bjerk AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SalaryTransaction salary transaction
//
// swagger:model SalaryTransaction
type SalaryTransaction struct {

	// changes
	// Read Only: true
	Changes []*Change `json:"changes"`

	// Voucher date.
	Date string `json:"date,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// With historical wage vouchers you can update the wage system with information dated before the opening balance.
	IsHistorical *bool `json:"isHistorical,omitempty"`

	// month
	// Required: true
	Month *int32 `json:"month"`

	// The date payslips are made available to the employee. Defaults to voucherDate.
	PaySlipsAvailableDate string `json:"paySlipsAvailableDate,omitempty"`

	// Link to individual payslip objects.
	// Required: true
	Payslips []*Payslip `json:"payslips"`

	// url
	// Read Only: true
	URL string `json:"url,omitempty"`

	// version
	Version int32 `json:"version,omitempty"`

	// year
	// Required: true
	Year *int32 `json:"year"`
}

// Validate validates this salary transaction
func (m *SalaryTransaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayslips(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateYear(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SalaryTransaction) validateChanges(formats strfmt.Registry) error {

	if swag.IsZero(m.Changes) { // not required
		return nil
	}

	for i := 0; i < len(m.Changes); i++ {
		if swag.IsZero(m.Changes[i]) { // not required
			continue
		}

		if m.Changes[i] != nil {
			if err := m.Changes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("changes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SalaryTransaction) validateMonth(formats strfmt.Registry) error {

	if err := validate.Required("month", "body", m.Month); err != nil {
		return err
	}

	return nil
}

func (m *SalaryTransaction) validatePayslips(formats strfmt.Registry) error {

	if err := validate.Required("payslips", "body", m.Payslips); err != nil {
		return err
	}

	for i := 0; i < len(m.Payslips); i++ {
		if swag.IsZero(m.Payslips[i]) { // not required
			continue
		}

		if m.Payslips[i] != nil {
			if err := m.Payslips[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("payslips" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SalaryTransaction) validateYear(formats strfmt.Registry) error {

	if err := validate.Required("year", "body", m.Year); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SalaryTransaction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SalaryTransaction) UnmarshalBinary(b []byte) error {
	var res SalaryTransaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
