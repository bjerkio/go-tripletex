// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EmployeeTokenBundle employee token bundle
//
// swagger:model EmployeeTokenBundle
type EmployeeTokenBundle struct {

	// employee
	Employee *Employee `json:"employee,omitempty"`

	// employee token
	EmployeeToken *EmployeeToken `json:"employeeToken,omitempty"`

	// robot employee
	RobotEmployee *Employee `json:"robotEmployee,omitempty"`
}

// Validate validates this employee token bundle
func (m *EmployeeTokenBundle) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmployee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmployeeToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRobotEmployee(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EmployeeTokenBundle) validateEmployee(formats strfmt.Registry) error {

	if swag.IsZero(m.Employee) { // not required
		return nil
	}

	if m.Employee != nil {
		if err := m.Employee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("employee")
			}
			return err
		}
	}

	return nil
}

func (m *EmployeeTokenBundle) validateEmployeeToken(formats strfmt.Registry) error {

	if swag.IsZero(m.EmployeeToken) { // not required
		return nil
	}

	if m.EmployeeToken != nil {
		if err := m.EmployeeToken.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("employeeToken")
			}
			return err
		}
	}

	return nil
}

func (m *EmployeeTokenBundle) validateRobotEmployee(formats strfmt.Registry) error {

	if swag.IsZero(m.RobotEmployee) { // not required
		return nil
	}

	if m.RobotEmployee != nil {
		if err := m.RobotEmployee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("robotEmployee")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EmployeeTokenBundle) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EmployeeTokenBundle) UnmarshalBinary(b []byte) error {
	var res EmployeeTokenBundle
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
