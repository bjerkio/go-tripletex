// Code generated by go-swagger; DO NOT EDIT.

package hourly_rates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewProjectHourlyRatesSearchParams creates a new ProjectHourlyRatesSearchParams object
// with the default values initialized.
func NewProjectHourlyRatesSearchParams() *ProjectHourlyRatesSearchParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &ProjectHourlyRatesSearchParams{
		Count: &countDefault,
		From:  &fromDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewProjectHourlyRatesSearchParamsWithTimeout creates a new ProjectHourlyRatesSearchParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewProjectHourlyRatesSearchParamsWithTimeout(timeout time.Duration) *ProjectHourlyRatesSearchParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &ProjectHourlyRatesSearchParams{
		Count: &countDefault,
		From:  &fromDefault,

		timeout: timeout,
	}
}

// NewProjectHourlyRatesSearchParamsWithContext creates a new ProjectHourlyRatesSearchParams object
// with the default values initialized, and the ability to set a context for a request
func NewProjectHourlyRatesSearchParamsWithContext(ctx context.Context) *ProjectHourlyRatesSearchParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &ProjectHourlyRatesSearchParams{
		Count: &countDefault,
		From:  &fromDefault,

		Context: ctx,
	}
}

// NewProjectHourlyRatesSearchParamsWithHTTPClient creates a new ProjectHourlyRatesSearchParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewProjectHourlyRatesSearchParamsWithHTTPClient(client *http.Client) *ProjectHourlyRatesSearchParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &ProjectHourlyRatesSearchParams{
		Count:      &countDefault,
		From:       &fromDefault,
		HTTPClient: client,
	}
}

/*ProjectHourlyRatesSearchParams contains all the parameters to send to the API endpoint
for the project hourly rates search operation typically these are written to a http.Request
*/
type ProjectHourlyRatesSearchParams struct {

	/*Count
	  Number of elements to return

	*/
	Count *int64
	/*Fields
	  Fields filter pattern

	*/
	Fields *string
	/*From
	  From index

	*/
	From *int64
	/*ID
	  List of IDs

	*/
	ID *string
	/*ProjectID
	  List of IDs

	*/
	ProjectID *string
	/*ShowInProjectOrder
	  Equals

	*/
	ShowInProjectOrder *bool
	/*Sorting
	  Sorting pattern

	*/
	Sorting *string
	/*StartDateFrom
	  From and including

	*/
	StartDateFrom *string
	/*StartDateTo
	  To and excluding

	*/
	StartDateTo *string
	/*Type
	  Equals

	*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the project hourly rates search params
func (o *ProjectHourlyRatesSearchParams) WithTimeout(timeout time.Duration) *ProjectHourlyRatesSearchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the project hourly rates search params
func (o *ProjectHourlyRatesSearchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the project hourly rates search params
func (o *ProjectHourlyRatesSearchParams) WithContext(ctx context.Context) *ProjectHourlyRatesSearchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the project hourly rates search params
func (o *ProjectHourlyRatesSearchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the project hourly rates search params
func (o *ProjectHourlyRatesSearchParams) WithHTTPClient(client *http.Client) *ProjectHourlyRatesSearchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the project hourly rates search params
func (o *ProjectHourlyRatesSearchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCount adds the count to the project hourly rates search params
func (o *ProjectHourlyRatesSearchParams) WithCount(count *int64) *ProjectHourlyRatesSearchParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the project hourly rates search params
func (o *ProjectHourlyRatesSearchParams) SetCount(count *int64) {
	o.Count = count
}

// WithFields adds the fields to the project hourly rates search params
func (o *ProjectHourlyRatesSearchParams) WithFields(fields *string) *ProjectHourlyRatesSearchParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the project hourly rates search params
func (o *ProjectHourlyRatesSearchParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithFrom adds the from to the project hourly rates search params
func (o *ProjectHourlyRatesSearchParams) WithFrom(from *int64) *ProjectHourlyRatesSearchParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the project hourly rates search params
func (o *ProjectHourlyRatesSearchParams) SetFrom(from *int64) {
	o.From = from
}

// WithID adds the id to the project hourly rates search params
func (o *ProjectHourlyRatesSearchParams) WithID(id *string) *ProjectHourlyRatesSearchParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the project hourly rates search params
func (o *ProjectHourlyRatesSearchParams) SetID(id *string) {
	o.ID = id
}

// WithProjectID adds the projectID to the project hourly rates search params
func (o *ProjectHourlyRatesSearchParams) WithProjectID(projectID *string) *ProjectHourlyRatesSearchParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the project hourly rates search params
func (o *ProjectHourlyRatesSearchParams) SetProjectID(projectID *string) {
	o.ProjectID = projectID
}

// WithShowInProjectOrder adds the showInProjectOrder to the project hourly rates search params
func (o *ProjectHourlyRatesSearchParams) WithShowInProjectOrder(showInProjectOrder *bool) *ProjectHourlyRatesSearchParams {
	o.SetShowInProjectOrder(showInProjectOrder)
	return o
}

// SetShowInProjectOrder adds the showInProjectOrder to the project hourly rates search params
func (o *ProjectHourlyRatesSearchParams) SetShowInProjectOrder(showInProjectOrder *bool) {
	o.ShowInProjectOrder = showInProjectOrder
}

// WithSorting adds the sorting to the project hourly rates search params
func (o *ProjectHourlyRatesSearchParams) WithSorting(sorting *string) *ProjectHourlyRatesSearchParams {
	o.SetSorting(sorting)
	return o
}

// SetSorting adds the sorting to the project hourly rates search params
func (o *ProjectHourlyRatesSearchParams) SetSorting(sorting *string) {
	o.Sorting = sorting
}

// WithStartDateFrom adds the startDateFrom to the project hourly rates search params
func (o *ProjectHourlyRatesSearchParams) WithStartDateFrom(startDateFrom *string) *ProjectHourlyRatesSearchParams {
	o.SetStartDateFrom(startDateFrom)
	return o
}

// SetStartDateFrom adds the startDateFrom to the project hourly rates search params
func (o *ProjectHourlyRatesSearchParams) SetStartDateFrom(startDateFrom *string) {
	o.StartDateFrom = startDateFrom
}

// WithStartDateTo adds the startDateTo to the project hourly rates search params
func (o *ProjectHourlyRatesSearchParams) WithStartDateTo(startDateTo *string) *ProjectHourlyRatesSearchParams {
	o.SetStartDateTo(startDateTo)
	return o
}

// SetStartDateTo adds the startDateTo to the project hourly rates search params
func (o *ProjectHourlyRatesSearchParams) SetStartDateTo(startDateTo *string) {
	o.StartDateTo = startDateTo
}

// WithType adds the typeVar to the project hourly rates search params
func (o *ProjectHourlyRatesSearchParams) WithType(typeVar *string) *ProjectHourlyRatesSearchParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the project hourly rates search params
func (o *ProjectHourlyRatesSearchParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *ProjectHourlyRatesSearchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Count != nil {

		// query param count
		var qrCount int64
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt64(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.From != nil {

		// query param from
		var qrFrom int64
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := swag.FormatInt64(qrFrom)
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	if o.ID != nil {

		// query param id
		var qrID string
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.ProjectID != nil {

		// query param projectId
		var qrProjectID string
		if o.ProjectID != nil {
			qrProjectID = *o.ProjectID
		}
		qProjectID := qrProjectID
		if qProjectID != "" {
			if err := r.SetQueryParam("projectId", qProjectID); err != nil {
				return err
			}
		}

	}

	if o.ShowInProjectOrder != nil {

		// query param showInProjectOrder
		var qrShowInProjectOrder bool
		if o.ShowInProjectOrder != nil {
			qrShowInProjectOrder = *o.ShowInProjectOrder
		}
		qShowInProjectOrder := swag.FormatBool(qrShowInProjectOrder)
		if qShowInProjectOrder != "" {
			if err := r.SetQueryParam("showInProjectOrder", qShowInProjectOrder); err != nil {
				return err
			}
		}

	}

	if o.Sorting != nil {

		// query param sorting
		var qrSorting string
		if o.Sorting != nil {
			qrSorting = *o.Sorting
		}
		qSorting := qrSorting
		if qSorting != "" {
			if err := r.SetQueryParam("sorting", qSorting); err != nil {
				return err
			}
		}

	}

	if o.StartDateFrom != nil {

		// query param startDateFrom
		var qrStartDateFrom string
		if o.StartDateFrom != nil {
			qrStartDateFrom = *o.StartDateFrom
		}
		qStartDateFrom := qrStartDateFrom
		if qStartDateFrom != "" {
			if err := r.SetQueryParam("startDateFrom", qStartDateFrom); err != nil {
				return err
			}
		}

	}

	if o.StartDateTo != nil {

		// query param startDateTo
		var qrStartDateTo string
		if o.StartDateTo != nil {
			qrStartDateTo = *o.StartDateTo
		}
		qStartDateTo := qrStartDateTo
		if qStartDateTo != "" {
			if err := r.SetQueryParam("startDateTo", qStartDateTo); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
