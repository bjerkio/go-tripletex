// Code generated by go-swagger; DO NOT EDIT.

package order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new order API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for order API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	OrderApproveSubscriptionInvoiceApproveSubscriptionInvoice(params *OrderApproveSubscriptionInvoiceApproveSubscriptionInvoiceParams, authInfo runtime.ClientAuthInfoWriter) (*OrderApproveSubscriptionInvoiceApproveSubscriptionInvoiceOK, error)

	OrderAttachAttach(params *OrderAttachAttachParams, authInfo runtime.ClientAuthInfoWriter) (*OrderAttachAttachOK, error)

	OrderInvoiceMultipleOrdersInvoiceMultipleOrders(params *OrderInvoiceMultipleOrdersInvoiceMultipleOrdersParams, authInfo runtime.ClientAuthInfoWriter) (*OrderInvoiceMultipleOrdersInvoiceMultipleOrdersOK, error)

	OrderInvoiceInvoice(params *OrderInvoiceInvoiceParams, authInfo runtime.ClientAuthInfoWriter) (*OrderInvoiceInvoiceOK, error)

	OrderListPostList(params *OrderListPostListParams, authInfo runtime.ClientAuthInfoWriter) (*OrderListPostListCreated, error)

	OrderUnApproveSubscriptionInvoiceUnApproveSubscriptionInvoice(params *OrderUnApproveSubscriptionInvoiceUnApproveSubscriptionInvoiceParams, authInfo runtime.ClientAuthInfoWriter) error

	OrderGet(params *OrderGetParams, authInfo runtime.ClientAuthInfoWriter) (*OrderGetOK, error)

	OrderPost(params *OrderPostParams, authInfo runtime.ClientAuthInfoWriter) (*OrderPostCreated, error)

	OrderPut(params *OrderPutParams, authInfo runtime.ClientAuthInfoWriter) (*OrderPutOK, error)

	OrderSearch(params *OrderSearchParams, authInfo runtime.ClientAuthInfoWriter) (*OrderSearchOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  OrderApproveSubscriptionInvoiceApproveSubscriptionInvoice tos create a subscription invoice first create a order with the subscription enabled then approve it with this method this approves the order for subscription invoicing
*/
func (a *Client) OrderApproveSubscriptionInvoiceApproveSubscriptionInvoice(params *OrderApproveSubscriptionInvoiceApproveSubscriptionInvoiceParams, authInfo runtime.ClientAuthInfoWriter) (*OrderApproveSubscriptionInvoiceApproveSubscriptionInvoiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrderApproveSubscriptionInvoiceApproveSubscriptionInvoiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OrderApproveSubscriptionInvoice_approveSubscriptionInvoice",
		Method:             "PUT",
		PathPattern:        "/order/{id}/:approveSubscriptionInvoice",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrderApproveSubscriptionInvoiceApproveSubscriptionInvoiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrderApproveSubscriptionInvoiceApproveSubscriptionInvoiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OrderApproveSubscriptionInvoice_approveSubscriptionInvoice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OrderAttachAttach attaches document to specified order ID
*/
func (a *Client) OrderAttachAttach(params *OrderAttachAttachParams, authInfo runtime.ClientAuthInfoWriter) (*OrderAttachAttachOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrderAttachAttachParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OrderAttach_attach",
		Method:             "PUT",
		PathPattern:        "/order/{id}/:attach",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrderAttachAttachReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrderAttachAttachOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OrderAttach_attach: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OrderInvoiceMultipleOrdersInvoiceMultipleOrders bs e t a charges a single customer invoice from multiple orders the orders must be to the same customer currency due date receiver email and attn
*/
func (a *Client) OrderInvoiceMultipleOrdersInvoiceMultipleOrders(params *OrderInvoiceMultipleOrdersInvoiceMultipleOrdersParams, authInfo runtime.ClientAuthInfoWriter) (*OrderInvoiceMultipleOrdersInvoiceMultipleOrdersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrderInvoiceMultipleOrdersInvoiceMultipleOrdersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OrderInvoiceMultipleOrders_invoiceMultipleOrders",
		Method:             "PUT",
		PathPattern:        "/order/:invoiceMultipleOrders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrderInvoiceMultipleOrdersInvoiceMultipleOrdersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrderInvoiceMultipleOrdersInvoiceMultipleOrdersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OrderInvoiceMultipleOrders_invoiceMultipleOrders: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OrderInvoiceInvoice creates new invoice from order
*/
func (a *Client) OrderInvoiceInvoice(params *OrderInvoiceInvoiceParams, authInfo runtime.ClientAuthInfoWriter) (*OrderInvoiceInvoiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrderInvoiceInvoiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OrderInvoice_invoice",
		Method:             "PUT",
		PathPattern:        "/order/{id}/:invoice",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrderInvoiceInvoiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrderInvoiceInvoiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OrderInvoice_invoice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OrderListPostList bs e t a create multiple orders with order lines max 100 at a time
*/
func (a *Client) OrderListPostList(params *OrderListPostListParams, authInfo runtime.ClientAuthInfoWriter) (*OrderListPostListCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrderListPostListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OrderList_postList",
		Method:             "POST",
		PathPattern:        "/order/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrderListPostListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrderListPostListCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OrderList_postList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OrderUnApproveSubscriptionInvoiceUnApproveSubscriptionInvoice unapproves the order for subscription invoicing
*/
func (a *Client) OrderUnApproveSubscriptionInvoiceUnApproveSubscriptionInvoice(params *OrderUnApproveSubscriptionInvoiceUnApproveSubscriptionInvoiceParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrderUnApproveSubscriptionInvoiceUnApproveSubscriptionInvoiceParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OrderUnApproveSubscriptionInvoice_unApproveSubscriptionInvoice",
		Method:             "PUT",
		PathPattern:        "/order/{id}/:unApproveSubscriptionInvoice",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrderUnApproveSubscriptionInvoiceUnApproveSubscriptionInvoiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  OrderGet gets order by ID
*/
func (a *Client) OrderGet(params *OrderGetParams, authInfo runtime.ClientAuthInfoWriter) (*OrderGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrderGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Order_get",
		Method:             "GET",
		PathPattern:        "/order/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrderGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrderGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Order_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OrderPost creates order
*/
func (a *Client) OrderPost(params *OrderPostParams, authInfo runtime.ClientAuthInfoWriter) (*OrderPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrderPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Order_post",
		Method:             "POST",
		PathPattern:        "/order",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrderPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrderPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Order_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OrderPut updates order
*/
func (a *Client) OrderPut(params *OrderPutParams, authInfo runtime.ClientAuthInfoWriter) (*OrderPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrderPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Order_put",
		Method:             "PUT",
		PathPattern:        "/order/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrderPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrderPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Order_put: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OrderSearch finds orders corresponding with sent data
*/
func (a *Client) OrderSearch(params *OrderSearchParams, authInfo runtime.ClientAuthInfoWriter) (*OrderSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrderSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Order_search",
		Method:             "GET",
		PathPattern:        "/order",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrderSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrderSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Order_search: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
