// Copyright 2020 Bjerk AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package employee

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewTokenEmployeeCreateCreateParams creates a new TokenEmployeeCreateCreateParams object
// with the default values initialized.
func NewTokenEmployeeCreateCreateParams() *TokenEmployeeCreateCreateParams {
	var ()
	return &TokenEmployeeCreateCreateParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTokenEmployeeCreateCreateParamsWithTimeout creates a new TokenEmployeeCreateCreateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTokenEmployeeCreateCreateParamsWithTimeout(timeout time.Duration) *TokenEmployeeCreateCreateParams {
	var ()
	return &TokenEmployeeCreateCreateParams{

		timeout: timeout,
	}
}

// NewTokenEmployeeCreateCreateParamsWithContext creates a new TokenEmployeeCreateCreateParams object
// with the default values initialized, and the ability to set a context for a request
func NewTokenEmployeeCreateCreateParamsWithContext(ctx context.Context) *TokenEmployeeCreateCreateParams {
	var ()
	return &TokenEmployeeCreateCreateParams{

		Context: ctx,
	}
}

// NewTokenEmployeeCreateCreateParamsWithHTTPClient creates a new TokenEmployeeCreateCreateParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTokenEmployeeCreateCreateParamsWithHTTPClient(client *http.Client) *TokenEmployeeCreateCreateParams {
	var ()
	return &TokenEmployeeCreateCreateParams{
		HTTPClient: client,
	}
}

/*TokenEmployeeCreateCreateParams contains all the parameters to send to the API endpoint
for the token employee create create operation typically these are written to a http.Request
*/
type TokenEmployeeCreateCreateParams struct {

	/*CompanyOwned
	  Is the key company owned

	*/
	CompanyOwned bool
	/*ConsumerName
	  The name of the consumer

	*/
	ConsumerName string
	/*EmployeeID
	  The id of the employee

	*/
	EmployeeID int32
	/*ExpirationDate
	  Expiration date for the employeeToken

	*/
	ExpirationDate string
	/*TokenName
	  A user defined name for the new token

	*/
	TokenName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the token employee create create params
func (o *TokenEmployeeCreateCreateParams) WithTimeout(timeout time.Duration) *TokenEmployeeCreateCreateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the token employee create create params
func (o *TokenEmployeeCreateCreateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the token employee create create params
func (o *TokenEmployeeCreateCreateParams) WithContext(ctx context.Context) *TokenEmployeeCreateCreateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the token employee create create params
func (o *TokenEmployeeCreateCreateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the token employee create create params
func (o *TokenEmployeeCreateCreateParams) WithHTTPClient(client *http.Client) *TokenEmployeeCreateCreateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the token employee create create params
func (o *TokenEmployeeCreateCreateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCompanyOwned adds the companyOwned to the token employee create create params
func (o *TokenEmployeeCreateCreateParams) WithCompanyOwned(companyOwned bool) *TokenEmployeeCreateCreateParams {
	o.SetCompanyOwned(companyOwned)
	return o
}

// SetCompanyOwned adds the companyOwned to the token employee create create params
func (o *TokenEmployeeCreateCreateParams) SetCompanyOwned(companyOwned bool) {
	o.CompanyOwned = companyOwned
}

// WithConsumerName adds the consumerName to the token employee create create params
func (o *TokenEmployeeCreateCreateParams) WithConsumerName(consumerName string) *TokenEmployeeCreateCreateParams {
	o.SetConsumerName(consumerName)
	return o
}

// SetConsumerName adds the consumerName to the token employee create create params
func (o *TokenEmployeeCreateCreateParams) SetConsumerName(consumerName string) {
	o.ConsumerName = consumerName
}

// WithEmployeeID adds the employeeID to the token employee create create params
func (o *TokenEmployeeCreateCreateParams) WithEmployeeID(employeeID int32) *TokenEmployeeCreateCreateParams {
	o.SetEmployeeID(employeeID)
	return o
}

// SetEmployeeID adds the employeeId to the token employee create create params
func (o *TokenEmployeeCreateCreateParams) SetEmployeeID(employeeID int32) {
	o.EmployeeID = employeeID
}

// WithExpirationDate adds the expirationDate to the token employee create create params
func (o *TokenEmployeeCreateCreateParams) WithExpirationDate(expirationDate string) *TokenEmployeeCreateCreateParams {
	o.SetExpirationDate(expirationDate)
	return o
}

// SetExpirationDate adds the expirationDate to the token employee create create params
func (o *TokenEmployeeCreateCreateParams) SetExpirationDate(expirationDate string) {
	o.ExpirationDate = expirationDate
}

// WithTokenName adds the tokenName to the token employee create create params
func (o *TokenEmployeeCreateCreateParams) WithTokenName(tokenName string) *TokenEmployeeCreateCreateParams {
	o.SetTokenName(tokenName)
	return o
}

// SetTokenName adds the tokenName to the token employee create create params
func (o *TokenEmployeeCreateCreateParams) SetTokenName(tokenName string) {
	o.TokenName = tokenName
}

// WriteToRequest writes these params to a swagger request
func (o *TokenEmployeeCreateCreateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param companyOwned
	qrCompanyOwned := o.CompanyOwned
	qCompanyOwned := swag.FormatBool(qrCompanyOwned)
	if qCompanyOwned != "" {
		if err := r.SetQueryParam("companyOwned", qCompanyOwned); err != nil {
			return err
		}
	}

	// query param consumerName
	qrConsumerName := o.ConsumerName
	qConsumerName := qrConsumerName
	if qConsumerName != "" {
		if err := r.SetQueryParam("consumerName", qConsumerName); err != nil {
			return err
		}
	}

	// query param employeeId
	qrEmployeeID := o.EmployeeID
	qEmployeeID := swag.FormatInt32(qrEmployeeID)
	if qEmployeeID != "" {
		if err := r.SetQueryParam("employeeId", qEmployeeID); err != nil {
			return err
		}
	}

	// query param expirationDate
	qrExpirationDate := o.ExpirationDate
	qExpirationDate := qrExpirationDate
	if qExpirationDate != "" {
		if err := r.SetQueryParam("expirationDate", qExpirationDate); err != nil {
			return err
		}
	}

	// query param tokenName
	qrTokenName := o.TokenName
	qTokenName := qrTokenName
	if qTokenName != "" {
		if err := r.SetQueryParam("tokenName", qTokenName); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
