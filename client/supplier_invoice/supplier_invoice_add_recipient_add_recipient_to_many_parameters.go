// Code generated by go-swagger; DO NOT EDIT.

package supplier_invoice

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSupplierInvoiceAddRecipientAddRecipientToManyParams creates a new SupplierInvoiceAddRecipientAddRecipientToManyParams object
// with the default values initialized.
func NewSupplierInvoiceAddRecipientAddRecipientToManyParams() *SupplierInvoiceAddRecipientAddRecipientToManyParams {
	var ()
	return &SupplierInvoiceAddRecipientAddRecipientToManyParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSupplierInvoiceAddRecipientAddRecipientToManyParamsWithTimeout creates a new SupplierInvoiceAddRecipientAddRecipientToManyParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSupplierInvoiceAddRecipientAddRecipientToManyParamsWithTimeout(timeout time.Duration) *SupplierInvoiceAddRecipientAddRecipientToManyParams {
	var ()
	return &SupplierInvoiceAddRecipientAddRecipientToManyParams{

		timeout: timeout,
	}
}

// NewSupplierInvoiceAddRecipientAddRecipientToManyParamsWithContext creates a new SupplierInvoiceAddRecipientAddRecipientToManyParams object
// with the default values initialized, and the ability to set a context for a request
func NewSupplierInvoiceAddRecipientAddRecipientToManyParamsWithContext(ctx context.Context) *SupplierInvoiceAddRecipientAddRecipientToManyParams {
	var ()
	return &SupplierInvoiceAddRecipientAddRecipientToManyParams{

		Context: ctx,
	}
}

// NewSupplierInvoiceAddRecipientAddRecipientToManyParamsWithHTTPClient creates a new SupplierInvoiceAddRecipientAddRecipientToManyParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSupplierInvoiceAddRecipientAddRecipientToManyParamsWithHTTPClient(client *http.Client) *SupplierInvoiceAddRecipientAddRecipientToManyParams {
	var ()
	return &SupplierInvoiceAddRecipientAddRecipientToManyParams{
		HTTPClient: client,
	}
}

/*SupplierInvoiceAddRecipientAddRecipientToManyParams contains all the parameters to send to the API endpoint
for the supplier invoice add recipient add recipient to many operation typically these are written to a http.Request
*/
type SupplierInvoiceAddRecipientAddRecipientToManyParams struct {

	/*Comment
	  comment

	*/
	Comment *string
	/*EmployeeID
	  Element ID

	*/
	EmployeeID int32
	/*InvoiceIds
	  ID of the elements

	*/
	InvoiceIds *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the supplier invoice add recipient add recipient to many params
func (o *SupplierInvoiceAddRecipientAddRecipientToManyParams) WithTimeout(timeout time.Duration) *SupplierInvoiceAddRecipientAddRecipientToManyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the supplier invoice add recipient add recipient to many params
func (o *SupplierInvoiceAddRecipientAddRecipientToManyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the supplier invoice add recipient add recipient to many params
func (o *SupplierInvoiceAddRecipientAddRecipientToManyParams) WithContext(ctx context.Context) *SupplierInvoiceAddRecipientAddRecipientToManyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the supplier invoice add recipient add recipient to many params
func (o *SupplierInvoiceAddRecipientAddRecipientToManyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the supplier invoice add recipient add recipient to many params
func (o *SupplierInvoiceAddRecipientAddRecipientToManyParams) WithHTTPClient(client *http.Client) *SupplierInvoiceAddRecipientAddRecipientToManyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the supplier invoice add recipient add recipient to many params
func (o *SupplierInvoiceAddRecipientAddRecipientToManyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithComment adds the comment to the supplier invoice add recipient add recipient to many params
func (o *SupplierInvoiceAddRecipientAddRecipientToManyParams) WithComment(comment *string) *SupplierInvoiceAddRecipientAddRecipientToManyParams {
	o.SetComment(comment)
	return o
}

// SetComment adds the comment to the supplier invoice add recipient add recipient to many params
func (o *SupplierInvoiceAddRecipientAddRecipientToManyParams) SetComment(comment *string) {
	o.Comment = comment
}

// WithEmployeeID adds the employeeID to the supplier invoice add recipient add recipient to many params
func (o *SupplierInvoiceAddRecipientAddRecipientToManyParams) WithEmployeeID(employeeID int32) *SupplierInvoiceAddRecipientAddRecipientToManyParams {
	o.SetEmployeeID(employeeID)
	return o
}

// SetEmployeeID adds the employeeId to the supplier invoice add recipient add recipient to many params
func (o *SupplierInvoiceAddRecipientAddRecipientToManyParams) SetEmployeeID(employeeID int32) {
	o.EmployeeID = employeeID
}

// WithInvoiceIds adds the invoiceIds to the supplier invoice add recipient add recipient to many params
func (o *SupplierInvoiceAddRecipientAddRecipientToManyParams) WithInvoiceIds(invoiceIds *string) *SupplierInvoiceAddRecipientAddRecipientToManyParams {
	o.SetInvoiceIds(invoiceIds)
	return o
}

// SetInvoiceIds adds the invoiceIds to the supplier invoice add recipient add recipient to many params
func (o *SupplierInvoiceAddRecipientAddRecipientToManyParams) SetInvoiceIds(invoiceIds *string) {
	o.InvoiceIds = invoiceIds
}

// WriteToRequest writes these params to a swagger request
func (o *SupplierInvoiceAddRecipientAddRecipientToManyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Comment != nil {

		// query param comment
		var qrComment string
		if o.Comment != nil {
			qrComment = *o.Comment
		}
		qComment := qrComment
		if qComment != "" {
			if err := r.SetQueryParam("comment", qComment); err != nil {
				return err
			}
		}

	}

	// query param employeeId
	qrEmployeeID := o.EmployeeID
	qEmployeeID := swag.FormatInt32(qrEmployeeID)
	if qEmployeeID != "" {
		if err := r.SetQueryParam("employeeId", qEmployeeID); err != nil {
			return err
		}
	}

	if o.InvoiceIds != nil {

		// query param invoiceIds
		var qrInvoiceIds string
		if o.InvoiceIds != nil {
			qrInvoiceIds = *o.InvoiceIds
		}
		qInvoiceIds := qrInvoiceIds
		if qInvoiceIds != "" {
			if err := r.SetQueryParam("invoiceIds", qInvoiceIds); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
