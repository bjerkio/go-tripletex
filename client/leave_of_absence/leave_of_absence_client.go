// Code generated by go-swagger; DO NOT EDIT.

package leave_of_absence

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new leave of absence API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for leave of absence API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	EmployeeEmploymentLeaveOfAbsenceListPostList(params *EmployeeEmploymentLeaveOfAbsenceListPostListParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeEmploymentLeaveOfAbsenceListPostListCreated, error)

	EmployeeEmploymentLeaveOfAbsenceGet(params *EmployeeEmploymentLeaveOfAbsenceGetParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeEmploymentLeaveOfAbsenceGetOK, error)

	EmployeeEmploymentLeaveOfAbsencePost(params *EmployeeEmploymentLeaveOfAbsencePostParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeEmploymentLeaveOfAbsencePostCreated, error)

	EmployeeEmploymentLeaveOfAbsencePut(params *EmployeeEmploymentLeaveOfAbsencePutParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeEmploymentLeaveOfAbsencePutOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  EmployeeEmploymentLeaveOfAbsenceListPostList bs e t a create multiple leave of absences
*/
func (a *Client) EmployeeEmploymentLeaveOfAbsenceListPostList(params *EmployeeEmploymentLeaveOfAbsenceListPostListParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeEmploymentLeaveOfAbsenceListPostListCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeeEmploymentLeaveOfAbsenceListPostListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeeEmploymentLeaveOfAbsenceList_postList",
		Method:             "POST",
		PathPattern:        "/employee/employment/leaveOfAbsence/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmployeeEmploymentLeaveOfAbsenceListPostListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmployeeEmploymentLeaveOfAbsenceListPostListCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmployeeEmploymentLeaveOfAbsenceList_postList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EmployeeEmploymentLeaveOfAbsenceGet bs e t a find leave of absence by ID
*/
func (a *Client) EmployeeEmploymentLeaveOfAbsenceGet(params *EmployeeEmploymentLeaveOfAbsenceGetParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeEmploymentLeaveOfAbsenceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeeEmploymentLeaveOfAbsenceGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeeEmploymentLeaveOfAbsence_get",
		Method:             "GET",
		PathPattern:        "/employee/employment/leaveOfAbsence/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmployeeEmploymentLeaveOfAbsenceGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmployeeEmploymentLeaveOfAbsenceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmployeeEmploymentLeaveOfAbsence_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EmployeeEmploymentLeaveOfAbsencePost bs e t a create leave of absence
*/
func (a *Client) EmployeeEmploymentLeaveOfAbsencePost(params *EmployeeEmploymentLeaveOfAbsencePostParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeEmploymentLeaveOfAbsencePostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeeEmploymentLeaveOfAbsencePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeeEmploymentLeaveOfAbsence_post",
		Method:             "POST",
		PathPattern:        "/employee/employment/leaveOfAbsence",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmployeeEmploymentLeaveOfAbsencePostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmployeeEmploymentLeaveOfAbsencePostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmployeeEmploymentLeaveOfAbsence_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EmployeeEmploymentLeaveOfAbsencePut bs e t a update leave of absence
*/
func (a *Client) EmployeeEmploymentLeaveOfAbsencePut(params *EmployeeEmploymentLeaveOfAbsencePutParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeEmploymentLeaveOfAbsencePutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeeEmploymentLeaveOfAbsencePutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeeEmploymentLeaveOfAbsence_put",
		Method:             "PUT",
		PathPattern:        "/employee/employment/leaveOfAbsence/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmployeeEmploymentLeaveOfAbsencePutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmployeeEmploymentLeaveOfAbsencePutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmployeeEmploymentLeaveOfAbsence_put: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
