// Copyright 2020 Bjerk AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package payslip

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSalaryPayslipSearchParams creates a new SalaryPayslipSearchParams object
// with the default values initialized.
func NewSalaryPayslipSearchParams() *SalaryPayslipSearchParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &SalaryPayslipSearchParams{
		Count: &countDefault,
		From:  &fromDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewSalaryPayslipSearchParamsWithTimeout creates a new SalaryPayslipSearchParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSalaryPayslipSearchParamsWithTimeout(timeout time.Duration) *SalaryPayslipSearchParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &SalaryPayslipSearchParams{
		Count: &countDefault,
		From:  &fromDefault,

		timeout: timeout,
	}
}

// NewSalaryPayslipSearchParamsWithContext creates a new SalaryPayslipSearchParams object
// with the default values initialized, and the ability to set a context for a request
func NewSalaryPayslipSearchParamsWithContext(ctx context.Context) *SalaryPayslipSearchParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &SalaryPayslipSearchParams{
		Count: &countDefault,
		From:  &fromDefault,

		Context: ctx,
	}
}

// NewSalaryPayslipSearchParamsWithHTTPClient creates a new SalaryPayslipSearchParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSalaryPayslipSearchParamsWithHTTPClient(client *http.Client) *SalaryPayslipSearchParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &SalaryPayslipSearchParams{
		Count:      &countDefault,
		From:       &fromDefault,
		HTTPClient: client,
	}
}

/*SalaryPayslipSearchParams contains all the parameters to send to the API endpoint
for the salary payslip search operation typically these are written to a http.Request
*/
type SalaryPayslipSearchParams struct {

	/*ActivityID
	  List of IDs

	*/
	ActivityID *string
	/*Comment
	  Containing

	*/
	Comment *string
	/*Count
	  Number of elements to return

	*/
	Count *int64
	/*EmployeeID
	  List of IDs

	*/
	EmployeeID *string
	/*Fields
	  Fields filter pattern

	*/
	Fields *string
	/*From
	  From index

	*/
	From *int64
	/*ID
	  List of IDs

	*/
	ID *string
	/*MonthFrom
	  From and including

	*/
	MonthFrom *int32
	/*MonthTo
	  To and excluding

	*/
	MonthTo *int32
	/*Sorting
	  Sorting pattern

	*/
	Sorting *string
	/*VoucherDateFrom
	  From and including

	*/
	VoucherDateFrom *string
	/*VoucherDateTo
	  To and excluding

	*/
	VoucherDateTo *string
	/*WageTransactionID
	  List of IDs

	*/
	WageTransactionID *string
	/*YearFrom
	  From and including

	*/
	YearFrom *int32
	/*YearTo
	  To and excluding

	*/
	YearTo *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the salary payslip search params
func (o *SalaryPayslipSearchParams) WithTimeout(timeout time.Duration) *SalaryPayslipSearchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the salary payslip search params
func (o *SalaryPayslipSearchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the salary payslip search params
func (o *SalaryPayslipSearchParams) WithContext(ctx context.Context) *SalaryPayslipSearchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the salary payslip search params
func (o *SalaryPayslipSearchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the salary payslip search params
func (o *SalaryPayslipSearchParams) WithHTTPClient(client *http.Client) *SalaryPayslipSearchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the salary payslip search params
func (o *SalaryPayslipSearchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActivityID adds the activityID to the salary payslip search params
func (o *SalaryPayslipSearchParams) WithActivityID(activityID *string) *SalaryPayslipSearchParams {
	o.SetActivityID(activityID)
	return o
}

// SetActivityID adds the activityId to the salary payslip search params
func (o *SalaryPayslipSearchParams) SetActivityID(activityID *string) {
	o.ActivityID = activityID
}

// WithComment adds the comment to the salary payslip search params
func (o *SalaryPayslipSearchParams) WithComment(comment *string) *SalaryPayslipSearchParams {
	o.SetComment(comment)
	return o
}

// SetComment adds the comment to the salary payslip search params
func (o *SalaryPayslipSearchParams) SetComment(comment *string) {
	o.Comment = comment
}

// WithCount adds the count to the salary payslip search params
func (o *SalaryPayslipSearchParams) WithCount(count *int64) *SalaryPayslipSearchParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the salary payslip search params
func (o *SalaryPayslipSearchParams) SetCount(count *int64) {
	o.Count = count
}

// WithEmployeeID adds the employeeID to the salary payslip search params
func (o *SalaryPayslipSearchParams) WithEmployeeID(employeeID *string) *SalaryPayslipSearchParams {
	o.SetEmployeeID(employeeID)
	return o
}

// SetEmployeeID adds the employeeId to the salary payslip search params
func (o *SalaryPayslipSearchParams) SetEmployeeID(employeeID *string) {
	o.EmployeeID = employeeID
}

// WithFields adds the fields to the salary payslip search params
func (o *SalaryPayslipSearchParams) WithFields(fields *string) *SalaryPayslipSearchParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the salary payslip search params
func (o *SalaryPayslipSearchParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithFrom adds the from to the salary payslip search params
func (o *SalaryPayslipSearchParams) WithFrom(from *int64) *SalaryPayslipSearchParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the salary payslip search params
func (o *SalaryPayslipSearchParams) SetFrom(from *int64) {
	o.From = from
}

// WithID adds the id to the salary payslip search params
func (o *SalaryPayslipSearchParams) WithID(id *string) *SalaryPayslipSearchParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the salary payslip search params
func (o *SalaryPayslipSearchParams) SetID(id *string) {
	o.ID = id
}

// WithMonthFrom adds the monthFrom to the salary payslip search params
func (o *SalaryPayslipSearchParams) WithMonthFrom(monthFrom *int32) *SalaryPayslipSearchParams {
	o.SetMonthFrom(monthFrom)
	return o
}

// SetMonthFrom adds the monthFrom to the salary payslip search params
func (o *SalaryPayslipSearchParams) SetMonthFrom(monthFrom *int32) {
	o.MonthFrom = monthFrom
}

// WithMonthTo adds the monthTo to the salary payslip search params
func (o *SalaryPayslipSearchParams) WithMonthTo(monthTo *int32) *SalaryPayslipSearchParams {
	o.SetMonthTo(monthTo)
	return o
}

// SetMonthTo adds the monthTo to the salary payslip search params
func (o *SalaryPayslipSearchParams) SetMonthTo(monthTo *int32) {
	o.MonthTo = monthTo
}

// WithSorting adds the sorting to the salary payslip search params
func (o *SalaryPayslipSearchParams) WithSorting(sorting *string) *SalaryPayslipSearchParams {
	o.SetSorting(sorting)
	return o
}

// SetSorting adds the sorting to the salary payslip search params
func (o *SalaryPayslipSearchParams) SetSorting(sorting *string) {
	o.Sorting = sorting
}

// WithVoucherDateFrom adds the voucherDateFrom to the salary payslip search params
func (o *SalaryPayslipSearchParams) WithVoucherDateFrom(voucherDateFrom *string) *SalaryPayslipSearchParams {
	o.SetVoucherDateFrom(voucherDateFrom)
	return o
}

// SetVoucherDateFrom adds the voucherDateFrom to the salary payslip search params
func (o *SalaryPayslipSearchParams) SetVoucherDateFrom(voucherDateFrom *string) {
	o.VoucherDateFrom = voucherDateFrom
}

// WithVoucherDateTo adds the voucherDateTo to the salary payslip search params
func (o *SalaryPayslipSearchParams) WithVoucherDateTo(voucherDateTo *string) *SalaryPayslipSearchParams {
	o.SetVoucherDateTo(voucherDateTo)
	return o
}

// SetVoucherDateTo adds the voucherDateTo to the salary payslip search params
func (o *SalaryPayslipSearchParams) SetVoucherDateTo(voucherDateTo *string) {
	o.VoucherDateTo = voucherDateTo
}

// WithWageTransactionID adds the wageTransactionID to the salary payslip search params
func (o *SalaryPayslipSearchParams) WithWageTransactionID(wageTransactionID *string) *SalaryPayslipSearchParams {
	o.SetWageTransactionID(wageTransactionID)
	return o
}

// SetWageTransactionID adds the wageTransactionId to the salary payslip search params
func (o *SalaryPayslipSearchParams) SetWageTransactionID(wageTransactionID *string) {
	o.WageTransactionID = wageTransactionID
}

// WithYearFrom adds the yearFrom to the salary payslip search params
func (o *SalaryPayslipSearchParams) WithYearFrom(yearFrom *int32) *SalaryPayslipSearchParams {
	o.SetYearFrom(yearFrom)
	return o
}

// SetYearFrom adds the yearFrom to the salary payslip search params
func (o *SalaryPayslipSearchParams) SetYearFrom(yearFrom *int32) {
	o.YearFrom = yearFrom
}

// WithYearTo adds the yearTo to the salary payslip search params
func (o *SalaryPayslipSearchParams) WithYearTo(yearTo *int32) *SalaryPayslipSearchParams {
	o.SetYearTo(yearTo)
	return o
}

// SetYearTo adds the yearTo to the salary payslip search params
func (o *SalaryPayslipSearchParams) SetYearTo(yearTo *int32) {
	o.YearTo = yearTo
}

// WriteToRequest writes these params to a swagger request
func (o *SalaryPayslipSearchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ActivityID != nil {

		// query param activityId
		var qrActivityID string
		if o.ActivityID != nil {
			qrActivityID = *o.ActivityID
		}
		qActivityID := qrActivityID
		if qActivityID != "" {
			if err := r.SetQueryParam("activityId", qActivityID); err != nil {
				return err
			}
		}

	}

	if o.Comment != nil {

		// query param comment
		var qrComment string
		if o.Comment != nil {
			qrComment = *o.Comment
		}
		qComment := qrComment
		if qComment != "" {
			if err := r.SetQueryParam("comment", qComment); err != nil {
				return err
			}
		}

	}

	if o.Count != nil {

		// query param count
		var qrCount int64
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt64(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	if o.EmployeeID != nil {

		// query param employeeId
		var qrEmployeeID string
		if o.EmployeeID != nil {
			qrEmployeeID = *o.EmployeeID
		}
		qEmployeeID := qrEmployeeID
		if qEmployeeID != "" {
			if err := r.SetQueryParam("employeeId", qEmployeeID); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.From != nil {

		// query param from
		var qrFrom int64
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := swag.FormatInt64(qrFrom)
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	if o.ID != nil {

		// query param id
		var qrID string
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.MonthFrom != nil {

		// query param monthFrom
		var qrMonthFrom int32
		if o.MonthFrom != nil {
			qrMonthFrom = *o.MonthFrom
		}
		qMonthFrom := swag.FormatInt32(qrMonthFrom)
		if qMonthFrom != "" {
			if err := r.SetQueryParam("monthFrom", qMonthFrom); err != nil {
				return err
			}
		}

	}

	if o.MonthTo != nil {

		// query param monthTo
		var qrMonthTo int32
		if o.MonthTo != nil {
			qrMonthTo = *o.MonthTo
		}
		qMonthTo := swag.FormatInt32(qrMonthTo)
		if qMonthTo != "" {
			if err := r.SetQueryParam("monthTo", qMonthTo); err != nil {
				return err
			}
		}

	}

	if o.Sorting != nil {

		// query param sorting
		var qrSorting string
		if o.Sorting != nil {
			qrSorting = *o.Sorting
		}
		qSorting := qrSorting
		if qSorting != "" {
			if err := r.SetQueryParam("sorting", qSorting); err != nil {
				return err
			}
		}

	}

	if o.VoucherDateFrom != nil {

		// query param voucherDateFrom
		var qrVoucherDateFrom string
		if o.VoucherDateFrom != nil {
			qrVoucherDateFrom = *o.VoucherDateFrom
		}
		qVoucherDateFrom := qrVoucherDateFrom
		if qVoucherDateFrom != "" {
			if err := r.SetQueryParam("voucherDateFrom", qVoucherDateFrom); err != nil {
				return err
			}
		}

	}

	if o.VoucherDateTo != nil {

		// query param voucherDateTo
		var qrVoucherDateTo string
		if o.VoucherDateTo != nil {
			qrVoucherDateTo = *o.VoucherDateTo
		}
		qVoucherDateTo := qrVoucherDateTo
		if qVoucherDateTo != "" {
			if err := r.SetQueryParam("voucherDateTo", qVoucherDateTo); err != nil {
				return err
			}
		}

	}

	if o.WageTransactionID != nil {

		// query param wageTransactionId
		var qrWageTransactionID string
		if o.WageTransactionID != nil {
			qrWageTransactionID = *o.WageTransactionID
		}
		qWageTransactionID := qrWageTransactionID
		if qWageTransactionID != "" {
			if err := r.SetQueryParam("wageTransactionId", qWageTransactionID); err != nil {
				return err
			}
		}

	}

	if o.YearFrom != nil {

		// query param yearFrom
		var qrYearFrom int32
		if o.YearFrom != nil {
			qrYearFrom = *o.YearFrom
		}
		qYearFrom := swag.FormatInt32(qrYearFrom)
		if qYearFrom != "" {
			if err := r.SetQueryParam("yearFrom", qYearFrom); err != nil {
				return err
			}
		}

	}

	if o.YearTo != nil {

		// query param yearTo
		var qrYearTo int32
		if o.YearTo != nil {
			qrYearTo = *o.YearTo
		}
		qYearTo := swag.FormatInt32(qrYearTo)
		if qYearTo != "" {
			if err := r.SetQueryParam("yearTo", qYearTo); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
