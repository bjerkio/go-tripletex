// Code generated by go-swagger; DO NOT EDIT.

package activity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewActivitySearchParams creates a new ActivitySearchParams object
// with the default values initialized.
func NewActivitySearchParams() *ActivitySearchParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &ActivitySearchParams{
		Count: &countDefault,
		From:  &fromDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewActivitySearchParamsWithTimeout creates a new ActivitySearchParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewActivitySearchParamsWithTimeout(timeout time.Duration) *ActivitySearchParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &ActivitySearchParams{
		Count: &countDefault,
		From:  &fromDefault,

		timeout: timeout,
	}
}

// NewActivitySearchParamsWithContext creates a new ActivitySearchParams object
// with the default values initialized, and the ability to set a context for a request
func NewActivitySearchParamsWithContext(ctx context.Context) *ActivitySearchParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &ActivitySearchParams{
		Count: &countDefault,
		From:  &fromDefault,

		Context: ctx,
	}
}

// NewActivitySearchParamsWithHTTPClient creates a new ActivitySearchParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewActivitySearchParamsWithHTTPClient(client *http.Client) *ActivitySearchParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &ActivitySearchParams{
		Count:      &countDefault,
		From:       &fromDefault,
		HTTPClient: client,
	}
}

/*ActivitySearchParams contains all the parameters to send to the API endpoint
for the activity search operation typically these are written to a http.Request
*/
type ActivitySearchParams struct {

	/*Count
	  Number of elements to return

	*/
	Count *int64
	/*Description
	  Containing

	*/
	Description *string
	/*Fields
	  Fields filter pattern

	*/
	Fields *string
	/*From
	  From index

	*/
	From *int64
	/*ID
	  List of IDs

	*/
	ID *string
	/*IsChargeable
	  Equals

	*/
	IsChargeable *bool
	/*IsGeneral
	  Equals

	*/
	IsGeneral *bool
	/*IsInactive
	  Equals

	*/
	IsInactive *bool
	/*IsProjectActivity
	  Equals

	*/
	IsProjectActivity *bool
	/*IsTask
	  Equals

	*/
	IsTask *bool
	/*Name
	  Containing

	*/
	Name *string
	/*Number
	  Equals

	*/
	Number *string
	/*Sorting
	  Sorting pattern

	*/
	Sorting *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the activity search params
func (o *ActivitySearchParams) WithTimeout(timeout time.Duration) *ActivitySearchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the activity search params
func (o *ActivitySearchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the activity search params
func (o *ActivitySearchParams) WithContext(ctx context.Context) *ActivitySearchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the activity search params
func (o *ActivitySearchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the activity search params
func (o *ActivitySearchParams) WithHTTPClient(client *http.Client) *ActivitySearchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the activity search params
func (o *ActivitySearchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCount adds the count to the activity search params
func (o *ActivitySearchParams) WithCount(count *int64) *ActivitySearchParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the activity search params
func (o *ActivitySearchParams) SetCount(count *int64) {
	o.Count = count
}

// WithDescription adds the description to the activity search params
func (o *ActivitySearchParams) WithDescription(description *string) *ActivitySearchParams {
	o.SetDescription(description)
	return o
}

// SetDescription adds the description to the activity search params
func (o *ActivitySearchParams) SetDescription(description *string) {
	o.Description = description
}

// WithFields adds the fields to the activity search params
func (o *ActivitySearchParams) WithFields(fields *string) *ActivitySearchParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the activity search params
func (o *ActivitySearchParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithFrom adds the from to the activity search params
func (o *ActivitySearchParams) WithFrom(from *int64) *ActivitySearchParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the activity search params
func (o *ActivitySearchParams) SetFrom(from *int64) {
	o.From = from
}

// WithID adds the id to the activity search params
func (o *ActivitySearchParams) WithID(id *string) *ActivitySearchParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the activity search params
func (o *ActivitySearchParams) SetID(id *string) {
	o.ID = id
}

// WithIsChargeable adds the isChargeable to the activity search params
func (o *ActivitySearchParams) WithIsChargeable(isChargeable *bool) *ActivitySearchParams {
	o.SetIsChargeable(isChargeable)
	return o
}

// SetIsChargeable adds the isChargeable to the activity search params
func (o *ActivitySearchParams) SetIsChargeable(isChargeable *bool) {
	o.IsChargeable = isChargeable
}

// WithIsGeneral adds the isGeneral to the activity search params
func (o *ActivitySearchParams) WithIsGeneral(isGeneral *bool) *ActivitySearchParams {
	o.SetIsGeneral(isGeneral)
	return o
}

// SetIsGeneral adds the isGeneral to the activity search params
func (o *ActivitySearchParams) SetIsGeneral(isGeneral *bool) {
	o.IsGeneral = isGeneral
}

// WithIsInactive adds the isInactive to the activity search params
func (o *ActivitySearchParams) WithIsInactive(isInactive *bool) *ActivitySearchParams {
	o.SetIsInactive(isInactive)
	return o
}

// SetIsInactive adds the isInactive to the activity search params
func (o *ActivitySearchParams) SetIsInactive(isInactive *bool) {
	o.IsInactive = isInactive
}

// WithIsProjectActivity adds the isProjectActivity to the activity search params
func (o *ActivitySearchParams) WithIsProjectActivity(isProjectActivity *bool) *ActivitySearchParams {
	o.SetIsProjectActivity(isProjectActivity)
	return o
}

// SetIsProjectActivity adds the isProjectActivity to the activity search params
func (o *ActivitySearchParams) SetIsProjectActivity(isProjectActivity *bool) {
	o.IsProjectActivity = isProjectActivity
}

// WithIsTask adds the isTask to the activity search params
func (o *ActivitySearchParams) WithIsTask(isTask *bool) *ActivitySearchParams {
	o.SetIsTask(isTask)
	return o
}

// SetIsTask adds the isTask to the activity search params
func (o *ActivitySearchParams) SetIsTask(isTask *bool) {
	o.IsTask = isTask
}

// WithName adds the name to the activity search params
func (o *ActivitySearchParams) WithName(name *string) *ActivitySearchParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the activity search params
func (o *ActivitySearchParams) SetName(name *string) {
	o.Name = name
}

// WithNumber adds the number to the activity search params
func (o *ActivitySearchParams) WithNumber(number *string) *ActivitySearchParams {
	o.SetNumber(number)
	return o
}

// SetNumber adds the number to the activity search params
func (o *ActivitySearchParams) SetNumber(number *string) {
	o.Number = number
}

// WithSorting adds the sorting to the activity search params
func (o *ActivitySearchParams) WithSorting(sorting *string) *ActivitySearchParams {
	o.SetSorting(sorting)
	return o
}

// SetSorting adds the sorting to the activity search params
func (o *ActivitySearchParams) SetSorting(sorting *string) {
	o.Sorting = sorting
}

// WriteToRequest writes these params to a swagger request
func (o *ActivitySearchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Count != nil {

		// query param count
		var qrCount int64
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt64(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	if o.Description != nil {

		// query param description
		var qrDescription string
		if o.Description != nil {
			qrDescription = *o.Description
		}
		qDescription := qrDescription
		if qDescription != "" {
			if err := r.SetQueryParam("description", qDescription); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.From != nil {

		// query param from
		var qrFrom int64
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := swag.FormatInt64(qrFrom)
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	if o.ID != nil {

		// query param id
		var qrID string
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.IsChargeable != nil {

		// query param isChargeable
		var qrIsChargeable bool
		if o.IsChargeable != nil {
			qrIsChargeable = *o.IsChargeable
		}
		qIsChargeable := swag.FormatBool(qrIsChargeable)
		if qIsChargeable != "" {
			if err := r.SetQueryParam("isChargeable", qIsChargeable); err != nil {
				return err
			}
		}

	}

	if o.IsGeneral != nil {

		// query param isGeneral
		var qrIsGeneral bool
		if o.IsGeneral != nil {
			qrIsGeneral = *o.IsGeneral
		}
		qIsGeneral := swag.FormatBool(qrIsGeneral)
		if qIsGeneral != "" {
			if err := r.SetQueryParam("isGeneral", qIsGeneral); err != nil {
				return err
			}
		}

	}

	if o.IsInactive != nil {

		// query param isInactive
		var qrIsInactive bool
		if o.IsInactive != nil {
			qrIsInactive = *o.IsInactive
		}
		qIsInactive := swag.FormatBool(qrIsInactive)
		if qIsInactive != "" {
			if err := r.SetQueryParam("isInactive", qIsInactive); err != nil {
				return err
			}
		}

	}

	if o.IsProjectActivity != nil {

		// query param isProjectActivity
		var qrIsProjectActivity bool
		if o.IsProjectActivity != nil {
			qrIsProjectActivity = *o.IsProjectActivity
		}
		qIsProjectActivity := swag.FormatBool(qrIsProjectActivity)
		if qIsProjectActivity != "" {
			if err := r.SetQueryParam("isProjectActivity", qIsProjectActivity); err != nil {
				return err
			}
		}

	}

	if o.IsTask != nil {

		// query param isTask
		var qrIsTask bool
		if o.IsTask != nil {
			qrIsTask = *o.IsTask
		}
		qIsTask := swag.FormatBool(qrIsTask)
		if qIsTask != "" {
			if err := r.SetQueryParam("isTask", qIsTask); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.Number != nil {

		// query param number
		var qrNumber string
		if o.Number != nil {
			qrNumber = *o.Number
		}
		qNumber := qrNumber
		if qNumber != "" {
			if err := r.SetQueryParam("number", qNumber); err != nil {
				return err
			}
		}

	}

	if o.Sorting != nil {

		// query param sorting
		var qrSorting string
		if o.Sorting != nil {
			qrSorting = *o.Sorting
		}
		qSorting := qrSorting
		if qSorting != "" {
			if err := r.SetQueryParam("sorting", qSorting); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
