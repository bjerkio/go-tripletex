// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TravelExpenseRateCategory travel expense rate category
//
// swagger:model TravelExpenseRateCategory
type TravelExpenseRateCategory struct {

	// amelding wage code
	AmeldingWageCode int32 `json:"ameldingWageCode,omitempty"`

	// changes
	// Read Only: true
	Changes []*Change `json:"changes"`

	// from date
	// Required: true
	FromDate *string `json:"fromDate"`

	// id
	ID int32 `json:"id,omitempty"`

	// is requires overnight accommodation
	IsRequiresOvernightAccommodation *bool `json:"isRequiresOvernightAccommodation,omitempty"`

	// is requires zone
	IsRequiresZone *bool `json:"isRequiresZone,omitempty"`

	// is valid accommodation
	IsValidAccommodation *bool `json:"isValidAccommodation,omitempty"`

	// is valid day trip
	IsValidDayTrip *bool `json:"isValidDayTrip,omitempty"`

	// is valid domestic
	IsValidDomestic *bool `json:"isValidDomestic,omitempty"`

	// is valid foreign travel
	IsValidForeignTravel *bool `json:"isValidForeignTravel,omitempty"`

	// name
	// Read Only: true
	Name string `json:"name,omitempty"`

	// to date
	// Required: true
	ToDate *string `json:"toDate"`

	// type
	// Enum: [PER_DIEM ACCOMMODATION_ALLOWANCE MILEAGE_ALLOWANCE]
	Type string `json:"type,omitempty"`

	// url
	// Read Only: true
	URL string `json:"url,omitempty"`

	// version
	Version int32 `json:"version,omitempty"`

	// wage code number
	// Max Length: 10
	WageCodeNumber string `json:"wageCodeNumber,omitempty"`
}

// Validate validates this travel expense rate category
func (m *TravelExpenseRateCategory) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFromDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWageCodeNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TravelExpenseRateCategory) validateChanges(formats strfmt.Registry) error {

	if swag.IsZero(m.Changes) { // not required
		return nil
	}

	for i := 0; i < len(m.Changes); i++ {
		if swag.IsZero(m.Changes[i]) { // not required
			continue
		}

		if m.Changes[i] != nil {
			if err := m.Changes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("changes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TravelExpenseRateCategory) validateFromDate(formats strfmt.Registry) error {

	if err := validate.Required("fromDate", "body", m.FromDate); err != nil {
		return err
	}

	return nil
}

func (m *TravelExpenseRateCategory) validateToDate(formats strfmt.Registry) error {

	if err := validate.Required("toDate", "body", m.ToDate); err != nil {
		return err
	}

	return nil
}

var travelExpenseRateCategoryTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PER_DIEM","ACCOMMODATION_ALLOWANCE","MILEAGE_ALLOWANCE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		travelExpenseRateCategoryTypeTypePropEnum = append(travelExpenseRateCategoryTypeTypePropEnum, v)
	}
}

const (

	// TravelExpenseRateCategoryTypePERDIEM captures enum value "PER_DIEM"
	TravelExpenseRateCategoryTypePERDIEM string = "PER_DIEM"

	// TravelExpenseRateCategoryTypeACCOMMODATIONALLOWANCE captures enum value "ACCOMMODATION_ALLOWANCE"
	TravelExpenseRateCategoryTypeACCOMMODATIONALLOWANCE string = "ACCOMMODATION_ALLOWANCE"

	// TravelExpenseRateCategoryTypeMILEAGEALLOWANCE captures enum value "MILEAGE_ALLOWANCE"
	TravelExpenseRateCategoryTypeMILEAGEALLOWANCE string = "MILEAGE_ALLOWANCE"
)

// prop value enum
func (m *TravelExpenseRateCategory) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, travelExpenseRateCategoryTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TravelExpenseRateCategory) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *TravelExpenseRateCategory) validateWageCodeNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.WageCodeNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("wageCodeNumber", "body", string(m.WageCodeNumber), 10); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TravelExpenseRateCategory) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TravelExpenseRateCategory) UnmarshalBinary(b []byte) error {
	var res TravelExpenseRateCategory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
