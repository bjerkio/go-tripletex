// Copyright 2020 Bjerk AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TriggerDTO trigger d t o
//
// swagger:model TriggerDTO
type TriggerDTO struct {

	// calendar name
	CalendarName string `json:"calendarName,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// next fire time
	// Format: date-time
	NextFireTime strfmt.DateTime `json:"nextFireTime,omitempty"`

	// previous fire time
	// Format: date-time
	PreviousFireTime strfmt.DateTime `json:"previousFireTime,omitempty"`

	// state
	State string `json:"state,omitempty"`
}

// Validate validates this trigger d t o
func (m *TriggerDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNextFireTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviousFireTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TriggerDTO) validateNextFireTime(formats strfmt.Registry) error {

	if swag.IsZero(m.NextFireTime) { // not required
		return nil
	}

	if err := validate.FormatOf("nextFireTime", "body", "date-time", m.NextFireTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TriggerDTO) validatePreviousFireTime(formats strfmt.Registry) error {

	if swag.IsZero(m.PreviousFireTime) { // not required
		return nil
	}

	if err := validate.FormatOf("previousFireTime", "body", "date-time", m.PreviousFireTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TriggerDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TriggerDTO) UnmarshalBinary(b []byte) error {
	var res TriggerDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
