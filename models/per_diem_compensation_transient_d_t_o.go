// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PerDiemCompensationTransientDTO per diem compensation transient d t o
//
// swagger:model PerDiemCompensationTransientDTO
type PerDiemCompensationTransientDTO struct {

	// address
	Address string `json:"address,omitempty"`

	// amount
	Amount float64 `json:"amount,omitempty"`

	// count
	Count int32 `json:"count,omitempty"`

	// country code
	CountryCode string `json:"countryCode,omitempty"`

	// is deduction for breakfast
	IsDeductionForBreakfast *bool `json:"isDeductionForBreakfast,omitempty"`

	// is deduction for dinner
	IsDeductionForDinner *bool `json:"isDeductionForDinner,omitempty"`

	// is deduction for lunch
	IsDeductionForLunch *bool `json:"isDeductionForLunch,omitempty"`

	// location
	Location string `json:"location,omitempty"`

	// overnight accommodation
	// Enum: [NONE HOTEL BOARDING_HOUSE_WITHOUT_COOKING BOARDING_HOUSE_WITH_COOKING]
	OvernightAccommodation string `json:"overnightAccommodation,omitempty"`

	// rate
	Rate float64 `json:"rate,omitempty"`

	// rate category
	RateCategory *TravelExpenseRateCategory `json:"rateCategory,omitempty"`

	// rate type
	RateType *TravelExpenseRate `json:"rateType,omitempty"`

	// travel expense
	TravelExpense *TravelExpense `json:"travelExpense,omitempty"`

	// travel expense zone Id
	TravelExpenseZoneID int32 `json:"travelExpenseZoneId,omitempty"`
}

// Validate validates this per diem compensation transient d t o
func (m *PerDiemCompensationTransientDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOvernightAccommodation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTravelExpense(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var perDiemCompensationTransientDTOTypeOvernightAccommodationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NONE","HOTEL","BOARDING_HOUSE_WITHOUT_COOKING","BOARDING_HOUSE_WITH_COOKING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		perDiemCompensationTransientDTOTypeOvernightAccommodationPropEnum = append(perDiemCompensationTransientDTOTypeOvernightAccommodationPropEnum, v)
	}
}

const (

	// PerDiemCompensationTransientDTOOvernightAccommodationNONE captures enum value "NONE"
	PerDiemCompensationTransientDTOOvernightAccommodationNONE string = "NONE"

	// PerDiemCompensationTransientDTOOvernightAccommodationHOTEL captures enum value "HOTEL"
	PerDiemCompensationTransientDTOOvernightAccommodationHOTEL string = "HOTEL"

	// PerDiemCompensationTransientDTOOvernightAccommodationBOARDINGHOUSEWITHOUTCOOKING captures enum value "BOARDING_HOUSE_WITHOUT_COOKING"
	PerDiemCompensationTransientDTOOvernightAccommodationBOARDINGHOUSEWITHOUTCOOKING string = "BOARDING_HOUSE_WITHOUT_COOKING"

	// PerDiemCompensationTransientDTOOvernightAccommodationBOARDINGHOUSEWITHCOOKING captures enum value "BOARDING_HOUSE_WITH_COOKING"
	PerDiemCompensationTransientDTOOvernightAccommodationBOARDINGHOUSEWITHCOOKING string = "BOARDING_HOUSE_WITH_COOKING"
)

// prop value enum
func (m *PerDiemCompensationTransientDTO) validateOvernightAccommodationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, perDiemCompensationTransientDTOTypeOvernightAccommodationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PerDiemCompensationTransientDTO) validateOvernightAccommodation(formats strfmt.Registry) error {

	if swag.IsZero(m.OvernightAccommodation) { // not required
		return nil
	}

	// value enum
	if err := m.validateOvernightAccommodationEnum("overnightAccommodation", "body", m.OvernightAccommodation); err != nil {
		return err
	}

	return nil
}

func (m *PerDiemCompensationTransientDTO) validateRateCategory(formats strfmt.Registry) error {

	if swag.IsZero(m.RateCategory) { // not required
		return nil
	}

	if m.RateCategory != nil {
		if err := m.RateCategory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rateCategory")
			}
			return err
		}
	}

	return nil
}

func (m *PerDiemCompensationTransientDTO) validateRateType(formats strfmt.Registry) error {

	if swag.IsZero(m.RateType) { // not required
		return nil
	}

	if m.RateType != nil {
		if err := m.RateType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rateType")
			}
			return err
		}
	}

	return nil
}

func (m *PerDiemCompensationTransientDTO) validateTravelExpense(formats strfmt.Registry) error {

	if swag.IsZero(m.TravelExpense) { // not required
		return nil
	}

	if m.TravelExpense != nil {
		if err := m.TravelExpense.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("travelExpense")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PerDiemCompensationTransientDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerDiemCompensationTransientDTO) UnmarshalBinary(b []byte) error {
	var res PerDiemCompensationTransientDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
