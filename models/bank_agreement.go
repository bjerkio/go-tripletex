// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BankAgreement bank agreement
//
// swagger:model BankAgreement
type BankAgreement struct {

	// The account for bank agreement.
	Account *Account `json:"account,omitempty"`

	// account in bank Id
	// Max Length: 50
	AccountInBankID string `json:"accountInBankId,omitempty"`

	// bank
	Bank *Bank `json:"bank,omitempty"`

	// The BBAN property.
	// Max Length: 50
	Bban string `json:"bban,omitempty"`

	// ccm agreement Id
	// Max Length: 50
	CcmAgreementID string `json:"ccmAgreementId,omitempty"`

	// changes
	// Read Only: true
	Changes []*Change `json:"changes"`

	// country
	// Read Only: true
	Country *Country `json:"country,omitempty"`

	// currency
	// Read Only: true
	Currency *Currency `json:"currency,omitempty"`

	// date created
	DateCreated string `json:"dateCreated,omitempty"`

	// The description property.
	// Read Only: true
	// Max Length: 250
	Description string `json:"description,omitempty"`

	// division
	// Max Length: 50
	Division string `json:"division,omitempty"`

	// The IBAN property.
	// Max Length: 50
	Iban string `json:"iban,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// is active
	// Read Only: true
	IsActive *bool `json:"isActive,omitempty"`

	// organisation number
	// Max Length: 50
	OrganisationNumber string `json:"organisationNumber,omitempty"`

	// The showAdviceCurrencyMismatch property.
	ShowAdviceCurrencyMismatch *bool `json:"showAdviceCurrencyMismatch,omitempty"`

	// uploader employee
	// Read Only: true
	UploaderEmployee *Employee `json:"uploaderEmployee,omitempty"`

	// url
	// Read Only: true
	URL string `json:"url,omitempty"`

	// version
	Version int32 `json:"version,omitempty"`
}

// Validate validates this bank agreement
func (m *BankAgreement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountInBankID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBank(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBban(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCcmAgreementID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDivision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIban(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganisationNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUploaderEmployee(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BankAgreement) validateAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.Account) { // not required
		return nil
	}

	if m.Account != nil {
		if err := m.Account.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("account")
			}
			return err
		}
	}

	return nil
}

func (m *BankAgreement) validateAccountInBankID(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountInBankID) { // not required
		return nil
	}

	if err := validate.MaxLength("accountInBankId", "body", string(m.AccountInBankID), 50); err != nil {
		return err
	}

	return nil
}

func (m *BankAgreement) validateBank(formats strfmt.Registry) error {

	if swag.IsZero(m.Bank) { // not required
		return nil
	}

	if m.Bank != nil {
		if err := m.Bank.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bank")
			}
			return err
		}
	}

	return nil
}

func (m *BankAgreement) validateBban(formats strfmt.Registry) error {

	if swag.IsZero(m.Bban) { // not required
		return nil
	}

	if err := validate.MaxLength("bban", "body", string(m.Bban), 50); err != nil {
		return err
	}

	return nil
}

func (m *BankAgreement) validateCcmAgreementID(formats strfmt.Registry) error {

	if swag.IsZero(m.CcmAgreementID) { // not required
		return nil
	}

	if err := validate.MaxLength("ccmAgreementId", "body", string(m.CcmAgreementID), 50); err != nil {
		return err
	}

	return nil
}

func (m *BankAgreement) validateChanges(formats strfmt.Registry) error {

	if swag.IsZero(m.Changes) { // not required
		return nil
	}

	for i := 0; i < len(m.Changes); i++ {
		if swag.IsZero(m.Changes[i]) { // not required
			continue
		}

		if m.Changes[i] != nil {
			if err := m.Changes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("changes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BankAgreement) validateCountry(formats strfmt.Registry) error {

	if swag.IsZero(m.Country) { // not required
		return nil
	}

	if m.Country != nil {
		if err := m.Country.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("country")
			}
			return err
		}
	}

	return nil
}

func (m *BankAgreement) validateCurrency(formats strfmt.Registry) error {

	if swag.IsZero(m.Currency) { // not required
		return nil
	}

	if m.Currency != nil {
		if err := m.Currency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currency")
			}
			return err
		}
	}

	return nil
}

func (m *BankAgreement) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", string(m.Description), 250); err != nil {
		return err
	}

	return nil
}

func (m *BankAgreement) validateDivision(formats strfmt.Registry) error {

	if swag.IsZero(m.Division) { // not required
		return nil
	}

	if err := validate.MaxLength("division", "body", string(m.Division), 50); err != nil {
		return err
	}

	return nil
}

func (m *BankAgreement) validateIban(formats strfmt.Registry) error {

	if swag.IsZero(m.Iban) { // not required
		return nil
	}

	if err := validate.MaxLength("iban", "body", string(m.Iban), 50); err != nil {
		return err
	}

	return nil
}

func (m *BankAgreement) validateOrganisationNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.OrganisationNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("organisationNumber", "body", string(m.OrganisationNumber), 50); err != nil {
		return err
	}

	return nil
}

func (m *BankAgreement) validateUploaderEmployee(formats strfmt.Registry) error {

	if swag.IsZero(m.UploaderEmployee) { // not required
		return nil
	}

	if m.UploaderEmployee != nil {
		if err := m.UploaderEmployee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("uploaderEmployee")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BankAgreement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BankAgreement) UnmarshalBinary(b []byte) error {
	var res BankAgreement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
