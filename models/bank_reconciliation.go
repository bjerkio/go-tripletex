// Copyright 2020 Bjerk AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BankReconciliation bank reconciliation
//
// swagger:model BankReconciliation
type BankReconciliation struct {

	// account
	// Required: true
	Account *Account `json:"account"`

	// accounting period
	// Required: true
	AccountingPeriod *AccountingPeriod `json:"accountingPeriod"`

	// approvable
	// Read Only: true
	Approvable *bool `json:"approvable,omitempty"`

	// bank account closing balance currency
	BankAccountClosingBalanceCurrency float64 `json:"bankAccountClosingBalanceCurrency,omitempty"`

	// changes
	// Read Only: true
	Changes []*Change `json:"changes"`

	// closed by contact
	// Read Only: true
	ClosedByContact *Contact `json:"closedByContact,omitempty"`

	// closed by employee
	// Read Only: true
	ClosedByEmployee *Employee `json:"closedByEmployee,omitempty"`

	// closed date
	// Read Only: true
	ClosedDate string `json:"closedDate,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// is closed
	IsClosed *bool `json:"isClosed,omitempty"`

	// Bank transactions tied to the bank reconciliation
	// Read Only: true
	Transactions []*BankTransaction `json:"transactions"`

	// Type of Bank Reconciliation.
	// Required: true
	// Enum: [MANUAL AUTOMATIC]
	Type *string `json:"type"`

	// url
	// Read Only: true
	URL string `json:"url,omitempty"`

	// version
	Version int32 `json:"version,omitempty"`

	// voucher
	// Read Only: true
	Voucher *Voucher `json:"voucher,omitempty"`
}

// Validate validates this bank reconciliation
func (m *BankReconciliation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountingPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClosedByContact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClosedByEmployee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVoucher(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BankReconciliation) validateAccount(formats strfmt.Registry) error {

	if err := validate.Required("account", "body", m.Account); err != nil {
		return err
	}

	if m.Account != nil {
		if err := m.Account.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("account")
			}
			return err
		}
	}

	return nil
}

func (m *BankReconciliation) validateAccountingPeriod(formats strfmt.Registry) error {

	if err := validate.Required("accountingPeriod", "body", m.AccountingPeriod); err != nil {
		return err
	}

	if m.AccountingPeriod != nil {
		if err := m.AccountingPeriod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accountingPeriod")
			}
			return err
		}
	}

	return nil
}

func (m *BankReconciliation) validateChanges(formats strfmt.Registry) error {

	if swag.IsZero(m.Changes) { // not required
		return nil
	}

	for i := 0; i < len(m.Changes); i++ {
		if swag.IsZero(m.Changes[i]) { // not required
			continue
		}

		if m.Changes[i] != nil {
			if err := m.Changes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("changes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BankReconciliation) validateClosedByContact(formats strfmt.Registry) error {

	if swag.IsZero(m.ClosedByContact) { // not required
		return nil
	}

	if m.ClosedByContact != nil {
		if err := m.ClosedByContact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("closedByContact")
			}
			return err
		}
	}

	return nil
}

func (m *BankReconciliation) validateClosedByEmployee(formats strfmt.Registry) error {

	if swag.IsZero(m.ClosedByEmployee) { // not required
		return nil
	}

	if m.ClosedByEmployee != nil {
		if err := m.ClosedByEmployee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("closedByEmployee")
			}
			return err
		}
	}

	return nil
}

func (m *BankReconciliation) validateTransactions(formats strfmt.Registry) error {

	if swag.IsZero(m.Transactions) { // not required
		return nil
	}

	for i := 0; i < len(m.Transactions); i++ {
		if swag.IsZero(m.Transactions[i]) { // not required
			continue
		}

		if m.Transactions[i] != nil {
			if err := m.Transactions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transactions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var bankReconciliationTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MANUAL","AUTOMATIC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bankReconciliationTypeTypePropEnum = append(bankReconciliationTypeTypePropEnum, v)
	}
}

const (

	// BankReconciliationTypeMANUAL captures enum value "MANUAL"
	BankReconciliationTypeMANUAL string = "MANUAL"

	// BankReconciliationTypeAUTOMATIC captures enum value "AUTOMATIC"
	BankReconciliationTypeAUTOMATIC string = "AUTOMATIC"
)

// prop value enum
func (m *BankReconciliation) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, bankReconciliationTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BankReconciliation) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *BankReconciliation) validateVoucher(formats strfmt.Registry) error {

	if swag.IsZero(m.Voucher) { // not required
		return nil
	}

	if m.Voucher != nil {
		if err := m.Voucher.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("voucher")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BankReconciliation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BankReconciliation) UnmarshalBinary(b []byte) error {
	var res BankReconciliation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
