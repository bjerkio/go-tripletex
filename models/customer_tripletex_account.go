// Copyright 2020 Bjerk AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomerTripletexAccount customer tripletex account
//
// swagger:model CustomerTripletexAccount
type CustomerTripletexAccount struct {

	// account type
	// Required: true
	// Enum: [TEST PAYING]
	AccountType *string `json:"accountType"`

	// Administrator user to create in the new company. Leave empty if calling this enpoint as an auditor og accountant company
	Administrator *Employee `json:"administrator,omitempty"`

	// The password of the administrator user.
	AdministratorPassword string `json:"administratorPassword,omitempty"`

	// Should the user be automatically validated?
	AutoValidateUserLogin *bool `json:"autoValidateUserLogin,omitempty"`

	// The chart of accounts to use for the new company
	// Enum: [DEFAULT MAMUT_STD_PAYROLL MAMUT_NARF_PAYROLL AGRO_FORRETNING_PAYROLL AGRO_LANDBRUK_PAYROLL AGRO_FISKE_PAYROLL AGRO_FORSOKSRING_PAYROLL AGRO_IDRETTSLAG_PAYROLL AGRO_FORENING_PAYROLL]
	ChartOfAccountsType string `json:"chartOfAccountsType,omitempty"`

	// Creates a token for the admin user. The accounting office could also use their tokens so you might not need this.
	CreateAPIToken *bool `json:"createApiToken,omitempty"`

	// The customer id to an already created customer to create a Tripletex account for.
	// Minimum: 1
	CustomerID int32 `json:"customerId,omitempty"`

	// The address to send the invoice to at the customer.
	CustomerInvoiceEmail string `json:"customerInvoiceEmail,omitempty"`

	// modules
	// Required: true
	Modules *Modules `json:"modules"`

	// The number of employees in the customer company. Is used for calculating prices and setting some default settings, i.e. approval settings for timesheet.
	NumberOfEmployees int32 `json:"numberOfEmployees,omitempty"`

	// Number of vouchers each year. Used to calculate prices.
	// Required: true
	// Enum: [INTERVAL_0_100 INTERVAL_101_500 INTERVAL_0_500 INTERVAL_501_1000 INTERVAL_1001_2000 INTERVAL_2001_3500 INTERVAL_3501_5000 INTERVAL_5001_10000 INTERVAL_UNLIMITED]
	NumberOfVouchers *string `json:"numberOfVouchers"`

	// Should the emails normally sent during creation be sent in this case?
	SendEmails *bool `json:"sendEmails,omitempty"`

	// Should the invoices for this account be sent to the customer?
	SendInvoiceToCustomer *bool `json:"sendInvoiceToCustomer,omitempty"`

	// type
	// Required: true
	// Enum: [NONE ENK AS NUF ANS DA PRE KS ASA BBL BRL GFS SPA SF IKS KF_FKF FCD EOFG BA STI ORG ESEK SA SAM BO VPFO OS Other]
	Type *string `json:"type"`
}

// Validate validates this customer tripletex account
func (m *CustomerTripletexAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdministrator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChartOfAccountsType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumberOfVouchers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var customerTripletexAccountTypeAccountTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["TEST","PAYING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customerTripletexAccountTypeAccountTypePropEnum = append(customerTripletexAccountTypeAccountTypePropEnum, v)
	}
}

const (

	// CustomerTripletexAccountAccountTypeTEST captures enum value "TEST"
	CustomerTripletexAccountAccountTypeTEST string = "TEST"

	// CustomerTripletexAccountAccountTypePAYING captures enum value "PAYING"
	CustomerTripletexAccountAccountTypePAYING string = "PAYING"
)

// prop value enum
func (m *CustomerTripletexAccount) validateAccountTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, customerTripletexAccountTypeAccountTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CustomerTripletexAccount) validateAccountType(formats strfmt.Registry) error {

	if err := validate.Required("accountType", "body", m.AccountType); err != nil {
		return err
	}

	// value enum
	if err := m.validateAccountTypeEnum("accountType", "body", *m.AccountType); err != nil {
		return err
	}

	return nil
}

func (m *CustomerTripletexAccount) validateAdministrator(formats strfmt.Registry) error {

	if swag.IsZero(m.Administrator) { // not required
		return nil
	}

	if m.Administrator != nil {
		if err := m.Administrator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("administrator")
			}
			return err
		}
	}

	return nil
}

var customerTripletexAccountTypeChartOfAccountsTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DEFAULT","MAMUT_STD_PAYROLL","MAMUT_NARF_PAYROLL","AGRO_FORRETNING_PAYROLL","AGRO_LANDBRUK_PAYROLL","AGRO_FISKE_PAYROLL","AGRO_FORSOKSRING_PAYROLL","AGRO_IDRETTSLAG_PAYROLL","AGRO_FORENING_PAYROLL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customerTripletexAccountTypeChartOfAccountsTypePropEnum = append(customerTripletexAccountTypeChartOfAccountsTypePropEnum, v)
	}
}

const (

	// CustomerTripletexAccountChartOfAccountsTypeDEFAULT captures enum value "DEFAULT"
	CustomerTripletexAccountChartOfAccountsTypeDEFAULT string = "DEFAULT"

	// CustomerTripletexAccountChartOfAccountsTypeMAMUTSTDPAYROLL captures enum value "MAMUT_STD_PAYROLL"
	CustomerTripletexAccountChartOfAccountsTypeMAMUTSTDPAYROLL string = "MAMUT_STD_PAYROLL"

	// CustomerTripletexAccountChartOfAccountsTypeMAMUTNARFPAYROLL captures enum value "MAMUT_NARF_PAYROLL"
	CustomerTripletexAccountChartOfAccountsTypeMAMUTNARFPAYROLL string = "MAMUT_NARF_PAYROLL"

	// CustomerTripletexAccountChartOfAccountsTypeAGROFORRETNINGPAYROLL captures enum value "AGRO_FORRETNING_PAYROLL"
	CustomerTripletexAccountChartOfAccountsTypeAGROFORRETNINGPAYROLL string = "AGRO_FORRETNING_PAYROLL"

	// CustomerTripletexAccountChartOfAccountsTypeAGROLANDBRUKPAYROLL captures enum value "AGRO_LANDBRUK_PAYROLL"
	CustomerTripletexAccountChartOfAccountsTypeAGROLANDBRUKPAYROLL string = "AGRO_LANDBRUK_PAYROLL"

	// CustomerTripletexAccountChartOfAccountsTypeAGROFISKEPAYROLL captures enum value "AGRO_FISKE_PAYROLL"
	CustomerTripletexAccountChartOfAccountsTypeAGROFISKEPAYROLL string = "AGRO_FISKE_PAYROLL"

	// CustomerTripletexAccountChartOfAccountsTypeAGROFORSOKSRINGPAYROLL captures enum value "AGRO_FORSOKSRING_PAYROLL"
	CustomerTripletexAccountChartOfAccountsTypeAGROFORSOKSRINGPAYROLL string = "AGRO_FORSOKSRING_PAYROLL"

	// CustomerTripletexAccountChartOfAccountsTypeAGROIDRETTSLAGPAYROLL captures enum value "AGRO_IDRETTSLAG_PAYROLL"
	CustomerTripletexAccountChartOfAccountsTypeAGROIDRETTSLAGPAYROLL string = "AGRO_IDRETTSLAG_PAYROLL"

	// CustomerTripletexAccountChartOfAccountsTypeAGROFORENINGPAYROLL captures enum value "AGRO_FORENING_PAYROLL"
	CustomerTripletexAccountChartOfAccountsTypeAGROFORENINGPAYROLL string = "AGRO_FORENING_PAYROLL"
)

// prop value enum
func (m *CustomerTripletexAccount) validateChartOfAccountsTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, customerTripletexAccountTypeChartOfAccountsTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CustomerTripletexAccount) validateChartOfAccountsType(formats strfmt.Registry) error {

	if swag.IsZero(m.ChartOfAccountsType) { // not required
		return nil
	}

	// value enum
	if err := m.validateChartOfAccountsTypeEnum("chartOfAccountsType", "body", m.ChartOfAccountsType); err != nil {
		return err
	}

	return nil
}

func (m *CustomerTripletexAccount) validateCustomerID(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomerID) { // not required
		return nil
	}

	if err := validate.MinimumInt("customerId", "body", int64(m.CustomerID), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *CustomerTripletexAccount) validateModules(formats strfmt.Registry) error {

	if err := validate.Required("modules", "body", m.Modules); err != nil {
		return err
	}

	if m.Modules != nil {
		if err := m.Modules.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("modules")
			}
			return err
		}
	}

	return nil
}

var customerTripletexAccountTypeNumberOfVouchersPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INTERVAL_0_100","INTERVAL_101_500","INTERVAL_0_500","INTERVAL_501_1000","INTERVAL_1001_2000","INTERVAL_2001_3500","INTERVAL_3501_5000","INTERVAL_5001_10000","INTERVAL_UNLIMITED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customerTripletexAccountTypeNumberOfVouchersPropEnum = append(customerTripletexAccountTypeNumberOfVouchersPropEnum, v)
	}
}

const (

	// CustomerTripletexAccountNumberOfVouchersINTERVAL0100 captures enum value "INTERVAL_0_100"
	CustomerTripletexAccountNumberOfVouchersINTERVAL0100 string = "INTERVAL_0_100"

	// CustomerTripletexAccountNumberOfVouchersINTERVAL101500 captures enum value "INTERVAL_101_500"
	CustomerTripletexAccountNumberOfVouchersINTERVAL101500 string = "INTERVAL_101_500"

	// CustomerTripletexAccountNumberOfVouchersINTERVAL0500 captures enum value "INTERVAL_0_500"
	CustomerTripletexAccountNumberOfVouchersINTERVAL0500 string = "INTERVAL_0_500"

	// CustomerTripletexAccountNumberOfVouchersINTERVAL5011000 captures enum value "INTERVAL_501_1000"
	CustomerTripletexAccountNumberOfVouchersINTERVAL5011000 string = "INTERVAL_501_1000"

	// CustomerTripletexAccountNumberOfVouchersINTERVAL10012000 captures enum value "INTERVAL_1001_2000"
	CustomerTripletexAccountNumberOfVouchersINTERVAL10012000 string = "INTERVAL_1001_2000"

	// CustomerTripletexAccountNumberOfVouchersINTERVAL20013500 captures enum value "INTERVAL_2001_3500"
	CustomerTripletexAccountNumberOfVouchersINTERVAL20013500 string = "INTERVAL_2001_3500"

	// CustomerTripletexAccountNumberOfVouchersINTERVAL35015000 captures enum value "INTERVAL_3501_5000"
	CustomerTripletexAccountNumberOfVouchersINTERVAL35015000 string = "INTERVAL_3501_5000"

	// CustomerTripletexAccountNumberOfVouchersINTERVAL500110000 captures enum value "INTERVAL_5001_10000"
	CustomerTripletexAccountNumberOfVouchersINTERVAL500110000 string = "INTERVAL_5001_10000"

	// CustomerTripletexAccountNumberOfVouchersINTERVALUNLIMITED captures enum value "INTERVAL_UNLIMITED"
	CustomerTripletexAccountNumberOfVouchersINTERVALUNLIMITED string = "INTERVAL_UNLIMITED"
)

// prop value enum
func (m *CustomerTripletexAccount) validateNumberOfVouchersEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, customerTripletexAccountTypeNumberOfVouchersPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CustomerTripletexAccount) validateNumberOfVouchers(formats strfmt.Registry) error {

	if err := validate.Required("numberOfVouchers", "body", m.NumberOfVouchers); err != nil {
		return err
	}

	// value enum
	if err := m.validateNumberOfVouchersEnum("numberOfVouchers", "body", *m.NumberOfVouchers); err != nil {
		return err
	}

	return nil
}

var customerTripletexAccountTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NONE","ENK","AS","NUF","ANS","DA","PRE","KS","ASA","BBL","BRL","GFS","SPA","SF","IKS","KF_FKF","FCD","EOFG","BA","STI","ORG","ESEK","SA","SAM","BO","VPFO","OS","Other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customerTripletexAccountTypeTypePropEnum = append(customerTripletexAccountTypeTypePropEnum, v)
	}
}

const (

	// CustomerTripletexAccountTypeNONE captures enum value "NONE"
	CustomerTripletexAccountTypeNONE string = "NONE"

	// CustomerTripletexAccountTypeENK captures enum value "ENK"
	CustomerTripletexAccountTypeENK string = "ENK"

	// CustomerTripletexAccountTypeAS captures enum value "AS"
	CustomerTripletexAccountTypeAS string = "AS"

	// CustomerTripletexAccountTypeNUF captures enum value "NUF"
	CustomerTripletexAccountTypeNUF string = "NUF"

	// CustomerTripletexAccountTypeANS captures enum value "ANS"
	CustomerTripletexAccountTypeANS string = "ANS"

	// CustomerTripletexAccountTypeDA captures enum value "DA"
	CustomerTripletexAccountTypeDA string = "DA"

	// CustomerTripletexAccountTypePRE captures enum value "PRE"
	CustomerTripletexAccountTypePRE string = "PRE"

	// CustomerTripletexAccountTypeKS captures enum value "KS"
	CustomerTripletexAccountTypeKS string = "KS"

	// CustomerTripletexAccountTypeASA captures enum value "ASA"
	CustomerTripletexAccountTypeASA string = "ASA"

	// CustomerTripletexAccountTypeBBL captures enum value "BBL"
	CustomerTripletexAccountTypeBBL string = "BBL"

	// CustomerTripletexAccountTypeBRL captures enum value "BRL"
	CustomerTripletexAccountTypeBRL string = "BRL"

	// CustomerTripletexAccountTypeGFS captures enum value "GFS"
	CustomerTripletexAccountTypeGFS string = "GFS"

	// CustomerTripletexAccountTypeSPA captures enum value "SPA"
	CustomerTripletexAccountTypeSPA string = "SPA"

	// CustomerTripletexAccountTypeSF captures enum value "SF"
	CustomerTripletexAccountTypeSF string = "SF"

	// CustomerTripletexAccountTypeIKS captures enum value "IKS"
	CustomerTripletexAccountTypeIKS string = "IKS"

	// CustomerTripletexAccountTypeKFFKF captures enum value "KF_FKF"
	CustomerTripletexAccountTypeKFFKF string = "KF_FKF"

	// CustomerTripletexAccountTypeFCD captures enum value "FCD"
	CustomerTripletexAccountTypeFCD string = "FCD"

	// CustomerTripletexAccountTypeEOFG captures enum value "EOFG"
	CustomerTripletexAccountTypeEOFG string = "EOFG"

	// CustomerTripletexAccountTypeBA captures enum value "BA"
	CustomerTripletexAccountTypeBA string = "BA"

	// CustomerTripletexAccountTypeSTI captures enum value "STI"
	CustomerTripletexAccountTypeSTI string = "STI"

	// CustomerTripletexAccountTypeORG captures enum value "ORG"
	CustomerTripletexAccountTypeORG string = "ORG"

	// CustomerTripletexAccountTypeESEK captures enum value "ESEK"
	CustomerTripletexAccountTypeESEK string = "ESEK"

	// CustomerTripletexAccountTypeSA captures enum value "SA"
	CustomerTripletexAccountTypeSA string = "SA"

	// CustomerTripletexAccountTypeSAM captures enum value "SAM"
	CustomerTripletexAccountTypeSAM string = "SAM"

	// CustomerTripletexAccountTypeBO captures enum value "BO"
	CustomerTripletexAccountTypeBO string = "BO"

	// CustomerTripletexAccountTypeVPFO captures enum value "VPFO"
	CustomerTripletexAccountTypeVPFO string = "VPFO"

	// CustomerTripletexAccountTypeOS captures enum value "OS"
	CustomerTripletexAccountTypeOS string = "OS"

	// CustomerTripletexAccountTypeOther captures enum value "Other"
	CustomerTripletexAccountTypeOther string = "Other"
)

// prop value enum
func (m *CustomerTripletexAccount) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, customerTripletexAccountTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CustomerTripletexAccount) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerTripletexAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerTripletexAccount) UnmarshalBinary(b []byte) error {
	var res CustomerTripletexAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
