// Code generated by go-swagger; DO NOT EDIT.

package week

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewTimesheetWeekSearchParams creates a new TimesheetWeekSearchParams object
// with the default values initialized.
func NewTimesheetWeekSearchParams() *TimesheetWeekSearchParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &TimesheetWeekSearchParams{
		Count: &countDefault,
		From:  &fromDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewTimesheetWeekSearchParamsWithTimeout creates a new TimesheetWeekSearchParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTimesheetWeekSearchParamsWithTimeout(timeout time.Duration) *TimesheetWeekSearchParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &TimesheetWeekSearchParams{
		Count: &countDefault,
		From:  &fromDefault,

		timeout: timeout,
	}
}

// NewTimesheetWeekSearchParamsWithContext creates a new TimesheetWeekSearchParams object
// with the default values initialized, and the ability to set a context for a request
func NewTimesheetWeekSearchParamsWithContext(ctx context.Context) *TimesheetWeekSearchParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &TimesheetWeekSearchParams{
		Count: &countDefault,
		From:  &fromDefault,

		Context: ctx,
	}
}

// NewTimesheetWeekSearchParamsWithHTTPClient creates a new TimesheetWeekSearchParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTimesheetWeekSearchParamsWithHTTPClient(client *http.Client) *TimesheetWeekSearchParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &TimesheetWeekSearchParams{
		Count:      &countDefault,
		From:       &fromDefault,
		HTTPClient: client,
	}
}

/*TimesheetWeekSearchParams contains all the parameters to send to the API endpoint
for the timesheet week search operation typically these are written to a http.Request
*/
type TimesheetWeekSearchParams struct {

	/*ApprovedBy
	  Equals

	*/
	ApprovedBy *int32
	/*Count
	  Number of elements to return

	*/
	Count *int64
	/*EmployeeIds
	  List of IDs

	*/
	EmployeeIds *string
	/*Fields
	  Fields filter pattern

	*/
	Fields *string
	/*From
	  From index

	*/
	From *int64
	/*Ids
	  List of IDs

	*/
	Ids *string
	/*Sorting
	  Sorting pattern

	*/
	Sorting *string
	/*WeekYear
	  ISO-8601 week-year

	*/
	WeekYear *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the timesheet week search params
func (o *TimesheetWeekSearchParams) WithTimeout(timeout time.Duration) *TimesheetWeekSearchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the timesheet week search params
func (o *TimesheetWeekSearchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the timesheet week search params
func (o *TimesheetWeekSearchParams) WithContext(ctx context.Context) *TimesheetWeekSearchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the timesheet week search params
func (o *TimesheetWeekSearchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the timesheet week search params
func (o *TimesheetWeekSearchParams) WithHTTPClient(client *http.Client) *TimesheetWeekSearchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the timesheet week search params
func (o *TimesheetWeekSearchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApprovedBy adds the approvedBy to the timesheet week search params
func (o *TimesheetWeekSearchParams) WithApprovedBy(approvedBy *int32) *TimesheetWeekSearchParams {
	o.SetApprovedBy(approvedBy)
	return o
}

// SetApprovedBy adds the approvedBy to the timesheet week search params
func (o *TimesheetWeekSearchParams) SetApprovedBy(approvedBy *int32) {
	o.ApprovedBy = approvedBy
}

// WithCount adds the count to the timesheet week search params
func (o *TimesheetWeekSearchParams) WithCount(count *int64) *TimesheetWeekSearchParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the timesheet week search params
func (o *TimesheetWeekSearchParams) SetCount(count *int64) {
	o.Count = count
}

// WithEmployeeIds adds the employeeIds to the timesheet week search params
func (o *TimesheetWeekSearchParams) WithEmployeeIds(employeeIds *string) *TimesheetWeekSearchParams {
	o.SetEmployeeIds(employeeIds)
	return o
}

// SetEmployeeIds adds the employeeIds to the timesheet week search params
func (o *TimesheetWeekSearchParams) SetEmployeeIds(employeeIds *string) {
	o.EmployeeIds = employeeIds
}

// WithFields adds the fields to the timesheet week search params
func (o *TimesheetWeekSearchParams) WithFields(fields *string) *TimesheetWeekSearchParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the timesheet week search params
func (o *TimesheetWeekSearchParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithFrom adds the from to the timesheet week search params
func (o *TimesheetWeekSearchParams) WithFrom(from *int64) *TimesheetWeekSearchParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the timesheet week search params
func (o *TimesheetWeekSearchParams) SetFrom(from *int64) {
	o.From = from
}

// WithIds adds the ids to the timesheet week search params
func (o *TimesheetWeekSearchParams) WithIds(ids *string) *TimesheetWeekSearchParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the timesheet week search params
func (o *TimesheetWeekSearchParams) SetIds(ids *string) {
	o.Ids = ids
}

// WithSorting adds the sorting to the timesheet week search params
func (o *TimesheetWeekSearchParams) WithSorting(sorting *string) *TimesheetWeekSearchParams {
	o.SetSorting(sorting)
	return o
}

// SetSorting adds the sorting to the timesheet week search params
func (o *TimesheetWeekSearchParams) SetSorting(sorting *string) {
	o.Sorting = sorting
}

// WithWeekYear adds the weekYear to the timesheet week search params
func (o *TimesheetWeekSearchParams) WithWeekYear(weekYear *string) *TimesheetWeekSearchParams {
	o.SetWeekYear(weekYear)
	return o
}

// SetWeekYear adds the weekYear to the timesheet week search params
func (o *TimesheetWeekSearchParams) SetWeekYear(weekYear *string) {
	o.WeekYear = weekYear
}

// WriteToRequest writes these params to a swagger request
func (o *TimesheetWeekSearchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ApprovedBy != nil {

		// query param approvedBy
		var qrApprovedBy int32
		if o.ApprovedBy != nil {
			qrApprovedBy = *o.ApprovedBy
		}
		qApprovedBy := swag.FormatInt32(qrApprovedBy)
		if qApprovedBy != "" {
			if err := r.SetQueryParam("approvedBy", qApprovedBy); err != nil {
				return err
			}
		}

	}

	if o.Count != nil {

		// query param count
		var qrCount int64
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt64(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	if o.EmployeeIds != nil {

		// query param employeeIds
		var qrEmployeeIds string
		if o.EmployeeIds != nil {
			qrEmployeeIds = *o.EmployeeIds
		}
		qEmployeeIds := qrEmployeeIds
		if qEmployeeIds != "" {
			if err := r.SetQueryParam("employeeIds", qEmployeeIds); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.From != nil {

		// query param from
		var qrFrom int64
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := swag.FormatInt64(qrFrom)
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	if o.Ids != nil {

		// query param ids
		var qrIds string
		if o.Ids != nil {
			qrIds = *o.Ids
		}
		qIds := qrIds
		if qIds != "" {
			if err := r.SetQueryParam("ids", qIds); err != nil {
				return err
			}
		}

	}

	if o.Sorting != nil {

		// query param sorting
		var qrSorting string
		if o.Sorting != nil {
			qrSorting = *o.Sorting
		}
		qSorting := qrSorting
		if qSorting != "" {
			if err := r.SetQueryParam("sorting", qSorting); err != nil {
				return err
			}
		}

	}

	if o.WeekYear != nil {

		// query param weekYear
		var qrWeekYear string
		if o.WeekYear != nil {
			qrWeekYear = *o.WeekYear
		}
		qWeekYear := qrWeekYear
		if qWeekYear != "" {
			if err := r.SetQueryParam("weekYear", qWeekYear); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
