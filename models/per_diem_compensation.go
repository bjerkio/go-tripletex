// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PerDiemCompensation per diem compensation
//
// swagger:model PerDiemCompensation
type PerDiemCompensation struct {

	// address
	Address string `json:"address,omitempty"`

	// amount
	Amount float64 `json:"amount,omitempty"`

	// changes
	// Read Only: true
	Changes []*Change `json:"changes"`

	// count
	Count int32 `json:"count,omitempty"`

	// country code
	CountryCode string `json:"countryCode,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// is deduction for breakfast
	IsDeductionForBreakfast *bool `json:"isDeductionForBreakfast,omitempty"`

	// is deduction for dinner
	IsDeductionForDinner *bool `json:"isDeductionForDinner,omitempty"`

	// is deduction for lunch
	IsDeductionForLunch *bool `json:"isDeductionForLunch,omitempty"`

	// location
	// Required: true
	// Max Length: 255
	Location *string `json:"location"`

	// Set what sort of accommodation was had overnight.
	// Enum: [NONE HOTEL BOARDING_HOUSE_WITHOUT_COOKING BOARDING_HOUSE_WITH_COOKING]
	OvernightAccommodation string `json:"overnightAccommodation,omitempty"`

	// rate
	Rate float64 `json:"rate,omitempty"`

	// rate category
	RateCategory *TravelExpenseRateCategory `json:"rateCategory,omitempty"`

	// rate type
	RateType *TravelExpenseRate `json:"rateType,omitempty"`

	// travel expense
	TravelExpense *TravelExpense `json:"travelExpense,omitempty"`

	// Optional travel expense zone id. If not specified, the value from field zone will be used.
	TravelExpenseZoneID int32 `json:"travelExpenseZoneId,omitempty"`

	// url
	// Read Only: true
	URL string `json:"url,omitempty"`

	// version
	Version int32 `json:"version,omitempty"`
}

// Validate validates this per diem compensation
func (m *PerDiemCompensation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOvernightAccommodation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTravelExpense(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerDiemCompensation) validateChanges(formats strfmt.Registry) error {

	if swag.IsZero(m.Changes) { // not required
		return nil
	}

	for i := 0; i < len(m.Changes); i++ {
		if swag.IsZero(m.Changes[i]) { // not required
			continue
		}

		if m.Changes[i] != nil {
			if err := m.Changes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("changes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PerDiemCompensation) validateLocation(formats strfmt.Registry) error {

	if err := validate.Required("location", "body", m.Location); err != nil {
		return err
	}

	if err := validate.MaxLength("location", "body", string(*m.Location), 255); err != nil {
		return err
	}

	return nil
}

var perDiemCompensationTypeOvernightAccommodationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NONE","HOTEL","BOARDING_HOUSE_WITHOUT_COOKING","BOARDING_HOUSE_WITH_COOKING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		perDiemCompensationTypeOvernightAccommodationPropEnum = append(perDiemCompensationTypeOvernightAccommodationPropEnum, v)
	}
}

const (

	// PerDiemCompensationOvernightAccommodationNONE captures enum value "NONE"
	PerDiemCompensationOvernightAccommodationNONE string = "NONE"

	// PerDiemCompensationOvernightAccommodationHOTEL captures enum value "HOTEL"
	PerDiemCompensationOvernightAccommodationHOTEL string = "HOTEL"

	// PerDiemCompensationOvernightAccommodationBOARDINGHOUSEWITHOUTCOOKING captures enum value "BOARDING_HOUSE_WITHOUT_COOKING"
	PerDiemCompensationOvernightAccommodationBOARDINGHOUSEWITHOUTCOOKING string = "BOARDING_HOUSE_WITHOUT_COOKING"

	// PerDiemCompensationOvernightAccommodationBOARDINGHOUSEWITHCOOKING captures enum value "BOARDING_HOUSE_WITH_COOKING"
	PerDiemCompensationOvernightAccommodationBOARDINGHOUSEWITHCOOKING string = "BOARDING_HOUSE_WITH_COOKING"
)

// prop value enum
func (m *PerDiemCompensation) validateOvernightAccommodationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, perDiemCompensationTypeOvernightAccommodationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PerDiemCompensation) validateOvernightAccommodation(formats strfmt.Registry) error {

	if swag.IsZero(m.OvernightAccommodation) { // not required
		return nil
	}

	// value enum
	if err := m.validateOvernightAccommodationEnum("overnightAccommodation", "body", m.OvernightAccommodation); err != nil {
		return err
	}

	return nil
}

func (m *PerDiemCompensation) validateRateCategory(formats strfmt.Registry) error {

	if swag.IsZero(m.RateCategory) { // not required
		return nil
	}

	if m.RateCategory != nil {
		if err := m.RateCategory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rateCategory")
			}
			return err
		}
	}

	return nil
}

func (m *PerDiemCompensation) validateRateType(formats strfmt.Registry) error {

	if swag.IsZero(m.RateType) { // not required
		return nil
	}

	if m.RateType != nil {
		if err := m.RateType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rateType")
			}
			return err
		}
	}

	return nil
}

func (m *PerDiemCompensation) validateTravelExpense(formats strfmt.Registry) error {

	if swag.IsZero(m.TravelExpense) { // not required
		return nil
	}

	if m.TravelExpense != nil {
		if err := m.TravelExpense.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("travelExpense")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PerDiemCompensation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerDiemCompensation) UnmarshalBinary(b []byte) error {
	var res PerDiemCompensation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
