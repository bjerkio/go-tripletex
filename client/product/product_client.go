// Code generated by go-swagger; DO NOT EDIT.

package product

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new product API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for product API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ProductListPostList(params *ProductListPostListParams, authInfo runtime.ClientAuthInfoWriter) (*ProductListPostListCreated, error)

	ProductListPutList(params *ProductListPutListParams, authInfo runtime.ClientAuthInfoWriter) (*ProductListPutListOK, error)

	ProductDelete(params *ProductDeleteParams, authInfo runtime.ClientAuthInfoWriter) error

	ProductGet(params *ProductGetParams, authInfo runtime.ClientAuthInfoWriter) (*ProductGetOK, error)

	ProductPost(params *ProductPostParams, authInfo runtime.ClientAuthInfoWriter) (*ProductPostCreated, error)

	ProductPut(params *ProductPutParams, authInfo runtime.ClientAuthInfoWriter) (*ProductPutOK, error)

	ProductSearch(params *ProductSearchParams, authInfo runtime.ClientAuthInfoWriter) (*ProductSearchOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ProductListPostList bs e t a add multiple products
*/
func (a *Client) ProductListPostList(params *ProductListPostListParams, authInfo runtime.ClientAuthInfoWriter) (*ProductListPostListCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProductListPostListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProductList_postList",
		Method:             "POST",
		PathPattern:        "/product/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProductListPostListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProductListPostListCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProductList_postList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProductListPutList bs e t a update a list of products
*/
func (a *Client) ProductListPutList(params *ProductListPutListParams, authInfo runtime.ClientAuthInfoWriter) (*ProductListPutListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProductListPutListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProductList_putList",
		Method:             "PUT",
		PathPattern:        "/product/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProductListPutListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProductListPutListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProductList_putList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProductDelete bs e t a delete product
*/
func (a *Client) ProductDelete(params *ProductDeleteParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProductDeleteParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Product_delete",
		Method:             "DELETE",
		PathPattern:        "/product/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProductDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  ProductGet gets product by ID
*/
func (a *Client) ProductGet(params *ProductGetParams, authInfo runtime.ClientAuthInfoWriter) (*ProductGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProductGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Product_get",
		Method:             "GET",
		PathPattern:        "/product/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProductGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProductGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Product_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProductPost creates new product
*/
func (a *Client) ProductPost(params *ProductPostParams, authInfo runtime.ClientAuthInfoWriter) (*ProductPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProductPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Product_post",
		Method:             "POST",
		PathPattern:        "/product",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProductPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProductPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Product_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProductPut updates product
*/
func (a *Client) ProductPut(params *ProductPutParams, authInfo runtime.ClientAuthInfoWriter) (*ProductPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProductPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Product_put",
		Method:             "PUT",
		PathPattern:        "/product/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProductPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProductPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Product_put: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProductSearch finds products corresponding with sent data
*/
func (a *Client) ProductSearch(params *ProductSearchParams, authInfo runtime.ClientAuthInfoWriter) (*ProductSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProductSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Product_search",
		Method:             "GET",
		PathPattern:        "/product",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProductSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProductSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Product_search: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
