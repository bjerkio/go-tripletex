// Copyright 2020 Bjerk AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewProjectSearchParams creates a new ProjectSearchParams object
// with the default values initialized.
func NewProjectSearchParams() *ProjectSearchParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &ProjectSearchParams{
		Count: &countDefault,
		From:  &fromDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewProjectSearchParamsWithTimeout creates a new ProjectSearchParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewProjectSearchParamsWithTimeout(timeout time.Duration) *ProjectSearchParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &ProjectSearchParams{
		Count: &countDefault,
		From:  &fromDefault,

		timeout: timeout,
	}
}

// NewProjectSearchParamsWithContext creates a new ProjectSearchParams object
// with the default values initialized, and the ability to set a context for a request
func NewProjectSearchParamsWithContext(ctx context.Context) *ProjectSearchParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &ProjectSearchParams{
		Count: &countDefault,
		From:  &fromDefault,

		Context: ctx,
	}
}

// NewProjectSearchParamsWithHTTPClient creates a new ProjectSearchParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewProjectSearchParamsWithHTTPClient(client *http.Client) *ProjectSearchParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &ProjectSearchParams{
		Count:      &countDefault,
		From:       &fromDefault,
		HTTPClient: client,
	}
}

/*ProjectSearchParams contains all the parameters to send to the API endpoint
for the project search operation typically these are written to a http.Request
*/
type ProjectSearchParams struct {

	/*Count
	  Number of elements to return

	*/
	Count *int64
	/*CustomerID
	  Equals

	*/
	CustomerID *string
	/*DepartmentID
	  List of IDs

	*/
	DepartmentID *string
	/*EmployeeInProjectID
	  List of IDs

	*/
	EmployeeInProjectID *string
	/*EndDateFrom
	  From and including

	*/
	EndDateFrom *string
	/*EndDateTo
	  To and excluding

	*/
	EndDateTo *string
	/*ExternalAccountsNumber
	  Containing

	*/
	ExternalAccountsNumber *string
	/*Fields
	  Fields filter pattern

	*/
	Fields *string
	/*From
	  From index

	*/
	From *int64
	/*ID
	  List of IDs

	*/
	ID *string
	/*IsClosed
	  Equals

	*/
	IsClosed *bool
	/*IsOffer
	  Equals

	*/
	IsOffer *bool
	/*Name
	  Containing

	*/
	Name *string
	/*Number
	  Equals

	*/
	Number *string
	/*ProjectManagerID
	  List of IDs

	*/
	ProjectManagerID *string
	/*Sorting
	  Sorting pattern

	*/
	Sorting *string
	/*StartDateFrom
	  From and including

	*/
	StartDateFrom *string
	/*StartDateTo
	  To and excluding

	*/
	StartDateTo *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the project search params
func (o *ProjectSearchParams) WithTimeout(timeout time.Duration) *ProjectSearchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the project search params
func (o *ProjectSearchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the project search params
func (o *ProjectSearchParams) WithContext(ctx context.Context) *ProjectSearchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the project search params
func (o *ProjectSearchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the project search params
func (o *ProjectSearchParams) WithHTTPClient(client *http.Client) *ProjectSearchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the project search params
func (o *ProjectSearchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCount adds the count to the project search params
func (o *ProjectSearchParams) WithCount(count *int64) *ProjectSearchParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the project search params
func (o *ProjectSearchParams) SetCount(count *int64) {
	o.Count = count
}

// WithCustomerID adds the customerID to the project search params
func (o *ProjectSearchParams) WithCustomerID(customerID *string) *ProjectSearchParams {
	o.SetCustomerID(customerID)
	return o
}

// SetCustomerID adds the customerId to the project search params
func (o *ProjectSearchParams) SetCustomerID(customerID *string) {
	o.CustomerID = customerID
}

// WithDepartmentID adds the departmentID to the project search params
func (o *ProjectSearchParams) WithDepartmentID(departmentID *string) *ProjectSearchParams {
	o.SetDepartmentID(departmentID)
	return o
}

// SetDepartmentID adds the departmentId to the project search params
func (o *ProjectSearchParams) SetDepartmentID(departmentID *string) {
	o.DepartmentID = departmentID
}

// WithEmployeeInProjectID adds the employeeInProjectID to the project search params
func (o *ProjectSearchParams) WithEmployeeInProjectID(employeeInProjectID *string) *ProjectSearchParams {
	o.SetEmployeeInProjectID(employeeInProjectID)
	return o
}

// SetEmployeeInProjectID adds the employeeInProjectId to the project search params
func (o *ProjectSearchParams) SetEmployeeInProjectID(employeeInProjectID *string) {
	o.EmployeeInProjectID = employeeInProjectID
}

// WithEndDateFrom adds the endDateFrom to the project search params
func (o *ProjectSearchParams) WithEndDateFrom(endDateFrom *string) *ProjectSearchParams {
	o.SetEndDateFrom(endDateFrom)
	return o
}

// SetEndDateFrom adds the endDateFrom to the project search params
func (o *ProjectSearchParams) SetEndDateFrom(endDateFrom *string) {
	o.EndDateFrom = endDateFrom
}

// WithEndDateTo adds the endDateTo to the project search params
func (o *ProjectSearchParams) WithEndDateTo(endDateTo *string) *ProjectSearchParams {
	o.SetEndDateTo(endDateTo)
	return o
}

// SetEndDateTo adds the endDateTo to the project search params
func (o *ProjectSearchParams) SetEndDateTo(endDateTo *string) {
	o.EndDateTo = endDateTo
}

// WithExternalAccountsNumber adds the externalAccountsNumber to the project search params
func (o *ProjectSearchParams) WithExternalAccountsNumber(externalAccountsNumber *string) *ProjectSearchParams {
	o.SetExternalAccountsNumber(externalAccountsNumber)
	return o
}

// SetExternalAccountsNumber adds the externalAccountsNumber to the project search params
func (o *ProjectSearchParams) SetExternalAccountsNumber(externalAccountsNumber *string) {
	o.ExternalAccountsNumber = externalAccountsNumber
}

// WithFields adds the fields to the project search params
func (o *ProjectSearchParams) WithFields(fields *string) *ProjectSearchParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the project search params
func (o *ProjectSearchParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithFrom adds the from to the project search params
func (o *ProjectSearchParams) WithFrom(from *int64) *ProjectSearchParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the project search params
func (o *ProjectSearchParams) SetFrom(from *int64) {
	o.From = from
}

// WithID adds the id to the project search params
func (o *ProjectSearchParams) WithID(id *string) *ProjectSearchParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the project search params
func (o *ProjectSearchParams) SetID(id *string) {
	o.ID = id
}

// WithIsClosed adds the isClosed to the project search params
func (o *ProjectSearchParams) WithIsClosed(isClosed *bool) *ProjectSearchParams {
	o.SetIsClosed(isClosed)
	return o
}

// SetIsClosed adds the isClosed to the project search params
func (o *ProjectSearchParams) SetIsClosed(isClosed *bool) {
	o.IsClosed = isClosed
}

// WithIsOffer adds the isOffer to the project search params
func (o *ProjectSearchParams) WithIsOffer(isOffer *bool) *ProjectSearchParams {
	o.SetIsOffer(isOffer)
	return o
}

// SetIsOffer adds the isOffer to the project search params
func (o *ProjectSearchParams) SetIsOffer(isOffer *bool) {
	o.IsOffer = isOffer
}

// WithName adds the name to the project search params
func (o *ProjectSearchParams) WithName(name *string) *ProjectSearchParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the project search params
func (o *ProjectSearchParams) SetName(name *string) {
	o.Name = name
}

// WithNumber adds the number to the project search params
func (o *ProjectSearchParams) WithNumber(number *string) *ProjectSearchParams {
	o.SetNumber(number)
	return o
}

// SetNumber adds the number to the project search params
func (o *ProjectSearchParams) SetNumber(number *string) {
	o.Number = number
}

// WithProjectManagerID adds the projectManagerID to the project search params
func (o *ProjectSearchParams) WithProjectManagerID(projectManagerID *string) *ProjectSearchParams {
	o.SetProjectManagerID(projectManagerID)
	return o
}

// SetProjectManagerID adds the projectManagerId to the project search params
func (o *ProjectSearchParams) SetProjectManagerID(projectManagerID *string) {
	o.ProjectManagerID = projectManagerID
}

// WithSorting adds the sorting to the project search params
func (o *ProjectSearchParams) WithSorting(sorting *string) *ProjectSearchParams {
	o.SetSorting(sorting)
	return o
}

// SetSorting adds the sorting to the project search params
func (o *ProjectSearchParams) SetSorting(sorting *string) {
	o.Sorting = sorting
}

// WithStartDateFrom adds the startDateFrom to the project search params
func (o *ProjectSearchParams) WithStartDateFrom(startDateFrom *string) *ProjectSearchParams {
	o.SetStartDateFrom(startDateFrom)
	return o
}

// SetStartDateFrom adds the startDateFrom to the project search params
func (o *ProjectSearchParams) SetStartDateFrom(startDateFrom *string) {
	o.StartDateFrom = startDateFrom
}

// WithStartDateTo adds the startDateTo to the project search params
func (o *ProjectSearchParams) WithStartDateTo(startDateTo *string) *ProjectSearchParams {
	o.SetStartDateTo(startDateTo)
	return o
}

// SetStartDateTo adds the startDateTo to the project search params
func (o *ProjectSearchParams) SetStartDateTo(startDateTo *string) {
	o.StartDateTo = startDateTo
}

// WriteToRequest writes these params to a swagger request
func (o *ProjectSearchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Count != nil {

		// query param count
		var qrCount int64
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt64(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	if o.CustomerID != nil {

		// query param customerId
		var qrCustomerID string
		if o.CustomerID != nil {
			qrCustomerID = *o.CustomerID
		}
		qCustomerID := qrCustomerID
		if qCustomerID != "" {
			if err := r.SetQueryParam("customerId", qCustomerID); err != nil {
				return err
			}
		}

	}

	if o.DepartmentID != nil {

		// query param departmentId
		var qrDepartmentID string
		if o.DepartmentID != nil {
			qrDepartmentID = *o.DepartmentID
		}
		qDepartmentID := qrDepartmentID
		if qDepartmentID != "" {
			if err := r.SetQueryParam("departmentId", qDepartmentID); err != nil {
				return err
			}
		}

	}

	if o.EmployeeInProjectID != nil {

		// query param employeeInProjectId
		var qrEmployeeInProjectID string
		if o.EmployeeInProjectID != nil {
			qrEmployeeInProjectID = *o.EmployeeInProjectID
		}
		qEmployeeInProjectID := qrEmployeeInProjectID
		if qEmployeeInProjectID != "" {
			if err := r.SetQueryParam("employeeInProjectId", qEmployeeInProjectID); err != nil {
				return err
			}
		}

	}

	if o.EndDateFrom != nil {

		// query param endDateFrom
		var qrEndDateFrom string
		if o.EndDateFrom != nil {
			qrEndDateFrom = *o.EndDateFrom
		}
		qEndDateFrom := qrEndDateFrom
		if qEndDateFrom != "" {
			if err := r.SetQueryParam("endDateFrom", qEndDateFrom); err != nil {
				return err
			}
		}

	}

	if o.EndDateTo != nil {

		// query param endDateTo
		var qrEndDateTo string
		if o.EndDateTo != nil {
			qrEndDateTo = *o.EndDateTo
		}
		qEndDateTo := qrEndDateTo
		if qEndDateTo != "" {
			if err := r.SetQueryParam("endDateTo", qEndDateTo); err != nil {
				return err
			}
		}

	}

	if o.ExternalAccountsNumber != nil {

		// query param externalAccountsNumber
		var qrExternalAccountsNumber string
		if o.ExternalAccountsNumber != nil {
			qrExternalAccountsNumber = *o.ExternalAccountsNumber
		}
		qExternalAccountsNumber := qrExternalAccountsNumber
		if qExternalAccountsNumber != "" {
			if err := r.SetQueryParam("externalAccountsNumber", qExternalAccountsNumber); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.From != nil {

		// query param from
		var qrFrom int64
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := swag.FormatInt64(qrFrom)
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	if o.ID != nil {

		// query param id
		var qrID string
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.IsClosed != nil {

		// query param isClosed
		var qrIsClosed bool
		if o.IsClosed != nil {
			qrIsClosed = *o.IsClosed
		}
		qIsClosed := swag.FormatBool(qrIsClosed)
		if qIsClosed != "" {
			if err := r.SetQueryParam("isClosed", qIsClosed); err != nil {
				return err
			}
		}

	}

	if o.IsOffer != nil {

		// query param isOffer
		var qrIsOffer bool
		if o.IsOffer != nil {
			qrIsOffer = *o.IsOffer
		}
		qIsOffer := swag.FormatBool(qrIsOffer)
		if qIsOffer != "" {
			if err := r.SetQueryParam("isOffer", qIsOffer); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.Number != nil {

		// query param number
		var qrNumber string
		if o.Number != nil {
			qrNumber = *o.Number
		}
		qNumber := qrNumber
		if qNumber != "" {
			if err := r.SetQueryParam("number", qNumber); err != nil {
				return err
			}
		}

	}

	if o.ProjectManagerID != nil {

		// query param projectManagerId
		var qrProjectManagerID string
		if o.ProjectManagerID != nil {
			qrProjectManagerID = *o.ProjectManagerID
		}
		qProjectManagerID := qrProjectManagerID
		if qProjectManagerID != "" {
			if err := r.SetQueryParam("projectManagerId", qProjectManagerID); err != nil {
				return err
			}
		}

	}

	if o.Sorting != nil {

		// query param sorting
		var qrSorting string
		if o.Sorting != nil {
			qrSorting = *o.Sorting
		}
		qSorting := qrSorting
		if qSorting != "" {
			if err := r.SetQueryParam("sorting", qSorting); err != nil {
				return err
			}
		}

	}

	if o.StartDateFrom != nil {

		// query param startDateFrom
		var qrStartDateFrom string
		if o.StartDateFrom != nil {
			qrStartDateFrom = *o.StartDateFrom
		}
		qStartDateFrom := qrStartDateFrom
		if qStartDateFrom != "" {
			if err := r.SetQueryParam("startDateFrom", qStartDateFrom); err != nil {
				return err
			}
		}

	}

	if o.StartDateTo != nil {

		// query param startDateTo
		var qrStartDateTo string
		if o.StartDateTo != nil {
			qrStartDateTo = *o.StartDateTo
		}
		qStartDateTo := qrStartDateTo
		if qStartDateTo != "" {
			if err := r.SetQueryParam("startDateTo", qStartDateTo); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
