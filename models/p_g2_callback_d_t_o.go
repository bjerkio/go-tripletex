// Copyright 2020 Bjerk AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PG2CallbackDTO p g2 callback d t o
//
// swagger:model PG2CallbackDTO
type PG2CallbackDTO struct {

	// o d p company ID
	// Required: true
	ODPCompanyID *int32 `json:"ODPCompanyID"`

	// o d p customer ID
	// Required: true
	ODPCustomerID *int32 `json:"ODPCustomerID"`

	// auto pay key
	// Required: true
	AutoPayKey *string `json:"autoPayKey"`

	// auto pay key last generated date
	// Required: true
	// Format: date
	AutoPayKeyLastGeneratedDate *strfmt.Date `json:"autoPayKeyLastGeneratedDate"`

	// odpcompany ID
	OdpcompanyID int32 `json:"odpcompanyID,omitempty"`

	// odpcustomer ID
	OdpcustomerID int32 `json:"odpcustomerID,omitempty"`

	// pg request Id
	// Required: true
	PgRequestID *string `json:"pgRequestId"`

	// tenant Id
	// Required: true
	TenantID *string `json:"tenantId"`
}

// Validate validates this p g2 callback d t o
func (m *PG2CallbackDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateODPCompanyID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateODPCustomerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAutoPayKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAutoPayKeyLastGeneratedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePgRequestID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PG2CallbackDTO) validateODPCompanyID(formats strfmt.Registry) error {

	if err := validate.Required("ODPCompanyID", "body", m.ODPCompanyID); err != nil {
		return err
	}

	return nil
}

func (m *PG2CallbackDTO) validateODPCustomerID(formats strfmt.Registry) error {

	if err := validate.Required("ODPCustomerID", "body", m.ODPCustomerID); err != nil {
		return err
	}

	return nil
}

func (m *PG2CallbackDTO) validateAutoPayKey(formats strfmt.Registry) error {

	if err := validate.Required("autoPayKey", "body", m.AutoPayKey); err != nil {
		return err
	}

	return nil
}

func (m *PG2CallbackDTO) validateAutoPayKeyLastGeneratedDate(formats strfmt.Registry) error {

	if err := validate.Required("autoPayKeyLastGeneratedDate", "body", m.AutoPayKeyLastGeneratedDate); err != nil {
		return err
	}

	if err := validate.FormatOf("autoPayKeyLastGeneratedDate", "body", "date", m.AutoPayKeyLastGeneratedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PG2CallbackDTO) validatePgRequestID(formats strfmt.Registry) error {

	if err := validate.Required("pgRequestId", "body", m.PgRequestID); err != nil {
		return err
	}

	return nil
}

func (m *PG2CallbackDTO) validateTenantID(formats strfmt.Registry) error {

	if err := validate.Required("tenantId", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PG2CallbackDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PG2CallbackDTO) UnmarshalBinary(b []byte) error {
	var res PG2CallbackDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
