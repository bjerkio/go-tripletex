// Code generated by go-swagger; DO NOT EDIT.

package project_activity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new project activity API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for project activity API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ProjectProjectActivityListDeleteByIds(params *ProjectProjectActivityListDeleteByIdsParams, authInfo runtime.ClientAuthInfoWriter) error

	ProjectProjectActivityDelete(params *ProjectProjectActivityDeleteParams, authInfo runtime.ClientAuthInfoWriter) error

	ProjectProjectActivityGet(params *ProjectProjectActivityGetParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectProjectActivityGetOK, error)

	ProjectProjectActivityPost(params *ProjectProjectActivityPostParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectProjectActivityPostCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ProjectProjectActivityListDeleteByIds deletes project activities
*/
func (a *Client) ProjectProjectActivityListDeleteByIds(params *ProjectProjectActivityListDeleteByIdsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectProjectActivityListDeleteByIdsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectProjectActivityList_deleteByIds",
		Method:             "DELETE",
		PathPattern:        "/project/projectActivity/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectProjectActivityListDeleteByIdsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  ProjectProjectActivityDelete deletes project activity
*/
func (a *Client) ProjectProjectActivityDelete(params *ProjectProjectActivityDeleteParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectProjectActivityDeleteParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectProjectActivity_delete",
		Method:             "DELETE",
		PathPattern:        "/project/projectActivity/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectProjectActivityDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  ProjectProjectActivityGet finds project activity by id
*/
func (a *Client) ProjectProjectActivityGet(params *ProjectProjectActivityGetParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectProjectActivityGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectProjectActivityGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectProjectActivity_get",
		Method:             "GET",
		PathPattern:        "/project/projectActivity/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectProjectActivityGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectProjectActivityGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProjectProjectActivity_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectProjectActivityPost adds project activity
*/
func (a *Client) ProjectProjectActivityPost(params *ProjectProjectActivityPostParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectProjectActivityPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectProjectActivityPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectProjectActivity_post",
		Method:             "POST",
		PathPattern:        "/project/projectActivity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectProjectActivityPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectProjectActivityPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProjectProjectActivity_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
