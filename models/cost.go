// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Cost cost
//
// swagger:model Cost
type Cost struct {

	// amount currency inc vat
	// Required: true
	AmountCurrencyIncVat *float64 `json:"amountCurrencyIncVat"`

	// amount n o k incl v a t
	AmountNOKInclVAT float64 `json:"amountNOKInclVAT,omitempty"`

	// amount n o k incl v a t high
	// Read Only: true
	AmountNOKInclVATHigh float64 `json:"amountNOKInclVATHigh,omitempty"`

	// amount n o k incl v a t low
	// Read Only: true
	AmountNOKInclVATLow float64 `json:"amountNOKInclVATLow,omitempty"`

	// amount n o k incl v a t medium
	// Read Only: true
	AmountNOKInclVATMedium float64 `json:"amountNOKInclVATMedium,omitempty"`

	// category
	// Max Length: 100
	Category string `json:"category,omitempty"`

	// changes
	// Read Only: true
	Changes []*Change `json:"changes"`

	// comments
	Comments string `json:"comments,omitempty"`

	// cost category
	CostCategory *TravelCostCategory `json:"costCategory,omitempty"`

	// currency
	Currency *Currency `json:"currency,omitempty"`

	// date
	Date string `json:"date,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// is chargeable
	IsChargeable *bool `json:"isChargeable,omitempty"`

	// is paid by employee
	// Read Only: true
	IsPaidByEmployee *bool `json:"isPaidByEmployee,omitempty"`

	// payment type
	// Required: true
	PaymentType *TravelPaymentType `json:"paymentType"`

	// predictions
	Predictions map[string]Prediction `json:"predictions,omitempty"`

	// rate
	Rate float64 `json:"rate,omitempty"`

	// travel expense
	TravelExpense *TravelExpense `json:"travelExpense,omitempty"`

	// url
	// Read Only: true
	URL string `json:"url,omitempty"`

	// vat type
	VatType *VatType `json:"vatType,omitempty"`

	// version
	Version int32 `json:"version,omitempty"`
}

// Validate validates this cost
func (m *Cost) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmountCurrencyIncVat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCostCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePredictions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTravelExpense(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVatType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Cost) validateAmountCurrencyIncVat(formats strfmt.Registry) error {

	if err := validate.Required("amountCurrencyIncVat", "body", m.AmountCurrencyIncVat); err != nil {
		return err
	}

	return nil
}

func (m *Cost) validateCategory(formats strfmt.Registry) error {

	if swag.IsZero(m.Category) { // not required
		return nil
	}

	if err := validate.MaxLength("category", "body", string(m.Category), 100); err != nil {
		return err
	}

	return nil
}

func (m *Cost) validateChanges(formats strfmt.Registry) error {

	if swag.IsZero(m.Changes) { // not required
		return nil
	}

	for i := 0; i < len(m.Changes); i++ {
		if swag.IsZero(m.Changes[i]) { // not required
			continue
		}

		if m.Changes[i] != nil {
			if err := m.Changes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("changes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Cost) validateCostCategory(formats strfmt.Registry) error {

	if swag.IsZero(m.CostCategory) { // not required
		return nil
	}

	if m.CostCategory != nil {
		if err := m.CostCategory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("costCategory")
			}
			return err
		}
	}

	return nil
}

func (m *Cost) validateCurrency(formats strfmt.Registry) error {

	if swag.IsZero(m.Currency) { // not required
		return nil
	}

	if m.Currency != nil {
		if err := m.Currency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currency")
			}
			return err
		}
	}

	return nil
}

func (m *Cost) validatePaymentType(formats strfmt.Registry) error {

	if err := validate.Required("paymentType", "body", m.PaymentType); err != nil {
		return err
	}

	if m.PaymentType != nil {
		if err := m.PaymentType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paymentType")
			}
			return err
		}
	}

	return nil
}

func (m *Cost) validatePredictions(formats strfmt.Registry) error {

	if swag.IsZero(m.Predictions) { // not required
		return nil
	}

	for k := range m.Predictions {

		if err := validate.Required("predictions"+"."+k, "body", m.Predictions[k]); err != nil {
			return err
		}
		if val, ok := m.Predictions[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Cost) validateTravelExpense(formats strfmt.Registry) error {

	if swag.IsZero(m.TravelExpense) { // not required
		return nil
	}

	if m.TravelExpense != nil {
		if err := m.TravelExpense.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("travelExpense")
			}
			return err
		}
	}

	return nil
}

func (m *Cost) validateVatType(formats strfmt.Registry) error {

	if swag.IsZero(m.VatType) { // not required
		return nil
	}

	if m.VatType != nil {
		if err := m.VatType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vatType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Cost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Cost) UnmarshalBinary(b []byte) error {
	var res Cost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
