// Copyright 2020 Bjerk AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package holiday

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new holiday API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for holiday API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	SalarySettingsHolidayListDeleteByIds(params *SalarySettingsHolidayListDeleteByIdsParams, authInfo runtime.ClientAuthInfoWriter) error

	SalarySettingsHolidayListPostList(params *SalarySettingsHolidayListPostListParams, authInfo runtime.ClientAuthInfoWriter) (*SalarySettingsHolidayListPostListCreated, error)

	SalarySettingsHolidayListPutList(params *SalarySettingsHolidayListPutListParams, authInfo runtime.ClientAuthInfoWriter) (*SalarySettingsHolidayListPutListOK, error)

	SalarySettingsHolidayPost(params *SalarySettingsHolidayPostParams, authInfo runtime.ClientAuthInfoWriter) (*SalarySettingsHolidayPostCreated, error)

	SalarySettingsHolidayPut(params *SalarySettingsHolidayPutParams, authInfo runtime.ClientAuthInfoWriter) (*SalarySettingsHolidayPutOK, error)

	SalarySettingsHolidaySearch(params *SalarySettingsHolidaySearchParams, authInfo runtime.ClientAuthInfoWriter) (*SalarySettingsHolidaySearchOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  SalarySettingsHolidayListDeleteByIds bs e t a delete multiple holiday settings of current logged in company
*/
func (a *Client) SalarySettingsHolidayListDeleteByIds(params *SalarySettingsHolidayListDeleteByIdsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalarySettingsHolidayListDeleteByIdsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SalarySettingsHolidayListDeleteByIds",
		Method:             "DELETE",
		PathPattern:        "/salary/settings/holiday/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SalarySettingsHolidayListDeleteByIdsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  SalarySettingsHolidayListPostList bs e t a create multiple holiday settings of current logged in company
*/
func (a *Client) SalarySettingsHolidayListPostList(params *SalarySettingsHolidayListPostListParams, authInfo runtime.ClientAuthInfoWriter) (*SalarySettingsHolidayListPostListCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalarySettingsHolidayListPostListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SalarySettingsHolidayListPostList",
		Method:             "POST",
		PathPattern:        "/salary/settings/holiday/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SalarySettingsHolidayListPostListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SalarySettingsHolidayListPostListCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SalarySettingsHolidayListPostList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SalarySettingsHolidayListPutList bs e t a update multiple holiday settings of current logged in company
*/
func (a *Client) SalarySettingsHolidayListPutList(params *SalarySettingsHolidayListPutListParams, authInfo runtime.ClientAuthInfoWriter) (*SalarySettingsHolidayListPutListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalarySettingsHolidayListPutListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SalarySettingsHolidayListPutList",
		Method:             "PUT",
		PathPattern:        "/salary/settings/holiday/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SalarySettingsHolidayListPutListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SalarySettingsHolidayListPutListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SalarySettingsHolidayListPutList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SalarySettingsHolidayPost bs e t a create a holiday setting of current logged in company
*/
func (a *Client) SalarySettingsHolidayPost(params *SalarySettingsHolidayPostParams, authInfo runtime.ClientAuthInfoWriter) (*SalarySettingsHolidayPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalarySettingsHolidayPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SalarySettingsHolidayPost",
		Method:             "POST",
		PathPattern:        "/salary/settings/holiday",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SalarySettingsHolidayPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SalarySettingsHolidayPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SalarySettingsHolidayPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SalarySettingsHolidayPut bs e t a update a holiday setting of current logged in company
*/
func (a *Client) SalarySettingsHolidayPut(params *SalarySettingsHolidayPutParams, authInfo runtime.ClientAuthInfoWriter) (*SalarySettingsHolidayPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalarySettingsHolidayPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SalarySettingsHolidayPut",
		Method:             "PUT",
		PathPattern:        "/salary/settings/holiday/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SalarySettingsHolidayPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SalarySettingsHolidayPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SalarySettingsHolidayPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SalarySettingsHolidaySearch bs e t a find holiday settings of current logged in company
*/
func (a *Client) SalarySettingsHolidaySearch(params *SalarySettingsHolidaySearchParams, authInfo runtime.ClientAuthInfoWriter) (*SalarySettingsHolidaySearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalarySettingsHolidaySearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SalarySettingsHolidaySearch",
		Method:             "GET",
		PathPattern:        "/salary/settings/holiday",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SalarySettingsHolidaySearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SalarySettingsHolidaySearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SalarySettingsHolidaySearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
