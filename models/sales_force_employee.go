// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SalesForceEmployee sales force employee
//
// swagger:model SalesForceEmployee
type SalesForceEmployee struct {

	// address
	// Read Only: true
	Address *SalesForceAddress `json:"address,omitempty"`

	// allow login
	// Read Only: true
	AllowLogin *bool `json:"allowLogin,omitempty"`

	// changes
	// Read Only: true
	Changes []*Change `json:"changes"`

	// company Id
	// Read Only: true
	CompanyID int32 `json:"companyId,omitempty"`

	// customer Id
	// Read Only: true
	CustomerID int32 `json:"customerId,omitempty"`

	// email
	// Read Only: true
	// Max Length: 100
	Email string `json:"email,omitempty"`

	// first name
	// Read Only: true
	// Max Length: 100
	FirstName string `json:"firstName,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// is account administrator
	// Read Only: true
	IsAccountAdministrator *bool `json:"isAccountAdministrator,omitempty"`

	// is default login
	// Read Only: true
	IsDefaultLogin *bool `json:"isDefaultLogin,omitempty"`

	// is external
	// Read Only: true
	IsExternal *bool `json:"isExternal,omitempty"`

	// is tripletex certified
	// Read Only: true
	IsTripletexCertified *bool `json:"isTripletexCertified,omitempty"`

	// is user administrator
	// Read Only: true
	IsUserAdministrator *bool `json:"isUserAdministrator,omitempty"`

	// last name
	// Read Only: true
	// Max Length: 100
	LastName string `json:"lastName,omitempty"`

	// Login end date
	// Read Only: true
	LoginEndDate string `json:"loginEndDate,omitempty"`

	// phone number home
	// Read Only: true
	// Max Length: 100
	PhoneNumberHome string `json:"phoneNumberHome,omitempty"`

	// phone number mobile
	// Read Only: true
	// Max Length: 100
	PhoneNumberMobile string `json:"phoneNumberMobile,omitempty"`

	// phone number sms certified
	// Read Only: true
	PhoneNumberSmsCertified string `json:"phoneNumberSmsCertified,omitempty"`

	// phone number work
	// Read Only: true
	// Max Length: 100
	PhoneNumberWork string `json:"phoneNumberWork,omitempty"`

	// url
	// Read Only: true
	URL string `json:"url,omitempty"`

	// user Id
	// Read Only: true
	UserID int32 `json:"userId,omitempty"`

	// version
	Version int32 `json:"version,omitempty"`
}

// Validate validates this sales force employee
func (m *SalesForceEmployee) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneNumberHome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneNumberMobile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneNumberWork(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SalesForceEmployee) validateAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if m.Address != nil {
		if err := m.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *SalesForceEmployee) validateChanges(formats strfmt.Registry) error {

	if swag.IsZero(m.Changes) { // not required
		return nil
	}

	for i := 0; i < len(m.Changes); i++ {
		if swag.IsZero(m.Changes[i]) { // not required
			continue
		}

		if m.Changes[i] != nil {
			if err := m.Changes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("changes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SalesForceEmployee) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.MaxLength("email", "body", string(m.Email), 100); err != nil {
		return err
	}

	return nil
}

func (m *SalesForceEmployee) validateFirstName(formats strfmt.Registry) error {

	if swag.IsZero(m.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("firstName", "body", string(m.FirstName), 100); err != nil {
		return err
	}

	return nil
}

func (m *SalesForceEmployee) validateLastName(formats strfmt.Registry) error {

	if swag.IsZero(m.LastName) { // not required
		return nil
	}

	if err := validate.MaxLength("lastName", "body", string(m.LastName), 100); err != nil {
		return err
	}

	return nil
}

func (m *SalesForceEmployee) validatePhoneNumberHome(formats strfmt.Registry) error {

	if swag.IsZero(m.PhoneNumberHome) { // not required
		return nil
	}

	if err := validate.MaxLength("phoneNumberHome", "body", string(m.PhoneNumberHome), 100); err != nil {
		return err
	}

	return nil
}

func (m *SalesForceEmployee) validatePhoneNumberMobile(formats strfmt.Registry) error {

	if swag.IsZero(m.PhoneNumberMobile) { // not required
		return nil
	}

	if err := validate.MaxLength("phoneNumberMobile", "body", string(m.PhoneNumberMobile), 100); err != nil {
		return err
	}

	return nil
}

func (m *SalesForceEmployee) validatePhoneNumberWork(formats strfmt.Registry) error {

	if swag.IsZero(m.PhoneNumberWork) { // not required
		return nil
	}

	if err := validate.MaxLength("phoneNumberWork", "body", string(m.PhoneNumberWork), 100); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SalesForceEmployee) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SalesForceEmployee) UnmarshalBinary(b []byte) error {
	var res SalesForceEmployee
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
