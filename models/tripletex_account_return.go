// Copyright 2020 Bjerk AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TripletexAccountReturn tripletex account return
//
// swagger:model TripletexAccountReturn
type TripletexAccountReturn struct {

	// administrator
	Administrator *Employee `json:"administrator,omitempty"`

	// administrator Api token
	AdministratorAPIToken *EmployeeToken `json:"administratorApiToken,omitempty"`

	// company
	Company *Company `json:"company,omitempty"`

	// company owned Api token
	CompanyOwnedAPIToken *EmployeeToken `json:"companyOwnedApiToken,omitempty"`

	// company owned Api token robot Id
	CompanyOwnedAPITokenRobotID int32 `json:"companyOwnedApiTokenRobotId,omitempty"`
}

// Validate validates this tripletex account return
func (m *TripletexAccountReturn) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdministrator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdministratorAPIToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompany(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompanyOwnedAPIToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TripletexAccountReturn) validateAdministrator(formats strfmt.Registry) error {

	if swag.IsZero(m.Administrator) { // not required
		return nil
	}

	if m.Administrator != nil {
		if err := m.Administrator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("administrator")
			}
			return err
		}
	}

	return nil
}

func (m *TripletexAccountReturn) validateAdministratorAPIToken(formats strfmt.Registry) error {

	if swag.IsZero(m.AdministratorAPIToken) { // not required
		return nil
	}

	if m.AdministratorAPIToken != nil {
		if err := m.AdministratorAPIToken.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("administratorApiToken")
			}
			return err
		}
	}

	return nil
}

func (m *TripletexAccountReturn) validateCompany(formats strfmt.Registry) error {

	if swag.IsZero(m.Company) { // not required
		return nil
	}

	if m.Company != nil {
		if err := m.Company.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("company")
			}
			return err
		}
	}

	return nil
}

func (m *TripletexAccountReturn) validateCompanyOwnedAPIToken(formats strfmt.Registry) error {

	if swag.IsZero(m.CompanyOwnedAPIToken) { // not required
		return nil
	}

	if m.CompanyOwnedAPIToken != nil {
		if err := m.CompanyOwnedAPIToken.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("companyOwnedApiToken")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TripletexAccountReturn) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TripletexAccountReturn) UnmarshalBinary(b []byte) error {
	var res TripletexAccountReturn
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
