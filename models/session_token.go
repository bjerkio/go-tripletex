// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SessionToken session token
//
// swagger:model SessionToken
type SessionToken struct {

	// changes
	// Read Only: true
	Changes []*Change `json:"changes"`

	// consumer token
	ConsumerToken *ConsumerToken `json:"consumerToken,omitempty"`

	// employee token
	EmployeeToken *EmployeeToken `json:"employeeToken,omitempty"`

	// encryption key
	// Read Only: true
	// Max Length: 100
	EncryptionKey string `json:"encryptionKey,omitempty"`

	// expiration date
	// Required: true
	ExpirationDate *string `json:"expirationDate"`

	// id
	ID int32 `json:"id,omitempty"`

	// token
	Token string `json:"token,omitempty"`

	// url
	// Read Only: true
	URL string `json:"url,omitempty"`

	// version
	Version int32 `json:"version,omitempty"`
}

// Validate validates this session token
func (m *SessionToken) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsumerToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmployeeToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncryptionKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SessionToken) validateChanges(formats strfmt.Registry) error {

	if swag.IsZero(m.Changes) { // not required
		return nil
	}

	for i := 0; i < len(m.Changes); i++ {
		if swag.IsZero(m.Changes[i]) { // not required
			continue
		}

		if m.Changes[i] != nil {
			if err := m.Changes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("changes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SessionToken) validateConsumerToken(formats strfmt.Registry) error {

	if swag.IsZero(m.ConsumerToken) { // not required
		return nil
	}

	if m.ConsumerToken != nil {
		if err := m.ConsumerToken.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consumerToken")
			}
			return err
		}
	}

	return nil
}

func (m *SessionToken) validateEmployeeToken(formats strfmt.Registry) error {

	if swag.IsZero(m.EmployeeToken) { // not required
		return nil
	}

	if m.EmployeeToken != nil {
		if err := m.EmployeeToken.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("employeeToken")
			}
			return err
		}
	}

	return nil
}

func (m *SessionToken) validateEncryptionKey(formats strfmt.Registry) error {

	if swag.IsZero(m.EncryptionKey) { // not required
		return nil
	}

	if err := validate.MaxLength("encryptionKey", "body", string(m.EncryptionKey), 100); err != nil {
		return err
	}

	return nil
}

func (m *SessionToken) validateExpirationDate(formats strfmt.Registry) error {

	if err := validate.Required("expirationDate", "body", m.ExpirationDate); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SessionToken) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SessionToken) UnmarshalBinary(b []byte) error {
	var res SessionToken
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
