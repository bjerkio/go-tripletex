// Copyright 2020 Bjerk AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Stock stock
//
// swagger:model Stock
type Stock struct {

	// changes in period
	// Read Only: true
	ChangesInPeriod float64 `json:"changesInPeriod,omitempty"`

	// closing stock
	// Read Only: true
	ClosingStock float64 `json:"closingStock,omitempty"`

	// inventory
	// Read Only: true
	// Max Length: 255
	Inventory string `json:"inventory,omitempty"`

	// opening stock
	// Read Only: true
	OpeningStock float64 `json:"openingStock,omitempty"`
}

// Validate validates this stock
func (m *Stock) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInventory(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Stock) validateInventory(formats strfmt.Registry) error {

	if swag.IsZero(m.Inventory) { // not required
		return nil
	}

	if err := validate.MaxLength("inventory", "body", string(m.Inventory), 255); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Stock) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Stock) UnmarshalBinary(b []byte) error {
	var res Stock
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
