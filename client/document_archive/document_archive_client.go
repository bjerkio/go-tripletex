// Code generated by go-swagger; DO NOT EDIT.

package document_archive

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new document archive API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for document archive API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DocumentArchiveAccountAccountPost(params *DocumentArchiveAccountAccountPostParams, authInfo runtime.ClientAuthInfoWriter) (*DocumentArchiveAccountAccountPostCreated, error)

	DocumentArchiveAccountGetAccount(params *DocumentArchiveAccountGetAccountParams, authInfo runtime.ClientAuthInfoWriter) (*DocumentArchiveAccountGetAccountOK, error)

	DocumentArchiveCustomerCustomerPost(params *DocumentArchiveCustomerCustomerPostParams, authInfo runtime.ClientAuthInfoWriter) (*DocumentArchiveCustomerCustomerPostCreated, error)

	DocumentArchiveCustomerGetCustomer(params *DocumentArchiveCustomerGetCustomerParams, authInfo runtime.ClientAuthInfoWriter) (*DocumentArchiveCustomerGetCustomerOK, error)

	DocumentArchiveEmployeeEmployeePost(params *DocumentArchiveEmployeeEmployeePostParams, authInfo runtime.ClientAuthInfoWriter) (*DocumentArchiveEmployeeEmployeePostCreated, error)

	DocumentArchiveEmployeeGetEmployee(params *DocumentArchiveEmployeeGetEmployeeParams, authInfo runtime.ClientAuthInfoWriter) (*DocumentArchiveEmployeeGetEmployeeOK, error)

	DocumentArchiveProductGetProduct(params *DocumentArchiveProductGetProductParams, authInfo runtime.ClientAuthInfoWriter) (*DocumentArchiveProductGetProductOK, error)

	DocumentArchiveProductProductPost(params *DocumentArchiveProductProductPostParams, authInfo runtime.ClientAuthInfoWriter) (*DocumentArchiveProductProductPostCreated, error)

	DocumentArchiveProjectGetProject(params *DocumentArchiveProjectGetProjectParams, authInfo runtime.ClientAuthInfoWriter) (*DocumentArchiveProjectGetProjectOK, error)

	DocumentArchiveProjectProjectPost(params *DocumentArchiveProjectProjectPostParams, authInfo runtime.ClientAuthInfoWriter) (*DocumentArchiveProjectProjectPostCreated, error)

	DocumentArchiveProspectGetProspect(params *DocumentArchiveProspectGetProspectParams, authInfo runtime.ClientAuthInfoWriter) (*DocumentArchiveProspectGetProspectOK, error)

	DocumentArchiveProspectProspectPost(params *DocumentArchiveProspectProspectPostParams, authInfo runtime.ClientAuthInfoWriter) (*DocumentArchiveProspectProspectPostCreated, error)

	DocumentArchiveReceptionReceptionPost(params *DocumentArchiveReceptionReceptionPostParams, authInfo runtime.ClientAuthInfoWriter) (*DocumentArchiveReceptionReceptionPostCreated, error)

	DocumentArchiveSupplierGetSupplier(params *DocumentArchiveSupplierGetSupplierParams, authInfo runtime.ClientAuthInfoWriter) (*DocumentArchiveSupplierGetSupplierOK, error)

	DocumentArchiveSupplierSupplierPost(params *DocumentArchiveSupplierSupplierPostParams, authInfo runtime.ClientAuthInfoWriter) (*DocumentArchiveSupplierSupplierPostCreated, error)

	DocumentArchiveDelete(params *DocumentArchiveDeleteParams, authInfo runtime.ClientAuthInfoWriter) error

	DocumentArchivePut(params *DocumentArchivePutParams, authInfo runtime.ClientAuthInfoWriter) (*DocumentArchivePutOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DocumentArchiveAccountAccountPost bs e t a upload file to account document archive
*/
func (a *Client) DocumentArchiveAccountAccountPost(params *DocumentArchiveAccountAccountPostParams, authInfo runtime.ClientAuthInfoWriter) (*DocumentArchiveAccountAccountPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDocumentArchiveAccountAccountPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DocumentArchiveAccount_accountPost",
		Method:             "POST",
		PathPattern:        "/documentArchive/account/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DocumentArchiveAccountAccountPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DocumentArchiveAccountAccountPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DocumentArchiveAccount_accountPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DocumentArchiveAccountGetAccount bs e t a find documents archived associated with account object type
*/
func (a *Client) DocumentArchiveAccountGetAccount(params *DocumentArchiveAccountGetAccountParams, authInfo runtime.ClientAuthInfoWriter) (*DocumentArchiveAccountGetAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDocumentArchiveAccountGetAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DocumentArchiveAccount_getAccount",
		Method:             "GET",
		PathPattern:        "/documentArchive/account/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DocumentArchiveAccountGetAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DocumentArchiveAccountGetAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DocumentArchiveAccount_getAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DocumentArchiveCustomerCustomerPost bs e t a upload file to customer document archive
*/
func (a *Client) DocumentArchiveCustomerCustomerPost(params *DocumentArchiveCustomerCustomerPostParams, authInfo runtime.ClientAuthInfoWriter) (*DocumentArchiveCustomerCustomerPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDocumentArchiveCustomerCustomerPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DocumentArchiveCustomer_customerPost",
		Method:             "POST",
		PathPattern:        "/documentArchive/customer/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DocumentArchiveCustomerCustomerPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DocumentArchiveCustomerCustomerPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DocumentArchiveCustomer_customerPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DocumentArchiveCustomerGetCustomer bs e t a find documents archived associated with customer object type
*/
func (a *Client) DocumentArchiveCustomerGetCustomer(params *DocumentArchiveCustomerGetCustomerParams, authInfo runtime.ClientAuthInfoWriter) (*DocumentArchiveCustomerGetCustomerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDocumentArchiveCustomerGetCustomerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DocumentArchiveCustomer_getCustomer",
		Method:             "GET",
		PathPattern:        "/documentArchive/customer/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DocumentArchiveCustomerGetCustomerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DocumentArchiveCustomerGetCustomerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DocumentArchiveCustomer_getCustomer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DocumentArchiveEmployeeEmployeePost bs e t a upload file to employee document archive
*/
func (a *Client) DocumentArchiveEmployeeEmployeePost(params *DocumentArchiveEmployeeEmployeePostParams, authInfo runtime.ClientAuthInfoWriter) (*DocumentArchiveEmployeeEmployeePostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDocumentArchiveEmployeeEmployeePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DocumentArchiveEmployee_employeePost",
		Method:             "POST",
		PathPattern:        "/documentArchive/employee/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DocumentArchiveEmployeeEmployeePostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DocumentArchiveEmployeeEmployeePostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DocumentArchiveEmployee_employeePost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DocumentArchiveEmployeeGetEmployee bs e t a find documents archived associated with employee object type
*/
func (a *Client) DocumentArchiveEmployeeGetEmployee(params *DocumentArchiveEmployeeGetEmployeeParams, authInfo runtime.ClientAuthInfoWriter) (*DocumentArchiveEmployeeGetEmployeeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDocumentArchiveEmployeeGetEmployeeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DocumentArchiveEmployee_getEmployee",
		Method:             "GET",
		PathPattern:        "/documentArchive/employee/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DocumentArchiveEmployeeGetEmployeeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DocumentArchiveEmployeeGetEmployeeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DocumentArchiveEmployee_getEmployee: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DocumentArchiveProductGetProduct bs e t a find documents archived associated with product object type
*/
func (a *Client) DocumentArchiveProductGetProduct(params *DocumentArchiveProductGetProductParams, authInfo runtime.ClientAuthInfoWriter) (*DocumentArchiveProductGetProductOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDocumentArchiveProductGetProductParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DocumentArchiveProduct_getProduct",
		Method:             "GET",
		PathPattern:        "/documentArchive/product/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DocumentArchiveProductGetProductReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DocumentArchiveProductGetProductOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DocumentArchiveProduct_getProduct: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DocumentArchiveProductProductPost bs e t a upload file to product document archive
*/
func (a *Client) DocumentArchiveProductProductPost(params *DocumentArchiveProductProductPostParams, authInfo runtime.ClientAuthInfoWriter) (*DocumentArchiveProductProductPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDocumentArchiveProductProductPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DocumentArchiveProduct_productPost",
		Method:             "POST",
		PathPattern:        "/documentArchive/product/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DocumentArchiveProductProductPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DocumentArchiveProductProductPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DocumentArchiveProduct_productPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DocumentArchiveProjectGetProject bs e t a find documents archived associated with project object type
*/
func (a *Client) DocumentArchiveProjectGetProject(params *DocumentArchiveProjectGetProjectParams, authInfo runtime.ClientAuthInfoWriter) (*DocumentArchiveProjectGetProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDocumentArchiveProjectGetProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DocumentArchiveProject_getProject",
		Method:             "GET",
		PathPattern:        "/documentArchive/project/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DocumentArchiveProjectGetProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DocumentArchiveProjectGetProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DocumentArchiveProject_getProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DocumentArchiveProjectProjectPost bs e t a upload file to project document archive
*/
func (a *Client) DocumentArchiveProjectProjectPost(params *DocumentArchiveProjectProjectPostParams, authInfo runtime.ClientAuthInfoWriter) (*DocumentArchiveProjectProjectPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDocumentArchiveProjectProjectPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DocumentArchiveProject_projectPost",
		Method:             "POST",
		PathPattern:        "/documentArchive/project/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DocumentArchiveProjectProjectPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DocumentArchiveProjectProjectPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DocumentArchiveProject_projectPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DocumentArchiveProspectGetProspect bs e t a find documents archived associated with prospect object type
*/
func (a *Client) DocumentArchiveProspectGetProspect(params *DocumentArchiveProspectGetProspectParams, authInfo runtime.ClientAuthInfoWriter) (*DocumentArchiveProspectGetProspectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDocumentArchiveProspectGetProspectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DocumentArchiveProspect_getProspect",
		Method:             "GET",
		PathPattern:        "/documentArchive/prospect/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DocumentArchiveProspectGetProspectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DocumentArchiveProspectGetProspectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DocumentArchiveProspect_getProspect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DocumentArchiveProspectProspectPost bs e t a upload file to prospect document archive
*/
func (a *Client) DocumentArchiveProspectProspectPost(params *DocumentArchiveProspectProspectPostParams, authInfo runtime.ClientAuthInfoWriter) (*DocumentArchiveProspectProspectPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDocumentArchiveProspectProspectPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DocumentArchiveProspect_prospectPost",
		Method:             "POST",
		PathPattern:        "/documentArchive/prospect/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DocumentArchiveProspectProspectPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DocumentArchiveProspectProspectPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DocumentArchiveProspect_prospectPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DocumentArchiveReceptionReceptionPost bs e t a upload a file to the document archive reception send as multipart form
*/
func (a *Client) DocumentArchiveReceptionReceptionPost(params *DocumentArchiveReceptionReceptionPostParams, authInfo runtime.ClientAuthInfoWriter) (*DocumentArchiveReceptionReceptionPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDocumentArchiveReceptionReceptionPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DocumentArchiveReception_receptionPost",
		Method:             "POST",
		PathPattern:        "/documentArchive/reception",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DocumentArchiveReceptionReceptionPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DocumentArchiveReceptionReceptionPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DocumentArchiveReception_receptionPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DocumentArchiveSupplierGetSupplier bs e t a find documents archived associated with supplier object type
*/
func (a *Client) DocumentArchiveSupplierGetSupplier(params *DocumentArchiveSupplierGetSupplierParams, authInfo runtime.ClientAuthInfoWriter) (*DocumentArchiveSupplierGetSupplierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDocumentArchiveSupplierGetSupplierParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DocumentArchiveSupplier_getSupplier",
		Method:             "GET",
		PathPattern:        "/documentArchive/supplier/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DocumentArchiveSupplierGetSupplierReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DocumentArchiveSupplierGetSupplierOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DocumentArchiveSupplier_getSupplier: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DocumentArchiveSupplierSupplierPost bs e t a upload file to supplier document archive
*/
func (a *Client) DocumentArchiveSupplierSupplierPost(params *DocumentArchiveSupplierSupplierPostParams, authInfo runtime.ClientAuthInfoWriter) (*DocumentArchiveSupplierSupplierPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDocumentArchiveSupplierSupplierPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DocumentArchiveSupplier_supplierPost",
		Method:             "POST",
		PathPattern:        "/documentArchive/supplier/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DocumentArchiveSupplierSupplierPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DocumentArchiveSupplierSupplierPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DocumentArchiveSupplier_supplierPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DocumentArchiveDelete bs e t a delete document archive
*/
func (a *Client) DocumentArchiveDelete(params *DocumentArchiveDeleteParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDocumentArchiveDeleteParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DocumentArchive_delete",
		Method:             "DELETE",
		PathPattern:        "/documentArchive/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DocumentArchiveDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  DocumentArchivePut bs e t a update document archive
*/
func (a *Client) DocumentArchivePut(params *DocumentArchivePutParams, authInfo runtime.ClientAuthInfoWriter) (*DocumentArchivePutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDocumentArchivePutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DocumentArchive_put",
		Method:             "PUT",
		PathPattern:        "/documentArchive/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DocumentArchivePutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DocumentArchivePutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DocumentArchive_put: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
