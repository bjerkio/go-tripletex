// Copyright 2020 Bjerk AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package statement

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new statement API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for statement API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	BankStatementDelete(params *BankStatementDeleteParams, authInfo runtime.ClientAuthInfoWriter) error

	BankStatementGet(params *BankStatementGetParams, authInfo runtime.ClientAuthInfoWriter) (*BankStatementGetOK, error)

	BankStatementImportImportBankStatement(params *BankStatementImportImportBankStatementParams, authInfo runtime.ClientAuthInfoWriter) (*BankStatementImportImportBankStatementCreated, error)

	BankStatementSearch(params *BankStatementSearchParams, authInfo runtime.ClientAuthInfoWriter) (*BankStatementSearchOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  BankStatementDelete bs e t a delete bank statement by ID
*/
func (a *Client) BankStatementDelete(params *BankStatementDeleteParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBankStatementDeleteParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BankStatementDelete",
		Method:             "DELETE",
		PathPattern:        "/bank/statement/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BankStatementDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  BankStatementGet bs e t a get bank statement
*/
func (a *Client) BankStatementGet(params *BankStatementGetParams, authInfo runtime.ClientAuthInfoWriter) (*BankStatementGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBankStatementGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BankStatementGet",
		Method:             "GET",
		PathPattern:        "/bank/statement/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BankStatementGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BankStatementGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BankStatementGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BankStatementImportImportBankStatement bs e t a upload bank statement file
*/
func (a *Client) BankStatementImportImportBankStatement(params *BankStatementImportImportBankStatementParams, authInfo runtime.ClientAuthInfoWriter) (*BankStatementImportImportBankStatementCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBankStatementImportImportBankStatementParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BankStatementImportImportBankStatement",
		Method:             "POST",
		PathPattern:        "/bank/statement/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BankStatementImportImportBankStatementReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BankStatementImportImportBankStatementCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BankStatementImportImportBankStatement: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BankStatementSearch bs e t a find bank statement corresponding with sent data
*/
func (a *Client) BankStatementSearch(params *BankStatementSearchParams, authInfo runtime.ClientAuthInfoWriter) (*BankStatementSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBankStatementSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BankStatementSearch",
		Method:             "GET",
		PathPattern:        "/bank/statement",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BankStatementSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BankStatementSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BankStatementSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
