// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LedgerAccount ledger account
//
// swagger:model LedgerAccount
type LedgerAccount struct {

	// account
	// Read Only: true
	Account *Account `json:"account,omitempty"`

	// closing balance
	// Read Only: true
	ClosingBalance float64 `json:"closingBalance,omitempty"`

	// closing balance currency
	// Read Only: true
	ClosingBalanceCurrency float64 `json:"closingBalanceCurrency,omitempty"`

	// currency
	// Read Only: true
	Currency *Currency `json:"currency,omitempty"`

	// opening balance
	// Read Only: true
	OpeningBalance float64 `json:"openingBalance,omitempty"`

	// opening balance currency
	// Read Only: true
	OpeningBalanceCurrency float64 `json:"openingBalanceCurrency,omitempty"`

	// Link to postings on this account.
	// Read Only: true
	Postings []*Posting `json:"postings"`

	// sum amount
	// Read Only: true
	SumAmount float64 `json:"sumAmount,omitempty"`

	// sum amount currency
	// Read Only: true
	SumAmountCurrency float64 `json:"sumAmountCurrency,omitempty"`
}

// Validate validates this ledger account
func (m *LedgerAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LedgerAccount) validateAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.Account) { // not required
		return nil
	}

	if m.Account != nil {
		if err := m.Account.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("account")
			}
			return err
		}
	}

	return nil
}

func (m *LedgerAccount) validateCurrency(formats strfmt.Registry) error {

	if swag.IsZero(m.Currency) { // not required
		return nil
	}

	if m.Currency != nil {
		if err := m.Currency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currency")
			}
			return err
		}
	}

	return nil
}

func (m *LedgerAccount) validatePostings(formats strfmt.Registry) error {

	if swag.IsZero(m.Postings) { // not required
		return nil
	}

	for i := 0; i < len(m.Postings); i++ {
		if swag.IsZero(m.Postings[i]) { // not required
			continue
		}

		if m.Postings[i] != nil {
			if err := m.Postings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LedgerAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LedgerAccount) UnmarshalBinary(b []byte) error {
	var res LedgerAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
