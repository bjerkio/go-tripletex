// Copyright 2020 Bjerk AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MaritimeEmployment maritime employment
//
// swagger:model MaritimeEmployment
type MaritimeEmployment struct {

	// Define the ship register. NIS: Norwegian International Ship Register, NOR: Norwegian Ordinary Ship Register, FOREIGN: Foreign Ship Register.
	// Enum: [NIS NOR FOREIGN]
	ShipRegister string `json:"shipRegister,omitempty"`

	// Define the ship type.
	// Enum: [OTHER DRILLING_PLATFORM TOURIST]
	ShipType string `json:"shipType,omitempty"`

	// Define the trade area.
	// Enum: [DOMESTIC FOREIGN]
	TradeArea string `json:"tradeArea,omitempty"`
}

// Validate validates this maritime employment
func (m *MaritimeEmployment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateShipRegister(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTradeArea(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var maritimeEmploymentTypeShipRegisterPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NIS","NOR","FOREIGN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		maritimeEmploymentTypeShipRegisterPropEnum = append(maritimeEmploymentTypeShipRegisterPropEnum, v)
	}
}

const (

	// MaritimeEmploymentShipRegisterNIS captures enum value "NIS"
	MaritimeEmploymentShipRegisterNIS string = "NIS"

	// MaritimeEmploymentShipRegisterNOR captures enum value "NOR"
	MaritimeEmploymentShipRegisterNOR string = "NOR"

	// MaritimeEmploymentShipRegisterFOREIGN captures enum value "FOREIGN"
	MaritimeEmploymentShipRegisterFOREIGN string = "FOREIGN"
)

// prop value enum
func (m *MaritimeEmployment) validateShipRegisterEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, maritimeEmploymentTypeShipRegisterPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MaritimeEmployment) validateShipRegister(formats strfmt.Registry) error {

	if swag.IsZero(m.ShipRegister) { // not required
		return nil
	}

	// value enum
	if err := m.validateShipRegisterEnum("shipRegister", "body", m.ShipRegister); err != nil {
		return err
	}

	return nil
}

var maritimeEmploymentTypeShipTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OTHER","DRILLING_PLATFORM","TOURIST"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		maritimeEmploymentTypeShipTypePropEnum = append(maritimeEmploymentTypeShipTypePropEnum, v)
	}
}

const (

	// MaritimeEmploymentShipTypeOTHER captures enum value "OTHER"
	MaritimeEmploymentShipTypeOTHER string = "OTHER"

	// MaritimeEmploymentShipTypeDRILLINGPLATFORM captures enum value "DRILLING_PLATFORM"
	MaritimeEmploymentShipTypeDRILLINGPLATFORM string = "DRILLING_PLATFORM"

	// MaritimeEmploymentShipTypeTOURIST captures enum value "TOURIST"
	MaritimeEmploymentShipTypeTOURIST string = "TOURIST"
)

// prop value enum
func (m *MaritimeEmployment) validateShipTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, maritimeEmploymentTypeShipTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MaritimeEmployment) validateShipType(formats strfmt.Registry) error {

	if swag.IsZero(m.ShipType) { // not required
		return nil
	}

	// value enum
	if err := m.validateShipTypeEnum("shipType", "body", m.ShipType); err != nil {
		return err
	}

	return nil
}

var maritimeEmploymentTypeTradeAreaPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DOMESTIC","FOREIGN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		maritimeEmploymentTypeTradeAreaPropEnum = append(maritimeEmploymentTypeTradeAreaPropEnum, v)
	}
}

const (

	// MaritimeEmploymentTradeAreaDOMESTIC captures enum value "DOMESTIC"
	MaritimeEmploymentTradeAreaDOMESTIC string = "DOMESTIC"

	// MaritimeEmploymentTradeAreaFOREIGN captures enum value "FOREIGN"
	MaritimeEmploymentTradeAreaFOREIGN string = "FOREIGN"
)

// prop value enum
func (m *MaritimeEmployment) validateTradeAreaEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, maritimeEmploymentTypeTradeAreaPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MaritimeEmployment) validateTradeArea(formats strfmt.Registry) error {

	if swag.IsZero(m.TradeArea) { // not required
		return nil
	}

	// value enum
	if err := m.validateTradeAreaEnum("tradeArea", "body", m.TradeArea); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MaritimeEmployment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MaritimeEmployment) UnmarshalBinary(b []byte) error {
	var res MaritimeEmployment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
