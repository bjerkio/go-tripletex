// Code generated by go-swagger; DO NOT EDIT.

package reconciliation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new reconciliation API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for reconciliation API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	BankReconciliationAdjustmentAdjustment(params *BankReconciliationAdjustmentAdjustmentParams, authInfo runtime.ClientAuthInfoWriter) (*BankReconciliationAdjustmentAdjustmentOK, error)

	BankReconciliationDelete(params *BankReconciliationDeleteParams, authInfo runtime.ClientAuthInfoWriter) error

	BankReconciliationGet(params *BankReconciliationGetParams, authInfo runtime.ClientAuthInfoWriter) (*BankReconciliationGetOK, error)

	BankReconciliationLastClosedLastClosed(params *BankReconciliationLastClosedLastClosedParams, authInfo runtime.ClientAuthInfoWriter) (*BankReconciliationLastClosedLastClosedOK, error)

	BankReconciliationPost(params *BankReconciliationPostParams, authInfo runtime.ClientAuthInfoWriter) (*BankReconciliationPostCreated, error)

	BankReconciliationPut(params *BankReconciliationPutParams, authInfo runtime.ClientAuthInfoWriter) (*BankReconciliationPutOK, error)

	BankReconciliationSearch(params *BankReconciliationSearchParams, authInfo runtime.ClientAuthInfoWriter) (*BankReconciliationSearchOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  BankReconciliationAdjustmentAdjustment bs e t a add an adjustment to reconciliation by ID
*/
func (a *Client) BankReconciliationAdjustmentAdjustment(params *BankReconciliationAdjustmentAdjustmentParams, authInfo runtime.ClientAuthInfoWriter) (*BankReconciliationAdjustmentAdjustmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBankReconciliationAdjustmentAdjustmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BankReconciliationAdjustmentAdjustment",
		Method:             "PUT",
		PathPattern:        "/bank/reconciliation/{id}/:adjustment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BankReconciliationAdjustmentAdjustmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BankReconciliationAdjustmentAdjustmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BankReconciliationAdjustmentAdjustment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BankReconciliationDelete bs e t a delete bank reconciliation by ID
*/
func (a *Client) BankReconciliationDelete(params *BankReconciliationDeleteParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBankReconciliationDeleteParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BankReconciliationDelete",
		Method:             "DELETE",
		PathPattern:        "/bank/reconciliation/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BankReconciliationDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  BankReconciliationGet bs e t a get bank reconciliation
*/
func (a *Client) BankReconciliationGet(params *BankReconciliationGetParams, authInfo runtime.ClientAuthInfoWriter) (*BankReconciliationGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBankReconciliationGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BankReconciliationGet",
		Method:             "GET",
		PathPattern:        "/bank/reconciliation/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BankReconciliationGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BankReconciliationGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BankReconciliationGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BankReconciliationLastClosedLastClosed bs e t a get last closed reconciliation by account ID
*/
func (a *Client) BankReconciliationLastClosedLastClosed(params *BankReconciliationLastClosedLastClosedParams, authInfo runtime.ClientAuthInfoWriter) (*BankReconciliationLastClosedLastClosedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBankReconciliationLastClosedLastClosedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BankReconciliationLastClosedLastClosed",
		Method:             "GET",
		PathPattern:        "/bank/reconciliation/>lastClosed",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BankReconciliationLastClosedLastClosedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BankReconciliationLastClosedLastClosedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BankReconciliationLastClosedLastClosed: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BankReconciliationPost bs e t a post a bank reconciliation
*/
func (a *Client) BankReconciliationPost(params *BankReconciliationPostParams, authInfo runtime.ClientAuthInfoWriter) (*BankReconciliationPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBankReconciliationPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BankReconciliationPost",
		Method:             "POST",
		PathPattern:        "/bank/reconciliation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BankReconciliationPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BankReconciliationPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BankReconciliationPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BankReconciliationPut bs e t a update a bank reconciliation
*/
func (a *Client) BankReconciliationPut(params *BankReconciliationPutParams, authInfo runtime.ClientAuthInfoWriter) (*BankReconciliationPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBankReconciliationPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BankReconciliationPut",
		Method:             "PUT",
		PathPattern:        "/bank/reconciliation/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BankReconciliationPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BankReconciliationPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BankReconciliationPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BankReconciliationSearch bs e t a find bank reconciliation corresponding with sent data
*/
func (a *Client) BankReconciliationSearch(params *BankReconciliationSearchParams, authInfo runtime.ClientAuthInfoWriter) (*BankReconciliationSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBankReconciliationSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BankReconciliationSearch",
		Method:             "GET",
		PathPattern:        "/bank/reconciliation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BankReconciliationSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BankReconciliationSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BankReconciliationSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
