// Copyright 2020 Bjerk AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package entry

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new entry API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for entry API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	TimesheetEntryDelete(params *TimesheetEntryDeleteParams, authInfo runtime.ClientAuthInfoWriter) error

	TimesheetEntryGet(params *TimesheetEntryGetParams, authInfo runtime.ClientAuthInfoWriter) (*TimesheetEntryGetOK, error)

	TimesheetEntryListPostList(params *TimesheetEntryListPostListParams, authInfo runtime.ClientAuthInfoWriter) (*TimesheetEntryListPostListCreated, error)

	TimesheetEntryListPutList(params *TimesheetEntryListPutListParams, authInfo runtime.ClientAuthInfoWriter) (*TimesheetEntryListPutListOK, error)

	TimesheetEntryPost(params *TimesheetEntryPostParams, authInfo runtime.ClientAuthInfoWriter) (*TimesheetEntryPostCreated, error)

	TimesheetEntryPut(params *TimesheetEntryPutParams, authInfo runtime.ClientAuthInfoWriter) (*TimesheetEntryPutOK, error)

	TimesheetEntryRecentActivitiesGetRecentActivities(params *TimesheetEntryRecentActivitiesGetRecentActivitiesParams, authInfo runtime.ClientAuthInfoWriter) (*TimesheetEntryRecentActivitiesGetRecentActivitiesOK, error)

	TimesheetEntryRecentProjectsGetRecentProjects(params *TimesheetEntryRecentProjectsGetRecentProjectsParams, authInfo runtime.ClientAuthInfoWriter) (*TimesheetEntryRecentProjectsGetRecentProjectsOK, error)

	TimesheetEntrySearch(params *TimesheetEntrySearchParams, authInfo runtime.ClientAuthInfoWriter) (*TimesheetEntrySearchOK, error)

	TimesheetEntryTotalHoursGetTotalHours(params *TimesheetEntryTotalHoursGetTotalHoursParams, authInfo runtime.ClientAuthInfoWriter) (*TimesheetEntryTotalHoursGetTotalHoursOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  TimesheetEntryDelete deletes timesheet entry by ID
*/
func (a *Client) TimesheetEntryDelete(params *TimesheetEntryDeleteParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTimesheetEntryDeleteParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TimesheetEntryDelete",
		Method:             "DELETE",
		PathPattern:        "/timesheet/entry/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TimesheetEntryDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  TimesheetEntryGet finds timesheet entry by ID
*/
func (a *Client) TimesheetEntryGet(params *TimesheetEntryGetParams, authInfo runtime.ClientAuthInfoWriter) (*TimesheetEntryGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTimesheetEntryGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TimesheetEntryGet",
		Method:             "GET",
		PathPattern:        "/timesheet/entry/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TimesheetEntryGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimesheetEntryGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TimesheetEntryGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TimesheetEntryListPostList adds new timesheet entry multiple objects for several users can be sent in the same request
*/
func (a *Client) TimesheetEntryListPostList(params *TimesheetEntryListPostListParams, authInfo runtime.ClientAuthInfoWriter) (*TimesheetEntryListPostListCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTimesheetEntryListPostListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TimesheetEntryListPostList",
		Method:             "POST",
		PathPattern:        "/timesheet/entry/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TimesheetEntryListPostListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimesheetEntryListPostListCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TimesheetEntryListPostList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TimesheetEntryListPutList updates timesheet entry multiple objects for different users can be sent in the same request
*/
func (a *Client) TimesheetEntryListPutList(params *TimesheetEntryListPutListParams, authInfo runtime.ClientAuthInfoWriter) (*TimesheetEntryListPutListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTimesheetEntryListPutListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TimesheetEntryListPutList",
		Method:             "PUT",
		PathPattern:        "/timesheet/entry/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TimesheetEntryListPutListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimesheetEntryListPutListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TimesheetEntryListPutList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TimesheetEntryPost adds new timesheet entry only one entry per employee date activity project combination is supported
*/
func (a *Client) TimesheetEntryPost(params *TimesheetEntryPostParams, authInfo runtime.ClientAuthInfoWriter) (*TimesheetEntryPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTimesheetEntryPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TimesheetEntryPost",
		Method:             "POST",
		PathPattern:        "/timesheet/entry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TimesheetEntryPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimesheetEntryPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TimesheetEntryPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TimesheetEntryPut updates timesheet entry by ID note timesheet entry object fields which are present but not set or set to 0 will be nulled
*/
func (a *Client) TimesheetEntryPut(params *TimesheetEntryPutParams, authInfo runtime.ClientAuthInfoWriter) (*TimesheetEntryPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTimesheetEntryPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TimesheetEntryPut",
		Method:             "PUT",
		PathPattern:        "/timesheet/entry/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TimesheetEntryPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimesheetEntryPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TimesheetEntryPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TimesheetEntryRecentActivitiesGetRecentActivities finds recently used timesheet activities
*/
func (a *Client) TimesheetEntryRecentActivitiesGetRecentActivities(params *TimesheetEntryRecentActivitiesGetRecentActivitiesParams, authInfo runtime.ClientAuthInfoWriter) (*TimesheetEntryRecentActivitiesGetRecentActivitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTimesheetEntryRecentActivitiesGetRecentActivitiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TimesheetEntryRecentActivitiesGetRecentActivities",
		Method:             "GET",
		PathPattern:        "/timesheet/entry/>recentActivities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TimesheetEntryRecentActivitiesGetRecentActivitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimesheetEntryRecentActivitiesGetRecentActivitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TimesheetEntryRecentActivitiesGetRecentActivities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TimesheetEntryRecentProjectsGetRecentProjects finds projects with recent activities timesheet entry registered
*/
func (a *Client) TimesheetEntryRecentProjectsGetRecentProjects(params *TimesheetEntryRecentProjectsGetRecentProjectsParams, authInfo runtime.ClientAuthInfoWriter) (*TimesheetEntryRecentProjectsGetRecentProjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTimesheetEntryRecentProjectsGetRecentProjectsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TimesheetEntryRecentProjectsGetRecentProjects",
		Method:             "GET",
		PathPattern:        "/timesheet/entry/>recentProjects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TimesheetEntryRecentProjectsGetRecentProjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimesheetEntryRecentProjectsGetRecentProjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TimesheetEntryRecentProjectsGetRecentProjects: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TimesheetEntrySearch finds timesheet entry corresponding with sent data
*/
func (a *Client) TimesheetEntrySearch(params *TimesheetEntrySearchParams, authInfo runtime.ClientAuthInfoWriter) (*TimesheetEntrySearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTimesheetEntrySearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TimesheetEntrySearch",
		Method:             "GET",
		PathPattern:        "/timesheet/entry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TimesheetEntrySearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimesheetEntrySearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TimesheetEntrySearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TimesheetEntryTotalHoursGetTotalHours finds total hours registered on an employee in a specific period
*/
func (a *Client) TimesheetEntryTotalHoursGetTotalHours(params *TimesheetEntryTotalHoursGetTotalHoursParams, authInfo runtime.ClientAuthInfoWriter) (*TimesheetEntryTotalHoursGetTotalHoursOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTimesheetEntryTotalHoursGetTotalHoursParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TimesheetEntryTotalHoursGetTotalHours",
		Method:             "GET",
		PathPattern:        "/timesheet/entry/>totalHours",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TimesheetEntryTotalHoursGetTotalHoursReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimesheetEntryTotalHoursGetTotalHoursOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TimesheetEntryTotalHoursGetTotalHours: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
