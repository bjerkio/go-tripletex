// Code generated by go-swagger; DO NOT EDIT.

package order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewOrderInvoiceMultipleOrdersInvoiceMultipleOrdersParams creates a new OrderInvoiceMultipleOrdersInvoiceMultipleOrdersParams object
// with the default values initialized.
func NewOrderInvoiceMultipleOrdersInvoiceMultipleOrdersParams() *OrderInvoiceMultipleOrdersInvoiceMultipleOrdersParams {
	var ()
	return &OrderInvoiceMultipleOrdersInvoiceMultipleOrdersParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewOrderInvoiceMultipleOrdersInvoiceMultipleOrdersParamsWithTimeout creates a new OrderInvoiceMultipleOrdersInvoiceMultipleOrdersParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewOrderInvoiceMultipleOrdersInvoiceMultipleOrdersParamsWithTimeout(timeout time.Duration) *OrderInvoiceMultipleOrdersInvoiceMultipleOrdersParams {
	var ()
	return &OrderInvoiceMultipleOrdersInvoiceMultipleOrdersParams{

		timeout: timeout,
	}
}

// NewOrderInvoiceMultipleOrdersInvoiceMultipleOrdersParamsWithContext creates a new OrderInvoiceMultipleOrdersInvoiceMultipleOrdersParams object
// with the default values initialized, and the ability to set a context for a request
func NewOrderInvoiceMultipleOrdersInvoiceMultipleOrdersParamsWithContext(ctx context.Context) *OrderInvoiceMultipleOrdersInvoiceMultipleOrdersParams {
	var ()
	return &OrderInvoiceMultipleOrdersInvoiceMultipleOrdersParams{

		Context: ctx,
	}
}

// NewOrderInvoiceMultipleOrdersInvoiceMultipleOrdersParamsWithHTTPClient creates a new OrderInvoiceMultipleOrdersInvoiceMultipleOrdersParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewOrderInvoiceMultipleOrdersInvoiceMultipleOrdersParamsWithHTTPClient(client *http.Client) *OrderInvoiceMultipleOrdersInvoiceMultipleOrdersParams {
	var ()
	return &OrderInvoiceMultipleOrdersInvoiceMultipleOrdersParams{
		HTTPClient: client,
	}
}

/*OrderInvoiceMultipleOrdersInvoiceMultipleOrdersParams contains all the parameters to send to the API endpoint
for the order invoice multiple orders invoice multiple orders operation typically these are written to a http.Request
*/
type OrderInvoiceMultipleOrdersInvoiceMultipleOrdersParams struct {

	/*ID
	  List of Order IDs - to the same customer, separated by comma.

	*/
	ID string
	/*InvoiceDate
	  The invoice date

	*/
	InvoiceDate string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the order invoice multiple orders invoice multiple orders params
func (o *OrderInvoiceMultipleOrdersInvoiceMultipleOrdersParams) WithTimeout(timeout time.Duration) *OrderInvoiceMultipleOrdersInvoiceMultipleOrdersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the order invoice multiple orders invoice multiple orders params
func (o *OrderInvoiceMultipleOrdersInvoiceMultipleOrdersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the order invoice multiple orders invoice multiple orders params
func (o *OrderInvoiceMultipleOrdersInvoiceMultipleOrdersParams) WithContext(ctx context.Context) *OrderInvoiceMultipleOrdersInvoiceMultipleOrdersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the order invoice multiple orders invoice multiple orders params
func (o *OrderInvoiceMultipleOrdersInvoiceMultipleOrdersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the order invoice multiple orders invoice multiple orders params
func (o *OrderInvoiceMultipleOrdersInvoiceMultipleOrdersParams) WithHTTPClient(client *http.Client) *OrderInvoiceMultipleOrdersInvoiceMultipleOrdersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the order invoice multiple orders invoice multiple orders params
func (o *OrderInvoiceMultipleOrdersInvoiceMultipleOrdersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the order invoice multiple orders invoice multiple orders params
func (o *OrderInvoiceMultipleOrdersInvoiceMultipleOrdersParams) WithID(id string) *OrderInvoiceMultipleOrdersInvoiceMultipleOrdersParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the order invoice multiple orders invoice multiple orders params
func (o *OrderInvoiceMultipleOrdersInvoiceMultipleOrdersParams) SetID(id string) {
	o.ID = id
}

// WithInvoiceDate adds the invoiceDate to the order invoice multiple orders invoice multiple orders params
func (o *OrderInvoiceMultipleOrdersInvoiceMultipleOrdersParams) WithInvoiceDate(invoiceDate string) *OrderInvoiceMultipleOrdersInvoiceMultipleOrdersParams {
	o.SetInvoiceDate(invoiceDate)
	return o
}

// SetInvoiceDate adds the invoiceDate to the order invoice multiple orders invoice multiple orders params
func (o *OrderInvoiceMultipleOrdersInvoiceMultipleOrdersParams) SetInvoiceDate(invoiceDate string) {
	o.InvoiceDate = invoiceDate
}

// WriteToRequest writes these params to a swagger request
func (o *OrderInvoiceMultipleOrdersInvoiceMultipleOrdersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param id
	qrID := o.ID
	qID := qrID
	if qID != "" {
		if err := r.SetQueryParam("id", qID); err != nil {
			return err
		}
	}

	// query param invoiceDate
	qrInvoiceDate := o.InvoiceDate
	qInvoiceDate := qrInvoiceDate
	if qInvoiceDate != "" {
		if err := r.SetQueryParam("invoiceDate", qInvoiceDate); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
