// Copyright 2020 Bjerk AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package settings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new settings API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for settings API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	SalarySettingsGet(params *SalarySettingsGetParams, authInfo runtime.ClientAuthInfoWriter) (*SalarySettingsGetOK, error)

	SalarySettingsPut(params *SalarySettingsPutParams, authInfo runtime.ClientAuthInfoWriter) (*SalarySettingsPutOK, error)

	TimesheetSettingsGet(params *TimesheetSettingsGetParams, authInfo runtime.ClientAuthInfoWriter) (*TimesheetSettingsGetOK, error)

	TravelExpenseSettingsGet(params *TravelExpenseSettingsGetParams, authInfo runtime.ClientAuthInfoWriter) (*TravelExpenseSettingsGetOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  SalarySettingsGet bs e t a get salary settings of logged in company
*/
func (a *Client) SalarySettingsGet(params *SalarySettingsGetParams, authInfo runtime.ClientAuthInfoWriter) (*SalarySettingsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalarySettingsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SalarySettingsGet",
		Method:             "GET",
		PathPattern:        "/salary/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SalarySettingsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SalarySettingsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SalarySettingsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SalarySettingsPut bs e t a update settings of logged in company
*/
func (a *Client) SalarySettingsPut(params *SalarySettingsPutParams, authInfo runtime.ClientAuthInfoWriter) (*SalarySettingsPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSalarySettingsPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SalarySettingsPut",
		Method:             "PUT",
		PathPattern:        "/salary/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SalarySettingsPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SalarySettingsPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SalarySettingsPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TimesheetSettingsGet bs e t a get timesheet settings of logged in company
*/
func (a *Client) TimesheetSettingsGet(params *TimesheetSettingsGetParams, authInfo runtime.ClientAuthInfoWriter) (*TimesheetSettingsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTimesheetSettingsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TimesheetSettingsGet",
		Method:             "GET",
		PathPattern:        "/timesheet/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TimesheetSettingsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimesheetSettingsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TimesheetSettingsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TravelExpenseSettingsGet bs e t a get travel expense settings of logged in company
*/
func (a *Client) TravelExpenseSettingsGet(params *TravelExpenseSettingsGetParams, authInfo runtime.ClientAuthInfoWriter) (*TravelExpenseSettingsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTravelExpenseSettingsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TravelExpenseSettingsGet",
		Method:             "GET",
		PathPattern:        "/travelExpense/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TravelExpenseSettingsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TravelExpenseSettingsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TravelExpenseSettingsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
