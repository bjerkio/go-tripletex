// Code generated by go-swagger; DO NOT EDIT.

package entitlement

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new entitlement API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for entitlement API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	EmployeeEntitlementClientClient(params *EmployeeEntitlementClientClientParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeEntitlementClientClientOK, error)

	EmployeeEntitlementGrantClientEntitlementsByTemplateGrantClientEntitlementsByTemplate(params *EmployeeEntitlementGrantClientEntitlementsByTemplateGrantClientEntitlementsByTemplateParams, authInfo runtime.ClientAuthInfoWriter) error

	EmployeeEntitlementGrantEntitlementsByTemplateGrantEntitlementsByTemplate(params *EmployeeEntitlementGrantEntitlementsByTemplateGrantEntitlementsByTemplateParams, authInfo runtime.ClientAuthInfoWriter) error

	EmployeeEntitlementGet(params *EmployeeEntitlementGetParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeEntitlementGetOK, error)

	EmployeeEntitlementSearch(params *EmployeeEntitlementSearchParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeEntitlementSearchOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  EmployeeEntitlementClientClient bs e t a find all entitlements at client for user
*/
func (a *Client) EmployeeEntitlementClientClient(params *EmployeeEntitlementClientClientParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeEntitlementClientClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeeEntitlementClientClientParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeeEntitlementClient_client",
		Method:             "GET",
		PathPattern:        "/employee/entitlement/client",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmployeeEntitlementClientClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmployeeEntitlementClientClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmployeeEntitlementClient_client: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EmployeeEntitlementGrantClientEntitlementsByTemplateGrantClientEntitlementsByTemplate bs e t a update employee entitlements in client account
*/
func (a *Client) EmployeeEntitlementGrantClientEntitlementsByTemplateGrantClientEntitlementsByTemplate(params *EmployeeEntitlementGrantClientEntitlementsByTemplateGrantClientEntitlementsByTemplateParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeeEntitlementGrantClientEntitlementsByTemplateGrantClientEntitlementsByTemplateParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeeEntitlementGrantClientEntitlementsByTemplate_grantClientEntitlementsByTemplate",
		Method:             "PUT",
		PathPattern:        "/employee/entitlement/:grantClientEntitlementsByTemplate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmployeeEntitlementGrantClientEntitlementsByTemplateGrantClientEntitlementsByTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  EmployeeEntitlementGrantEntitlementsByTemplateGrantEntitlementsByTemplate bs e t a update employee entitlements

  The user will only receive the entitlements which are possible with the registered user type
*/
func (a *Client) EmployeeEntitlementGrantEntitlementsByTemplateGrantEntitlementsByTemplate(params *EmployeeEntitlementGrantEntitlementsByTemplateGrantEntitlementsByTemplateParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeeEntitlementGrantEntitlementsByTemplateGrantEntitlementsByTemplateParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeeEntitlementGrantEntitlementsByTemplate_grantEntitlementsByTemplate",
		Method:             "PUT",
		PathPattern:        "/employee/entitlement/:grantEntitlementsByTemplate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmployeeEntitlementGrantEntitlementsByTemplateGrantEntitlementsByTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  EmployeeEntitlementGet gets entitlement by ID
*/
func (a *Client) EmployeeEntitlementGet(params *EmployeeEntitlementGetParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeEntitlementGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeeEntitlementGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeeEntitlement_get",
		Method:             "GET",
		PathPattern:        "/employee/entitlement/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmployeeEntitlementGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmployeeEntitlementGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmployeeEntitlement_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EmployeeEntitlementSearch finds all entitlements for user
*/
func (a *Client) EmployeeEntitlementSearch(params *EmployeeEntitlementSearchParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeEntitlementSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeeEntitlementSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeeEntitlement_search",
		Method:             "GET",
		PathPattern:        "/employee/entitlement",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmployeeEntitlementSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmployeeEntitlementSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmployeeEntitlement_search: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
