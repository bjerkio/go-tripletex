// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new customer API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for customer API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CustomerGet(params *CustomerGetParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerGetOK, error)

	CustomerListPostList(params *CustomerListPostListParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerListPostListCreated, error)

	CustomerListPutList(params *CustomerListPutListParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerListPutListOK, error)

	CustomerPost(params *CustomerPostParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerPostCreated, error)

	CustomerPut(params *CustomerPutParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerPutOK, error)

	CustomerSearch(params *CustomerSearchParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerSearchOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CustomerGet gets customer by ID
*/
func (a *Client) CustomerGet(params *CustomerGetParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomerGet",
		Method:             "GET",
		PathPattern:        "/customer/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomerGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CustomerListPostList bs e t a create multiple customers related supplier addresses may also be created
*/
func (a *Client) CustomerListPostList(params *CustomerListPostListParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerListPostListCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerListPostListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomerListPostList",
		Method:             "POST",
		PathPattern:        "/customer/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerListPostListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerListPostListCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomerListPostList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CustomerListPutList bs e t a update multiple customers addresses can also be updated
*/
func (a *Client) CustomerListPutList(params *CustomerListPutListParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerListPutListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerListPutListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomerListPutList",
		Method:             "PUT",
		PathPattern:        "/customer/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerListPutListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerListPutListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomerListPutList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CustomerPost creates customer related customer addresses may also be created
*/
func (a *Client) CustomerPost(params *CustomerPostParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomerPost",
		Method:             "POST",
		PathPattern:        "/customer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomerPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CustomerPut updates customer
*/
func (a *Client) CustomerPut(params *CustomerPutParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomerPut",
		Method:             "PUT",
		PathPattern:        "/customer/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomerPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CustomerSearch finds customers corresponding with sent data
*/
func (a *Client) CustomerSearch(params *CustomerSearchParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomerSearch",
		Method:             "GET",
		PathPattern:        "/customer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomerSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
