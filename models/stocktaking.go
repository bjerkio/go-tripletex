// Copyright 2020 Bjerk AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Stocktaking stocktaking
//
// swagger:model Stocktaking
type Stocktaking struct {

	// changes
	// Read Only: true
	Changes []*Change `json:"changes"`

	// comment
	Comment string `json:"comment,omitempty"`

	// date
	// Required: true
	Date *string `json:"date"`

	// id
	ID int32 `json:"id,omitempty"`

	// The inventory this applies for
	// Required: true
	Inventory *Inventory `json:"inventory"`

	// is completed
	IsCompleted *bool `json:"isCompleted,omitempty"`

	// number
	// Read Only: true
	Number int32 `json:"number,omitempty"`

	// Define the type of stoctaking.<br>ALL_PRODUCTS_WITH_INVENTORIES: Create a stocktaking for all products with inventories.<br>INCLUDE_PRODUCTS: Create a stocktaking which includes all products.<br>NO_PRODUCTS: Create a stocktaking without products.<br>If not specified, the value 'ALL_PRODUCTS_WITH_INVENTORIES' is used.
	// Required: true
	// Enum: [ALL_PRODUCTS_WITH_INVENTORIES INCLUDE_PRODUCTS NO_PRODUCTS]
	TypeOfStocktaking *string `json:"typeOfStocktaking"`

	// url
	// Read Only: true
	URL string `json:"url,omitempty"`

	// version
	Version int32 `json:"version,omitempty"`
}

// Validate validates this stocktaking
func (m *Stocktaking) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInventory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeOfStocktaking(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Stocktaking) validateChanges(formats strfmt.Registry) error {

	if swag.IsZero(m.Changes) { // not required
		return nil
	}

	for i := 0; i < len(m.Changes); i++ {
		if swag.IsZero(m.Changes[i]) { // not required
			continue
		}

		if m.Changes[i] != nil {
			if err := m.Changes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("changes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Stocktaking) validateDate(formats strfmt.Registry) error {

	if err := validate.Required("date", "body", m.Date); err != nil {
		return err
	}

	return nil
}

func (m *Stocktaking) validateInventory(formats strfmt.Registry) error {

	if err := validate.Required("inventory", "body", m.Inventory); err != nil {
		return err
	}

	if m.Inventory != nil {
		if err := m.Inventory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inventory")
			}
			return err
		}
	}

	return nil
}

var stocktakingTypeTypeOfStocktakingPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ALL_PRODUCTS_WITH_INVENTORIES","INCLUDE_PRODUCTS","NO_PRODUCTS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stocktakingTypeTypeOfStocktakingPropEnum = append(stocktakingTypeTypeOfStocktakingPropEnum, v)
	}
}

const (

	// StocktakingTypeOfStocktakingALLPRODUCTSWITHINVENTORIES captures enum value "ALL_PRODUCTS_WITH_INVENTORIES"
	StocktakingTypeOfStocktakingALLPRODUCTSWITHINVENTORIES string = "ALL_PRODUCTS_WITH_INVENTORIES"

	// StocktakingTypeOfStocktakingINCLUDEPRODUCTS captures enum value "INCLUDE_PRODUCTS"
	StocktakingTypeOfStocktakingINCLUDEPRODUCTS string = "INCLUDE_PRODUCTS"

	// StocktakingTypeOfStocktakingNOPRODUCTS captures enum value "NO_PRODUCTS"
	StocktakingTypeOfStocktakingNOPRODUCTS string = "NO_PRODUCTS"
)

// prop value enum
func (m *Stocktaking) validateTypeOfStocktakingEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, stocktakingTypeTypeOfStocktakingPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Stocktaking) validateTypeOfStocktaking(formats strfmt.Registry) error {

	if err := validate.Required("typeOfStocktaking", "body", m.TypeOfStocktaking); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeOfStocktakingEnum("typeOfStocktaking", "body", *m.TypeOfStocktaking); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Stocktaking) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Stocktaking) UnmarshalBinary(b []byte) error {
	var res Stocktaking
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
