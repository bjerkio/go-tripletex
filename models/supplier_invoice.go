// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SupplierInvoice supplier invoice
//
// swagger:model SupplierInvoice
type SupplierInvoice struct {

	// In the companyâ€™s currency, typically NOK. Is 0 if value is missing.
	// Read Only: true
	Amount float64 `json:"amount,omitempty"`

	// In the specified currency.
	// Read Only: true
	AmountCurrency float64 `json:"amountCurrency,omitempty"`

	// Amount excluding VAT (NOK). Is 0 if value is missing.
	// Read Only: true
	AmountExcludingVat float64 `json:"amountExcludingVat,omitempty"`

	// Amount excluding VAT in the specified currency. Is 0 if value is missing.
	// Read Only: true
	AmountExcludingVatCurrency float64 `json:"amountExcludingVatCurrency,omitempty"`

	// changes
	// Read Only: true
	Changes []*Change `json:"changes"`

	// currency
	// Read Only: true
	Currency *Currency `json:"currency,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// invoice date
	// Required: true
	InvoiceDate *string `json:"invoiceDate"`

	// invoice due date
	// Required: true
	InvoiceDueDate *string `json:"invoiceDueDate"`

	// If value is set to 0, the invoice number will be generated.
	// Minimum: 0
	InvoiceNumber *int32 `json:"invoiceNumber,omitempty"`

	// is credit note
	// Read Only: true
	IsCreditNote *bool `json:"isCreditNote,omitempty"`

	// KID or message
	KidOrReceiverReference string `json:"kidOrReceiverReference,omitempty"`

	// order lines
	// Read Only: true
	OrderLines []*OrderLine `json:"orderLines"`

	// payments
	// Read Only: true
	Payments []*Posting `json:"payments"`

	// The invoice supplier
	// Read Only: true
	Supplier *Supplier `json:"supplier,omitempty"`

	// url
	// Read Only: true
	URL string `json:"url,omitempty"`

	// version
	Version int32 `json:"version,omitempty"`

	// The invoice voucher.
	// Read Only: true
	Voucher *Voucher `json:"voucher,omitempty"`
}

// Validate validates this supplier invoice
func (m *SupplierInvoice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvoiceDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvoiceDueDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvoiceNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderLines(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupplier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVoucher(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SupplierInvoice) validateChanges(formats strfmt.Registry) error {

	if swag.IsZero(m.Changes) { // not required
		return nil
	}

	for i := 0; i < len(m.Changes); i++ {
		if swag.IsZero(m.Changes[i]) { // not required
			continue
		}

		if m.Changes[i] != nil {
			if err := m.Changes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("changes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SupplierInvoice) validateCurrency(formats strfmt.Registry) error {

	if swag.IsZero(m.Currency) { // not required
		return nil
	}

	if m.Currency != nil {
		if err := m.Currency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currency")
			}
			return err
		}
	}

	return nil
}

func (m *SupplierInvoice) validateInvoiceDate(formats strfmt.Registry) error {

	if err := validate.Required("invoiceDate", "body", m.InvoiceDate); err != nil {
		return err
	}

	return nil
}

func (m *SupplierInvoice) validateInvoiceDueDate(formats strfmt.Registry) error {

	if err := validate.Required("invoiceDueDate", "body", m.InvoiceDueDate); err != nil {
		return err
	}

	return nil
}

func (m *SupplierInvoice) validateInvoiceNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.InvoiceNumber) { // not required
		return nil
	}

	if err := validate.MinimumInt("invoiceNumber", "body", int64(*m.InvoiceNumber), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *SupplierInvoice) validateOrderLines(formats strfmt.Registry) error {

	if swag.IsZero(m.OrderLines) { // not required
		return nil
	}

	for i := 0; i < len(m.OrderLines); i++ {
		if swag.IsZero(m.OrderLines[i]) { // not required
			continue
		}

		if m.OrderLines[i] != nil {
			if err := m.OrderLines[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("orderLines" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SupplierInvoice) validatePayments(formats strfmt.Registry) error {

	if swag.IsZero(m.Payments) { // not required
		return nil
	}

	for i := 0; i < len(m.Payments); i++ {
		if swag.IsZero(m.Payments[i]) { // not required
			continue
		}

		if m.Payments[i] != nil {
			if err := m.Payments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("payments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SupplierInvoice) validateSupplier(formats strfmt.Registry) error {

	if swag.IsZero(m.Supplier) { // not required
		return nil
	}

	if m.Supplier != nil {
		if err := m.Supplier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("supplier")
			}
			return err
		}
	}

	return nil
}

func (m *SupplierInvoice) validateVoucher(formats strfmt.Registry) error {

	if swag.IsZero(m.Voucher) { // not required
		return nil
	}

	if m.Voucher != nil {
		if err := m.Voucher.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("voucher")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SupplierInvoice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SupplierInvoice) UnmarshalBinary(b []byte) error {
	var res SupplierInvoice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
