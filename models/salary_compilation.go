// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SalaryCompilation salary compilation
//
// swagger:model SalaryCompilation
type SalaryCompilation struct {

	// deductions
	// Read Only: true
	Deductions []*SalaryCompilationLine `json:"deductions"`

	// employee
	// Read Only: true
	Employee int32 `json:"employee,omitempty"`

	// expenses
	// Read Only: true
	Expenses []*SalaryCompilationLine `json:"expenses"`

	// vacation pay basis
	// Read Only: true
	VacationPayBasis float64 `json:"vacationPayBasis,omitempty"`

	// wages
	// Read Only: true
	Wages []*SalaryCompilationLine `json:"wages"`

	// year
	// Read Only: true
	Year int32 `json:"year,omitempty"`
}

// Validate validates this salary compilation
func (m *SalaryCompilation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeductions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpenses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SalaryCompilation) validateDeductions(formats strfmt.Registry) error {

	if swag.IsZero(m.Deductions) { // not required
		return nil
	}

	for i := 0; i < len(m.Deductions); i++ {
		if swag.IsZero(m.Deductions[i]) { // not required
			continue
		}

		if m.Deductions[i] != nil {
			if err := m.Deductions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deductions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SalaryCompilation) validateExpenses(formats strfmt.Registry) error {

	if swag.IsZero(m.Expenses) { // not required
		return nil
	}

	for i := 0; i < len(m.Expenses); i++ {
		if swag.IsZero(m.Expenses[i]) { // not required
			continue
		}

		if m.Expenses[i] != nil {
			if err := m.Expenses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("expenses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SalaryCompilation) validateWages(formats strfmt.Registry) error {

	if swag.IsZero(m.Wages) { // not required
		return nil
	}

	for i := 0; i < len(m.Wages); i++ {
		if swag.IsZero(m.Wages[i]) { // not required
			continue
		}

		if m.Wages[i] != nil {
			if err := m.Wages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("wages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SalaryCompilation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SalaryCompilation) UnmarshalBinary(b []byte) error {
	var res SalaryCompilation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
