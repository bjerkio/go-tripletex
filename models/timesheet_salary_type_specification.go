// Copyright 2020 Bjerk AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TimesheetSalaryTypeSpecification timesheet salary type specification
//
// swagger:model TimesheetSalaryTypeSpecification
type TimesheetSalaryTypeSpecification struct {

	// changes
	// Read Only: true
	Changes []*Change `json:"changes"`

	// count
	// Required: true
	Count *float64 `json:"count"`

	// date
	// Required: true
	Date *string `json:"date"`

	// description
	Description string `json:"description,omitempty"`

	// employee
	// Required: true
	Employee *Employee `json:"employee"`

	// id
	ID int32 `json:"id,omitempty"`

	// salary type
	// Required: true
	SalaryType *SalaryType `json:"salaryType"`

	// url
	// Read Only: true
	URL string `json:"url,omitempty"`

	// version
	Version int32 `json:"version,omitempty"`
}

// Validate validates this timesheet salary type specification
func (m *TimesheetSalaryTypeSpecification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmployee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSalaryType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimesheetSalaryTypeSpecification) validateChanges(formats strfmt.Registry) error {

	if swag.IsZero(m.Changes) { // not required
		return nil
	}

	for i := 0; i < len(m.Changes); i++ {
		if swag.IsZero(m.Changes[i]) { // not required
			continue
		}

		if m.Changes[i] != nil {
			if err := m.Changes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("changes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TimesheetSalaryTypeSpecification) validateCount(formats strfmt.Registry) error {

	if err := validate.Required("count", "body", m.Count); err != nil {
		return err
	}

	return nil
}

func (m *TimesheetSalaryTypeSpecification) validateDate(formats strfmt.Registry) error {

	if err := validate.Required("date", "body", m.Date); err != nil {
		return err
	}

	return nil
}

func (m *TimesheetSalaryTypeSpecification) validateEmployee(formats strfmt.Registry) error {

	if err := validate.Required("employee", "body", m.Employee); err != nil {
		return err
	}

	if m.Employee != nil {
		if err := m.Employee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("employee")
			}
			return err
		}
	}

	return nil
}

func (m *TimesheetSalaryTypeSpecification) validateSalaryType(formats strfmt.Registry) error {

	if err := validate.Required("salaryType", "body", m.SalaryType); err != nil {
		return err
	}

	if m.SalaryType != nil {
		if err := m.SalaryType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("salaryType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TimesheetSalaryTypeSpecification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TimesheetSalaryTypeSpecification) UnmarshalBinary(b []byte) error {
	var res TimesheetSalaryTypeSpecification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
