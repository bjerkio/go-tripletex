// Code generated by go-swagger; DO NOT EDIT.

package period

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new period API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for period API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ProjectPeriodHourlistReportHourlistReport(params *ProjectPeriodHourlistReportHourlistReportParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectPeriodHourlistReportHourlistReportOK, error)

	ProjectPeriodInvoicedInvoiced(params *ProjectPeriodInvoicedInvoicedParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectPeriodInvoicedInvoicedOK, error)

	ProjectPeriodInvoicingReserveInvoicingReserve(params *ProjectPeriodInvoicingReserveInvoicingReserveParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectPeriodInvoicingReserveInvoicingReserveOK, error)

	ProjectPeriodMonthlyStatusMonthlyStatus(params *ProjectPeriodMonthlyStatusMonthlyStatusParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectPeriodMonthlyStatusMonthlyStatusOK, error)

	ProjectPeriodOverallStatusOverallStatus(params *ProjectPeriodOverallStatusOverallStatusParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectPeriodOverallStatusOverallStatusOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ProjectPeriodHourlistReportHourlistReport finds hourlist report by project period
*/
func (a *Client) ProjectPeriodHourlistReportHourlistReport(params *ProjectPeriodHourlistReportHourlistReportParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectPeriodHourlistReportHourlistReportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectPeriodHourlistReportHourlistReportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectPeriodHourlistReport_hourlistReport",
		Method:             "GET",
		PathPattern:        "/project/{id}/period/hourlistReport",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectPeriodHourlistReportHourlistReportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectPeriodHourlistReportHourlistReportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProjectPeriodHourlistReport_hourlistReport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectPeriodInvoicedInvoiced finds invoiced info by project period
*/
func (a *Client) ProjectPeriodInvoicedInvoiced(params *ProjectPeriodInvoicedInvoicedParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectPeriodInvoicedInvoicedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectPeriodInvoicedInvoicedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectPeriodInvoiced_invoiced",
		Method:             "GET",
		PathPattern:        "/project/{id}/period/invoiced",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectPeriodInvoicedInvoicedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectPeriodInvoicedInvoicedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProjectPeriodInvoiced_invoiced: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectPeriodInvoicingReserveInvoicingReserve finds invoicing reserve by project period
*/
func (a *Client) ProjectPeriodInvoicingReserveInvoicingReserve(params *ProjectPeriodInvoicingReserveInvoicingReserveParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectPeriodInvoicingReserveInvoicingReserveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectPeriodInvoicingReserveInvoicingReserveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectPeriodInvoicingReserve_invoicingReserve",
		Method:             "GET",
		PathPattern:        "/project/{id}/period/invoicingReserve",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectPeriodInvoicingReserveInvoicingReserveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectPeriodInvoicingReserveInvoicingReserveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProjectPeriodInvoicingReserve_invoicingReserve: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectPeriodMonthlyStatusMonthlyStatus finds overall status by project period
*/
func (a *Client) ProjectPeriodMonthlyStatusMonthlyStatus(params *ProjectPeriodMonthlyStatusMonthlyStatusParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectPeriodMonthlyStatusMonthlyStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectPeriodMonthlyStatusMonthlyStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectPeriodMonthlyStatus_monthlyStatus",
		Method:             "GET",
		PathPattern:        "/project/{id}/period/monthlyStatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectPeriodMonthlyStatusMonthlyStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectPeriodMonthlyStatusMonthlyStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProjectPeriodMonthlyStatus_monthlyStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectPeriodOverallStatusOverallStatus finds overall status by project period
*/
func (a *Client) ProjectPeriodOverallStatusOverallStatus(params *ProjectPeriodOverallStatusOverallStatusParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectPeriodOverallStatusOverallStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectPeriodOverallStatusOverallStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectPeriodOverallStatus_overallStatus",
		Method:             "GET",
		PathPattern:        "/project/{id}/period/overallStatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectPeriodOverallStatusOverallStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectPeriodOverallStatusOverallStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProjectPeriodOverallStatus_overallStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
