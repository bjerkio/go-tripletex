// Code generated by go-swagger; DO NOT EDIT.

package supplier_invoice

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new supplier invoice API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for supplier invoice API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	SupplierInvoiceAddPaymentAddPayment(params *SupplierInvoiceAddPaymentAddPaymentParams, authInfo runtime.ClientAuthInfoWriter) (*SupplierInvoiceAddPaymentAddPaymentCreated, error)

	SupplierInvoiceAddRecipientAddRecipient(params *SupplierInvoiceAddRecipientAddRecipientParams, authInfo runtime.ClientAuthInfoWriter) (*SupplierInvoiceAddRecipientAddRecipientOK, error)

	SupplierInvoiceAddRecipientAddRecipientToMany(params *SupplierInvoiceAddRecipientAddRecipientToManyParams, authInfo runtime.ClientAuthInfoWriter) (*SupplierInvoiceAddRecipientAddRecipientToManyOK, error)

	SupplierInvoiceApproveApprove(params *SupplierInvoiceApproveApproveParams, authInfo runtime.ClientAuthInfoWriter) (*SupplierInvoiceApproveApproveOK, error)

	SupplierInvoiceApproveApproveMany(params *SupplierInvoiceApproveApproveManyParams, authInfo runtime.ClientAuthInfoWriter) (*SupplierInvoiceApproveApproveManyOK, error)

	SupplierInvoiceForApprovalGetApprovalInvoices(params *SupplierInvoiceForApprovalGetApprovalInvoicesParams, authInfo runtime.ClientAuthInfoWriter) (*SupplierInvoiceForApprovalGetApprovalInvoicesOK, error)

	SupplierInvoicePdfDownloadPdf(params *SupplierInvoicePdfDownloadPdfParams, authInfo runtime.ClientAuthInfoWriter) (*SupplierInvoicePdfDownloadPdfOK, error)

	SupplierInvoiceRejectReject(params *SupplierInvoiceRejectRejectParams, authInfo runtime.ClientAuthInfoWriter) (*SupplierInvoiceRejectRejectOK, error)

	SupplierInvoiceRejectRejectMany(params *SupplierInvoiceRejectRejectManyParams, authInfo runtime.ClientAuthInfoWriter) (*SupplierInvoiceRejectRejectManyOK, error)

	SupplierInvoiceVoucherPostingsPutPostings(params *SupplierInvoiceVoucherPostingsPutPostingsParams, authInfo runtime.ClientAuthInfoWriter) (*SupplierInvoiceVoucherPostingsPutPostingsOK, error)

	SupplierInvoiceGet(params *SupplierInvoiceGetParams, authInfo runtime.ClientAuthInfoWriter) (*SupplierInvoiceGetOK, error)

	SupplierInvoiceSearch(params *SupplierInvoiceSearchParams, authInfo runtime.ClientAuthInfoWriter) (*SupplierInvoiceSearchOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  SupplierInvoiceAddPaymentAddPayment bs e t a register payment payment type 0 finds the last payment type for this vendor
*/
func (a *Client) SupplierInvoiceAddPaymentAddPayment(params *SupplierInvoiceAddPaymentAddPaymentParams, authInfo runtime.ClientAuthInfoWriter) (*SupplierInvoiceAddPaymentAddPaymentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSupplierInvoiceAddPaymentAddPaymentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SupplierInvoiceAddPayment_addPayment",
		Method:             "POST",
		PathPattern:        "/supplierInvoice/{invoiceId}/:addPayment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SupplierInvoiceAddPaymentAddPaymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SupplierInvoiceAddPaymentAddPaymentCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SupplierInvoiceAddPayment_addPayment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SupplierInvoiceAddRecipientAddRecipient bs e t a add recipient to supplier invoices
*/
func (a *Client) SupplierInvoiceAddRecipientAddRecipient(params *SupplierInvoiceAddRecipientAddRecipientParams, authInfo runtime.ClientAuthInfoWriter) (*SupplierInvoiceAddRecipientAddRecipientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSupplierInvoiceAddRecipientAddRecipientParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SupplierInvoiceAddRecipient_addRecipient",
		Method:             "PUT",
		PathPattern:        "/supplierInvoice/{invoiceId}/:addRecipient",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SupplierInvoiceAddRecipientAddRecipientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SupplierInvoiceAddRecipientAddRecipientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SupplierInvoiceAddRecipient_addRecipient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SupplierInvoiceAddRecipientAddRecipientToMany bs e t a add recipient
*/
func (a *Client) SupplierInvoiceAddRecipientAddRecipientToMany(params *SupplierInvoiceAddRecipientAddRecipientToManyParams, authInfo runtime.ClientAuthInfoWriter) (*SupplierInvoiceAddRecipientAddRecipientToManyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSupplierInvoiceAddRecipientAddRecipientToManyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SupplierInvoiceAddRecipient_addRecipientToMany",
		Method:             "PUT",
		PathPattern:        "/supplierInvoice/:addRecipient",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SupplierInvoiceAddRecipientAddRecipientToManyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SupplierInvoiceAddRecipientAddRecipientToManyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SupplierInvoiceAddRecipient_addRecipientToMany: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SupplierInvoiceApproveApprove bs e t a approve supplier invoice
*/
func (a *Client) SupplierInvoiceApproveApprove(params *SupplierInvoiceApproveApproveParams, authInfo runtime.ClientAuthInfoWriter) (*SupplierInvoiceApproveApproveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSupplierInvoiceApproveApproveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SupplierInvoiceApprove_approve",
		Method:             "PUT",
		PathPattern:        "/supplierInvoice/{invoiceId}/:approve",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SupplierInvoiceApproveApproveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SupplierInvoiceApproveApproveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SupplierInvoiceApprove_approve: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SupplierInvoiceApproveApproveMany bs e t a approve supplier invoices
*/
func (a *Client) SupplierInvoiceApproveApproveMany(params *SupplierInvoiceApproveApproveManyParams, authInfo runtime.ClientAuthInfoWriter) (*SupplierInvoiceApproveApproveManyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSupplierInvoiceApproveApproveManyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SupplierInvoiceApprove_approveMany",
		Method:             "PUT",
		PathPattern:        "/supplierInvoice/:approve",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SupplierInvoiceApproveApproveManyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SupplierInvoiceApproveApproveManyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SupplierInvoiceApprove_approveMany: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SupplierInvoiceForApprovalGetApprovalInvoices bs e t a get supplier invoices for approval
*/
func (a *Client) SupplierInvoiceForApprovalGetApprovalInvoices(params *SupplierInvoiceForApprovalGetApprovalInvoicesParams, authInfo runtime.ClientAuthInfoWriter) (*SupplierInvoiceForApprovalGetApprovalInvoicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSupplierInvoiceForApprovalGetApprovalInvoicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SupplierInvoiceForApproval_getApprovalInvoices",
		Method:             "GET",
		PathPattern:        "/supplierInvoice/forApproval",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SupplierInvoiceForApprovalGetApprovalInvoicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SupplierInvoiceForApprovalGetApprovalInvoicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SupplierInvoiceForApproval_getApprovalInvoices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SupplierInvoicePdfDownloadPdf bs e t a get supplier invoice document by invoice ID
*/
func (a *Client) SupplierInvoicePdfDownloadPdf(params *SupplierInvoicePdfDownloadPdfParams, authInfo runtime.ClientAuthInfoWriter) (*SupplierInvoicePdfDownloadPdfOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSupplierInvoicePdfDownloadPdfParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SupplierInvoicePdf_downloadPdf",
		Method:             "GET",
		PathPattern:        "/supplierInvoice/{invoiceId}/pdf",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SupplierInvoicePdfDownloadPdfReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SupplierInvoicePdfDownloadPdfOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SupplierInvoicePdf_downloadPdf: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SupplierInvoiceRejectReject bs e t a reject supplier invoice
*/
func (a *Client) SupplierInvoiceRejectReject(params *SupplierInvoiceRejectRejectParams, authInfo runtime.ClientAuthInfoWriter) (*SupplierInvoiceRejectRejectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSupplierInvoiceRejectRejectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SupplierInvoiceReject_reject",
		Method:             "PUT",
		PathPattern:        "/supplierInvoice/{invoiceId}/:reject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SupplierInvoiceRejectRejectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SupplierInvoiceRejectRejectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SupplierInvoiceReject_reject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SupplierInvoiceRejectRejectMany bs e t a reject supplier invoices
*/
func (a *Client) SupplierInvoiceRejectRejectMany(params *SupplierInvoiceRejectRejectManyParams, authInfo runtime.ClientAuthInfoWriter) (*SupplierInvoiceRejectRejectManyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSupplierInvoiceRejectRejectManyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SupplierInvoiceReject_rejectMany",
		Method:             "PUT",
		PathPattern:        "/supplierInvoice/:reject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SupplierInvoiceRejectRejectManyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SupplierInvoiceRejectRejectManyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SupplierInvoiceReject_rejectMany: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SupplierInvoiceVoucherPostingsPutPostings bs e t a put debit postings
*/
func (a *Client) SupplierInvoiceVoucherPostingsPutPostings(params *SupplierInvoiceVoucherPostingsPutPostingsParams, authInfo runtime.ClientAuthInfoWriter) (*SupplierInvoiceVoucherPostingsPutPostingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSupplierInvoiceVoucherPostingsPutPostingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SupplierInvoiceVoucherPostings_putPostings",
		Method:             "PUT",
		PathPattern:        "/supplierInvoice/voucher/{id}/postings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SupplierInvoiceVoucherPostingsPutPostingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SupplierInvoiceVoucherPostingsPutPostingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SupplierInvoiceVoucherPostings_putPostings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SupplierInvoiceGet bs e t a get supplier invoice by ID
*/
func (a *Client) SupplierInvoiceGet(params *SupplierInvoiceGetParams, authInfo runtime.ClientAuthInfoWriter) (*SupplierInvoiceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSupplierInvoiceGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SupplierInvoice_get",
		Method:             "GET",
		PathPattern:        "/supplierInvoice/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SupplierInvoiceGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SupplierInvoiceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SupplierInvoice_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SupplierInvoiceSearch bs e t a find supplier invoices corresponding with sent data
*/
func (a *Client) SupplierInvoiceSearch(params *SupplierInvoiceSearchParams, authInfo runtime.ClientAuthInfoWriter) (*SupplierInvoiceSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSupplierInvoiceSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SupplierInvoice_search",
		Method:             "GET",
		PathPattern:        "/supplierInvoice",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SupplierInvoiceSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SupplierInvoiceSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SupplierInvoice_search: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
