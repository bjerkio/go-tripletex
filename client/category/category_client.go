// Code generated by go-swagger; DO NOT EDIT.

package category

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new category API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for category API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CustomerCategoryGet(params *CustomerCategoryGetParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerCategoryGetOK, error)

	CustomerCategoryPost(params *CustomerCategoryPostParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerCategoryPostCreated, error)

	CustomerCategoryPut(params *CustomerCategoryPutParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerCategoryPutOK, error)

	CustomerCategorySearch(params *CustomerCategorySearchParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerCategorySearchOK, error)

	ProjectCategoryGet(params *ProjectCategoryGetParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectCategoryGetOK, error)

	ProjectCategoryPost(params *ProjectCategoryPostParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectCategoryPostCreated, error)

	ProjectCategoryPut(params *ProjectCategoryPutParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectCategoryPutOK, error)

	ProjectCategorySearch(params *ProjectCategorySearchParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectCategorySearchOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CustomerCategoryGet finds customer supplier category by ID
*/
func (a *Client) CustomerCategoryGet(params *CustomerCategoryGetParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerCategoryGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerCategoryGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomerCategoryGet",
		Method:             "GET",
		PathPattern:        "/customer/category/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerCategoryGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerCategoryGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomerCategoryGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CustomerCategoryPost adds new customer supplier category
*/
func (a *Client) CustomerCategoryPost(params *CustomerCategoryPostParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerCategoryPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerCategoryPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomerCategoryPost",
		Method:             "POST",
		PathPattern:        "/customer/category",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerCategoryPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerCategoryPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomerCategoryPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CustomerCategoryPut updates customer supplier category
*/
func (a *Client) CustomerCategoryPut(params *CustomerCategoryPutParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerCategoryPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerCategoryPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomerCategoryPut",
		Method:             "PUT",
		PathPattern:        "/customer/category/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerCategoryPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerCategoryPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomerCategoryPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CustomerCategorySearch finds customer supplier categories corresponding with sent data
*/
func (a *Client) CustomerCategorySearch(params *CustomerCategorySearchParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerCategorySearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerCategorySearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomerCategorySearch",
		Method:             "GET",
		PathPattern:        "/customer/category",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerCategorySearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerCategorySearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomerCategorySearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectCategoryGet finds project category by ID
*/
func (a *Client) ProjectCategoryGet(params *ProjectCategoryGetParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectCategoryGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectCategoryGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectCategoryGet",
		Method:             "GET",
		PathPattern:        "/project/category/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectCategoryGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectCategoryGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProjectCategoryGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectCategoryPost adds new project category
*/
func (a *Client) ProjectCategoryPost(params *ProjectCategoryPostParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectCategoryPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectCategoryPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectCategoryPost",
		Method:             "POST",
		PathPattern:        "/project/category",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectCategoryPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectCategoryPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProjectCategoryPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectCategoryPut updates project category
*/
func (a *Client) ProjectCategoryPut(params *ProjectCategoryPutParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectCategoryPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectCategoryPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectCategoryPut",
		Method:             "PUT",
		PathPattern:        "/project/category/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectCategoryPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectCategoryPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProjectCategoryPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectCategorySearch finds project categories corresponding with sent data
*/
func (a *Client) ProjectCategorySearch(params *ProjectCategorySearchParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectCategorySearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectCategorySearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectCategorySearch",
		Method:             "GET",
		PathPattern:        "/project/category",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectCategorySearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectCategorySearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProjectCategorySearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
