// Copyright 2020 Bjerk AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Change change
//
// swagger:model Change
type Change struct {

	// change type
	// Enum: [CREATE UPDATE DELETE LOCKED REOPENED DO_NOT_SHOW]
	ChangeType string `json:"changeType,omitempty"`

	// employee Id
	EmployeeID int32 `json:"employeeId,omitempty"`

	// period locked
	PeriodLocked string `json:"periodLocked,omitempty"`

	// period reopened
	PeriodReopened string `json:"periodReopened,omitempty"`

	// timestamp
	// Format: date-time
	Timestamp strfmt.DateTime `json:"timestamp,omitempty"`
}

// Validate validates this change
func (m *Change) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChangeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var changeTypeChangeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CREATE","UPDATE","DELETE","LOCKED","REOPENED","DO_NOT_SHOW"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		changeTypeChangeTypePropEnum = append(changeTypeChangeTypePropEnum, v)
	}
}

const (

	// ChangeChangeTypeCREATE captures enum value "CREATE"
	ChangeChangeTypeCREATE string = "CREATE"

	// ChangeChangeTypeUPDATE captures enum value "UPDATE"
	ChangeChangeTypeUPDATE string = "UPDATE"

	// ChangeChangeTypeDELETE captures enum value "DELETE"
	ChangeChangeTypeDELETE string = "DELETE"

	// ChangeChangeTypeLOCKED captures enum value "LOCKED"
	ChangeChangeTypeLOCKED string = "LOCKED"

	// ChangeChangeTypeREOPENED captures enum value "REOPENED"
	ChangeChangeTypeREOPENED string = "REOPENED"

	// ChangeChangeTypeDONOTSHOW captures enum value "DO_NOT_SHOW"
	ChangeChangeTypeDONOTSHOW string = "DO_NOT_SHOW"
)

// prop value enum
func (m *Change) validateChangeTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, changeTypeChangeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Change) validateChangeType(formats strfmt.Registry) error {

	if swag.IsZero(m.ChangeType) { // not required
		return nil
	}

	// value enum
	if err := m.validateChangeTypeEnum("changeType", "body", m.ChangeType); err != nil {
		return err
	}

	return nil
}

func (m *Change) validateTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Change) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Change) UnmarshalBinary(b []byte) error {
	var res Change
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
