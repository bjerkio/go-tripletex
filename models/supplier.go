// Copyright 2020 Bjerk AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Supplier supplier
//
// swagger:model Supplier
type Supplier struct {

	// account manager
	// Read Only: true
	AccountManager *Employee `json:"accountManager,omitempty"`

	// List of the bank account numbers for this supplier.  Norwegian bank account numbers only.
	BankAccounts []string `json:"bankAccounts"`

	// Category 1 of this supplier
	Category1 *CustomerCategory `json:"category1,omitempty"`

	// Category 2 of this supplier
	Category2 *CustomerCategory `json:"category2,omitempty"`

	// Category 3 of this supplier
	Category3 *CustomerCategory `json:"category3,omitempty"`

	// changes
	// Read Only: true
	Changes []*Change `json:"changes"`

	// customer number
	CustomerNumber int32 `json:"customerNumber,omitempty"`

	// delivery address
	DeliveryAddress *DeliveryAddress `json:"deliveryAddress,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// email
	// Max Length: 254
	// Min Length: 0
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// invoice email
	// Max Length: 254
	// Min Length: 0
	// Format: email
	InvoiceEmail strfmt.Email `json:"invoiceEmail,omitempty"`

	// Determine if the supplier is also a customer
	IsCustomer *bool `json:"isCustomer,omitempty"`

	// is inactive
	// Read Only: true
	IsInactive *bool `json:"isInactive,omitempty"`

	// is private individual
	IsPrivateIndividual *bool `json:"isPrivateIndividual,omitempty"`

	// is supplier
	// Read Only: true
	IsSupplier *bool `json:"isSupplier,omitempty"`

	// name
	// Required: true
	// Max Length: 255
	Name *string `json:"name"`

	// organization number
	// Max Length: 100
	OrganizationNumber string `json:"organizationNumber,omitempty"`

	// The email address of the customer where the noticing emails are sent in case of an overdue
	// Max Length: 254
	// Min Length: 0
	// Format: email
	OverdueNoticeEmail strfmt.Email `json:"overdueNoticeEmail,omitempty"`

	// phone number
	// Max Length: 100
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// phone number mobile
	// Max Length: 100
	PhoneNumberMobile string `json:"phoneNumberMobile,omitempty"`

	// physical address
	PhysicalAddress *Address `json:"physicalAddress,omitempty"`

	// postal address
	PostalAddress *Address `json:"postalAddress,omitempty"`

	// show products
	ShowProducts *bool `json:"showProducts,omitempty"`

	// supplier number
	SupplierNumber int32 `json:"supplierNumber,omitempty"`

	// url
	// Read Only: true
	URL string `json:"url,omitempty"`

	// version
	Version int32 `json:"version,omitempty"`
}

// Validate validates this supplier
func (m *Supplier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountManager(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategory1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategory2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategory3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeliveryAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvoiceEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverdueNoticeEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneNumberMobile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysicalAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostalAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Supplier) validateAccountManager(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountManager) { // not required
		return nil
	}

	if m.AccountManager != nil {
		if err := m.AccountManager.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accountManager")
			}
			return err
		}
	}

	return nil
}

func (m *Supplier) validateCategory1(formats strfmt.Registry) error {

	if swag.IsZero(m.Category1) { // not required
		return nil
	}

	if m.Category1 != nil {
		if err := m.Category1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("category1")
			}
			return err
		}
	}

	return nil
}

func (m *Supplier) validateCategory2(formats strfmt.Registry) error {

	if swag.IsZero(m.Category2) { // not required
		return nil
	}

	if m.Category2 != nil {
		if err := m.Category2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("category2")
			}
			return err
		}
	}

	return nil
}

func (m *Supplier) validateCategory3(formats strfmt.Registry) error {

	if swag.IsZero(m.Category3) { // not required
		return nil
	}

	if m.Category3 != nil {
		if err := m.Category3.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("category3")
			}
			return err
		}
	}

	return nil
}

func (m *Supplier) validateChanges(formats strfmt.Registry) error {

	if swag.IsZero(m.Changes) { // not required
		return nil
	}

	for i := 0; i < len(m.Changes); i++ {
		if swag.IsZero(m.Changes[i]) { // not required
			continue
		}

		if m.Changes[i] != nil {
			if err := m.Changes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("changes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Supplier) validateDeliveryAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.DeliveryAddress) { // not required
		return nil
	}

	if m.DeliveryAddress != nil {
		if err := m.DeliveryAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deliveryAddress")
			}
			return err
		}
	}

	return nil
}

func (m *Supplier) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.MinLength("email", "body", string(m.Email), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("email", "body", string(m.Email), 254); err != nil {
		return err
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Supplier) validateInvoiceEmail(formats strfmt.Registry) error {

	if swag.IsZero(m.InvoiceEmail) { // not required
		return nil
	}

	if err := validate.MinLength("invoiceEmail", "body", string(m.InvoiceEmail), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("invoiceEmail", "body", string(m.InvoiceEmail), 254); err != nil {
		return err
	}

	if err := validate.FormatOf("invoiceEmail", "body", "email", m.InvoiceEmail.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Supplier) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 255); err != nil {
		return err
	}

	return nil
}

func (m *Supplier) validateOrganizationNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.OrganizationNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("organizationNumber", "body", string(m.OrganizationNumber), 100); err != nil {
		return err
	}

	return nil
}

func (m *Supplier) validateOverdueNoticeEmail(formats strfmt.Registry) error {

	if swag.IsZero(m.OverdueNoticeEmail) { // not required
		return nil
	}

	if err := validate.MinLength("overdueNoticeEmail", "body", string(m.OverdueNoticeEmail), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("overdueNoticeEmail", "body", string(m.OverdueNoticeEmail), 254); err != nil {
		return err
	}

	if err := validate.FormatOf("overdueNoticeEmail", "body", "email", m.OverdueNoticeEmail.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Supplier) validatePhoneNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.PhoneNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("phoneNumber", "body", string(m.PhoneNumber), 100); err != nil {
		return err
	}

	return nil
}

func (m *Supplier) validatePhoneNumberMobile(formats strfmt.Registry) error {

	if swag.IsZero(m.PhoneNumberMobile) { // not required
		return nil
	}

	if err := validate.MaxLength("phoneNumberMobile", "body", string(m.PhoneNumberMobile), 100); err != nil {
		return err
	}

	return nil
}

func (m *Supplier) validatePhysicalAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.PhysicalAddress) { // not required
		return nil
	}

	if m.PhysicalAddress != nil {
		if err := m.PhysicalAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalAddress")
			}
			return err
		}
	}

	return nil
}

func (m *Supplier) validatePostalAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.PostalAddress) { // not required
		return nil
	}

	if m.PostalAddress != nil {
		if err := m.PostalAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postalAddress")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Supplier) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Supplier) UnmarshalBinary(b []byte) error {
	var res Supplier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
