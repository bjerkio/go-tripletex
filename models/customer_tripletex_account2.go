// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomerTripletexAccount2 customer tripletex account2
//
// swagger:model CustomerTripletexAccount2
type CustomerTripletexAccount2 struct {

	// account type
	// Required: true
	// Enum: [TEST PAYING]
	AccountType *string `json:"accountType"`

	// Administrator user to create in the new company. Leave empty if calling this enpoint as an auditor og accountant company
	Administrator *Employee `json:"administrator,omitempty"`

	// The password of the administrator user.
	AdministratorPassword string `json:"administratorPassword,omitempty"`

	// Should the user be automatically validated?
	AutoValidateUserLogin *bool `json:"autoValidateUserLogin,omitempty"`

	// The chart of accounts to use for the new company
	// Enum: [DEFAULT MAMUT_STD_PAYROLL MAMUT_NARF_PAYROLL AGRO_FORRETNING_PAYROLL AGRO_LANDBRUK_PAYROLL AGRO_FISKE_PAYROLL AGRO_FORSOKSRING_PAYROLL AGRO_IDRETTSLAG_PAYROLL AGRO_FORENING_PAYROLL]
	ChartOfAccountsType string `json:"chartOfAccountsType,omitempty"`

	// Creates a token for the admin user. The accounting office could also use their tokens so you might not need this.
	CreateAPIToken *bool `json:"createApiToken,omitempty"`

	// The customer id to an already created customer to create a Tripletex account for.
	CustomerID int32 `json:"customerId,omitempty"`

	// The address to send the invoice to at the customer.
	CustomerInvoiceEmail string `json:"customerInvoiceEmail,omitempty"`

	// modules
	// Required: true
	Modules []*SalesModuleDTO `json:"modules"`

	// The number of employees in the customer company. Is used for calculating prices and setting some default settings, i.e. approval settings for timesheet.
	NumberOfEmployees int32 `json:"numberOfEmployees,omitempty"`

	// Should the emails normally sent during creation be sent in this case?
	SendEmails *bool `json:"sendEmails,omitempty"`

	// Should the invoices for this account be sent to the customer?
	SendInvoiceToCustomer *bool `json:"sendInvoiceToCustomer,omitempty"`

	// type
	// Required: true
	// Enum: [NONE ENK AS NUF ANS DA PRE KS ASA BBL BRL GFS SPA SF IKS KF_FKF FCD EOFG BA STI ORG ESEK SA SAM BO VPFO OS Other]
	Type *string `json:"type"`

	// VAT type
	// Enum: [VAT_REGISTERED VAT_NOT_REGISTERED VAT_APPLICANT]
	VatStatusType string `json:"vatStatusType,omitempty"`
}

// Validate validates this customer tripletex account2
func (m *CustomerTripletexAccount2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdministrator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChartOfAccountsType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVatStatusType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var customerTripletexAccount2TypeAccountTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["TEST","PAYING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customerTripletexAccount2TypeAccountTypePropEnum = append(customerTripletexAccount2TypeAccountTypePropEnum, v)
	}
}

const (

	// CustomerTripletexAccount2AccountTypeTEST captures enum value "TEST"
	CustomerTripletexAccount2AccountTypeTEST string = "TEST"

	// CustomerTripletexAccount2AccountTypePAYING captures enum value "PAYING"
	CustomerTripletexAccount2AccountTypePAYING string = "PAYING"
)

// prop value enum
func (m *CustomerTripletexAccount2) validateAccountTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, customerTripletexAccount2TypeAccountTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CustomerTripletexAccount2) validateAccountType(formats strfmt.Registry) error {

	if err := validate.Required("accountType", "body", m.AccountType); err != nil {
		return err
	}

	// value enum
	if err := m.validateAccountTypeEnum("accountType", "body", *m.AccountType); err != nil {
		return err
	}

	return nil
}

func (m *CustomerTripletexAccount2) validateAdministrator(formats strfmt.Registry) error {

	if swag.IsZero(m.Administrator) { // not required
		return nil
	}

	if m.Administrator != nil {
		if err := m.Administrator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("administrator")
			}
			return err
		}
	}

	return nil
}

var customerTripletexAccount2TypeChartOfAccountsTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DEFAULT","MAMUT_STD_PAYROLL","MAMUT_NARF_PAYROLL","AGRO_FORRETNING_PAYROLL","AGRO_LANDBRUK_PAYROLL","AGRO_FISKE_PAYROLL","AGRO_FORSOKSRING_PAYROLL","AGRO_IDRETTSLAG_PAYROLL","AGRO_FORENING_PAYROLL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customerTripletexAccount2TypeChartOfAccountsTypePropEnum = append(customerTripletexAccount2TypeChartOfAccountsTypePropEnum, v)
	}
}

const (

	// CustomerTripletexAccount2ChartOfAccountsTypeDEFAULT captures enum value "DEFAULT"
	CustomerTripletexAccount2ChartOfAccountsTypeDEFAULT string = "DEFAULT"

	// CustomerTripletexAccount2ChartOfAccountsTypeMAMUTSTDPAYROLL captures enum value "MAMUT_STD_PAYROLL"
	CustomerTripletexAccount2ChartOfAccountsTypeMAMUTSTDPAYROLL string = "MAMUT_STD_PAYROLL"

	// CustomerTripletexAccount2ChartOfAccountsTypeMAMUTNARFPAYROLL captures enum value "MAMUT_NARF_PAYROLL"
	CustomerTripletexAccount2ChartOfAccountsTypeMAMUTNARFPAYROLL string = "MAMUT_NARF_PAYROLL"

	// CustomerTripletexAccount2ChartOfAccountsTypeAGROFORRETNINGPAYROLL captures enum value "AGRO_FORRETNING_PAYROLL"
	CustomerTripletexAccount2ChartOfAccountsTypeAGROFORRETNINGPAYROLL string = "AGRO_FORRETNING_PAYROLL"

	// CustomerTripletexAccount2ChartOfAccountsTypeAGROLANDBRUKPAYROLL captures enum value "AGRO_LANDBRUK_PAYROLL"
	CustomerTripletexAccount2ChartOfAccountsTypeAGROLANDBRUKPAYROLL string = "AGRO_LANDBRUK_PAYROLL"

	// CustomerTripletexAccount2ChartOfAccountsTypeAGROFISKEPAYROLL captures enum value "AGRO_FISKE_PAYROLL"
	CustomerTripletexAccount2ChartOfAccountsTypeAGROFISKEPAYROLL string = "AGRO_FISKE_PAYROLL"

	// CustomerTripletexAccount2ChartOfAccountsTypeAGROFORSOKSRINGPAYROLL captures enum value "AGRO_FORSOKSRING_PAYROLL"
	CustomerTripletexAccount2ChartOfAccountsTypeAGROFORSOKSRINGPAYROLL string = "AGRO_FORSOKSRING_PAYROLL"

	// CustomerTripletexAccount2ChartOfAccountsTypeAGROIDRETTSLAGPAYROLL captures enum value "AGRO_IDRETTSLAG_PAYROLL"
	CustomerTripletexAccount2ChartOfAccountsTypeAGROIDRETTSLAGPAYROLL string = "AGRO_IDRETTSLAG_PAYROLL"

	// CustomerTripletexAccount2ChartOfAccountsTypeAGROFORENINGPAYROLL captures enum value "AGRO_FORENING_PAYROLL"
	CustomerTripletexAccount2ChartOfAccountsTypeAGROFORENINGPAYROLL string = "AGRO_FORENING_PAYROLL"
)

// prop value enum
func (m *CustomerTripletexAccount2) validateChartOfAccountsTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, customerTripletexAccount2TypeChartOfAccountsTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CustomerTripletexAccount2) validateChartOfAccountsType(formats strfmt.Registry) error {

	if swag.IsZero(m.ChartOfAccountsType) { // not required
		return nil
	}

	// value enum
	if err := m.validateChartOfAccountsTypeEnum("chartOfAccountsType", "body", m.ChartOfAccountsType); err != nil {
		return err
	}

	return nil
}

func (m *CustomerTripletexAccount2) validateModules(formats strfmt.Registry) error {

	if err := validate.Required("modules", "body", m.Modules); err != nil {
		return err
	}

	for i := 0; i < len(m.Modules); i++ {
		if swag.IsZero(m.Modules[i]) { // not required
			continue
		}

		if m.Modules[i] != nil {
			if err := m.Modules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("modules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var customerTripletexAccount2TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NONE","ENK","AS","NUF","ANS","DA","PRE","KS","ASA","BBL","BRL","GFS","SPA","SF","IKS","KF_FKF","FCD","EOFG","BA","STI","ORG","ESEK","SA","SAM","BO","VPFO","OS","Other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customerTripletexAccount2TypeTypePropEnum = append(customerTripletexAccount2TypeTypePropEnum, v)
	}
}

const (

	// CustomerTripletexAccount2TypeNONE captures enum value "NONE"
	CustomerTripletexAccount2TypeNONE string = "NONE"

	// CustomerTripletexAccount2TypeENK captures enum value "ENK"
	CustomerTripletexAccount2TypeENK string = "ENK"

	// CustomerTripletexAccount2TypeAS captures enum value "AS"
	CustomerTripletexAccount2TypeAS string = "AS"

	// CustomerTripletexAccount2TypeNUF captures enum value "NUF"
	CustomerTripletexAccount2TypeNUF string = "NUF"

	// CustomerTripletexAccount2TypeANS captures enum value "ANS"
	CustomerTripletexAccount2TypeANS string = "ANS"

	// CustomerTripletexAccount2TypeDA captures enum value "DA"
	CustomerTripletexAccount2TypeDA string = "DA"

	// CustomerTripletexAccount2TypePRE captures enum value "PRE"
	CustomerTripletexAccount2TypePRE string = "PRE"

	// CustomerTripletexAccount2TypeKS captures enum value "KS"
	CustomerTripletexAccount2TypeKS string = "KS"

	// CustomerTripletexAccount2TypeASA captures enum value "ASA"
	CustomerTripletexAccount2TypeASA string = "ASA"

	// CustomerTripletexAccount2TypeBBL captures enum value "BBL"
	CustomerTripletexAccount2TypeBBL string = "BBL"

	// CustomerTripletexAccount2TypeBRL captures enum value "BRL"
	CustomerTripletexAccount2TypeBRL string = "BRL"

	// CustomerTripletexAccount2TypeGFS captures enum value "GFS"
	CustomerTripletexAccount2TypeGFS string = "GFS"

	// CustomerTripletexAccount2TypeSPA captures enum value "SPA"
	CustomerTripletexAccount2TypeSPA string = "SPA"

	// CustomerTripletexAccount2TypeSF captures enum value "SF"
	CustomerTripletexAccount2TypeSF string = "SF"

	// CustomerTripletexAccount2TypeIKS captures enum value "IKS"
	CustomerTripletexAccount2TypeIKS string = "IKS"

	// CustomerTripletexAccount2TypeKFFKF captures enum value "KF_FKF"
	CustomerTripletexAccount2TypeKFFKF string = "KF_FKF"

	// CustomerTripletexAccount2TypeFCD captures enum value "FCD"
	CustomerTripletexAccount2TypeFCD string = "FCD"

	// CustomerTripletexAccount2TypeEOFG captures enum value "EOFG"
	CustomerTripletexAccount2TypeEOFG string = "EOFG"

	// CustomerTripletexAccount2TypeBA captures enum value "BA"
	CustomerTripletexAccount2TypeBA string = "BA"

	// CustomerTripletexAccount2TypeSTI captures enum value "STI"
	CustomerTripletexAccount2TypeSTI string = "STI"

	// CustomerTripletexAccount2TypeORG captures enum value "ORG"
	CustomerTripletexAccount2TypeORG string = "ORG"

	// CustomerTripletexAccount2TypeESEK captures enum value "ESEK"
	CustomerTripletexAccount2TypeESEK string = "ESEK"

	// CustomerTripletexAccount2TypeSA captures enum value "SA"
	CustomerTripletexAccount2TypeSA string = "SA"

	// CustomerTripletexAccount2TypeSAM captures enum value "SAM"
	CustomerTripletexAccount2TypeSAM string = "SAM"

	// CustomerTripletexAccount2TypeBO captures enum value "BO"
	CustomerTripletexAccount2TypeBO string = "BO"

	// CustomerTripletexAccount2TypeVPFO captures enum value "VPFO"
	CustomerTripletexAccount2TypeVPFO string = "VPFO"

	// CustomerTripletexAccount2TypeOS captures enum value "OS"
	CustomerTripletexAccount2TypeOS string = "OS"

	// CustomerTripletexAccount2TypeOther captures enum value "Other"
	CustomerTripletexAccount2TypeOther string = "Other"
)

// prop value enum
func (m *CustomerTripletexAccount2) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, customerTripletexAccount2TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CustomerTripletexAccount2) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

var customerTripletexAccount2TypeVatStatusTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["VAT_REGISTERED","VAT_NOT_REGISTERED","VAT_APPLICANT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customerTripletexAccount2TypeVatStatusTypePropEnum = append(customerTripletexAccount2TypeVatStatusTypePropEnum, v)
	}
}

const (

	// CustomerTripletexAccount2VatStatusTypeVATREGISTERED captures enum value "VAT_REGISTERED"
	CustomerTripletexAccount2VatStatusTypeVATREGISTERED string = "VAT_REGISTERED"

	// CustomerTripletexAccount2VatStatusTypeVATNOTREGISTERED captures enum value "VAT_NOT_REGISTERED"
	CustomerTripletexAccount2VatStatusTypeVATNOTREGISTERED string = "VAT_NOT_REGISTERED"

	// CustomerTripletexAccount2VatStatusTypeVATAPPLICANT captures enum value "VAT_APPLICANT"
	CustomerTripletexAccount2VatStatusTypeVATAPPLICANT string = "VAT_APPLICANT"
)

// prop value enum
func (m *CustomerTripletexAccount2) validateVatStatusTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, customerTripletexAccount2TypeVatStatusTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CustomerTripletexAccount2) validateVatStatusType(formats strfmt.Registry) error {

	if swag.IsZero(m.VatStatusType) { // not required
		return nil
	}

	// value enum
	if err := m.validateVatStatusTypeEnum("vatStatusType", "body", m.VatStatusType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerTripletexAccount2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerTripletexAccount2) UnmarshalBinary(b []byte) error {
	var res CustomerTripletexAccount2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
