// Code generated by go-swagger; DO NOT EDIT.

package goods_receipt

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPurchaseOrderGoodsReceiptSearchParams creates a new PurchaseOrderGoodsReceiptSearchParams object
// with the default values initialized.
func NewPurchaseOrderGoodsReceiptSearchParams() *PurchaseOrderGoodsReceiptSearchParams {
	var (
		countDefault           = int64(1000)
		fromDefault            = int64(0)
		withoutPurchaseDefault = bool(false)
	)
	return &PurchaseOrderGoodsReceiptSearchParams{
		Count:           &countDefault,
		From:            &fromDefault,
		WithoutPurchase: &withoutPurchaseDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewPurchaseOrderGoodsReceiptSearchParamsWithTimeout creates a new PurchaseOrderGoodsReceiptSearchParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPurchaseOrderGoodsReceiptSearchParamsWithTimeout(timeout time.Duration) *PurchaseOrderGoodsReceiptSearchParams {
	var (
		countDefault           = int64(1000)
		fromDefault            = int64(0)
		withoutPurchaseDefault = bool(false)
	)
	return &PurchaseOrderGoodsReceiptSearchParams{
		Count:           &countDefault,
		From:            &fromDefault,
		WithoutPurchase: &withoutPurchaseDefault,

		timeout: timeout,
	}
}

// NewPurchaseOrderGoodsReceiptSearchParamsWithContext creates a new PurchaseOrderGoodsReceiptSearchParams object
// with the default values initialized, and the ability to set a context for a request
func NewPurchaseOrderGoodsReceiptSearchParamsWithContext(ctx context.Context) *PurchaseOrderGoodsReceiptSearchParams {
	var (
		countDefault           = int64(1000)
		fromDefault            = int64(0)
		withoutPurchaseDefault = bool(false)
	)
	return &PurchaseOrderGoodsReceiptSearchParams{
		Count:           &countDefault,
		From:            &fromDefault,
		WithoutPurchase: &withoutPurchaseDefault,

		Context: ctx,
	}
}

// NewPurchaseOrderGoodsReceiptSearchParamsWithHTTPClient creates a new PurchaseOrderGoodsReceiptSearchParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPurchaseOrderGoodsReceiptSearchParamsWithHTTPClient(client *http.Client) *PurchaseOrderGoodsReceiptSearchParams {
	var (
		countDefault           = int64(1000)
		fromDefault            = int64(0)
		withoutPurchaseDefault = bool(false)
	)
	return &PurchaseOrderGoodsReceiptSearchParams{
		Count:           &countDefault,
		From:            &fromDefault,
		WithoutPurchase: &withoutPurchaseDefault,
		HTTPClient:      client,
	}
}

/*PurchaseOrderGoodsReceiptSearchParams contains all the parameters to send to the API endpoint
for the purchase order goods receipt search operation typically these are written to a http.Request
*/
type PurchaseOrderGoodsReceiptSearchParams struct {

	/*Count
	  Number of elements to return

	*/
	Count *int64
	/*Fields
	  Fields filter pattern

	*/
	Fields *string
	/*From
	  From index

	*/
	From *int64
	/*ReceivedDateFrom
	  Format is yyyy-MM-dd (from and incl.).

	*/
	ReceivedDateFrom *string
	/*ReceivedDateTo
	  Format is yyyy-MM-dd (to and incl.).

	*/
	ReceivedDateTo *string
	/*Sorting
	  Sorting pattern

	*/
	Sorting *string
	/*Status
	  Equals

	*/
	Status *string
	/*WithoutPurchase
	  Equals

	*/
	WithoutPurchase *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the purchase order goods receipt search params
func (o *PurchaseOrderGoodsReceiptSearchParams) WithTimeout(timeout time.Duration) *PurchaseOrderGoodsReceiptSearchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the purchase order goods receipt search params
func (o *PurchaseOrderGoodsReceiptSearchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the purchase order goods receipt search params
func (o *PurchaseOrderGoodsReceiptSearchParams) WithContext(ctx context.Context) *PurchaseOrderGoodsReceiptSearchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the purchase order goods receipt search params
func (o *PurchaseOrderGoodsReceiptSearchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the purchase order goods receipt search params
func (o *PurchaseOrderGoodsReceiptSearchParams) WithHTTPClient(client *http.Client) *PurchaseOrderGoodsReceiptSearchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the purchase order goods receipt search params
func (o *PurchaseOrderGoodsReceiptSearchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCount adds the count to the purchase order goods receipt search params
func (o *PurchaseOrderGoodsReceiptSearchParams) WithCount(count *int64) *PurchaseOrderGoodsReceiptSearchParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the purchase order goods receipt search params
func (o *PurchaseOrderGoodsReceiptSearchParams) SetCount(count *int64) {
	o.Count = count
}

// WithFields adds the fields to the purchase order goods receipt search params
func (o *PurchaseOrderGoodsReceiptSearchParams) WithFields(fields *string) *PurchaseOrderGoodsReceiptSearchParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the purchase order goods receipt search params
func (o *PurchaseOrderGoodsReceiptSearchParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithFrom adds the from to the purchase order goods receipt search params
func (o *PurchaseOrderGoodsReceiptSearchParams) WithFrom(from *int64) *PurchaseOrderGoodsReceiptSearchParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the purchase order goods receipt search params
func (o *PurchaseOrderGoodsReceiptSearchParams) SetFrom(from *int64) {
	o.From = from
}

// WithReceivedDateFrom adds the receivedDateFrom to the purchase order goods receipt search params
func (o *PurchaseOrderGoodsReceiptSearchParams) WithReceivedDateFrom(receivedDateFrom *string) *PurchaseOrderGoodsReceiptSearchParams {
	o.SetReceivedDateFrom(receivedDateFrom)
	return o
}

// SetReceivedDateFrom adds the receivedDateFrom to the purchase order goods receipt search params
func (o *PurchaseOrderGoodsReceiptSearchParams) SetReceivedDateFrom(receivedDateFrom *string) {
	o.ReceivedDateFrom = receivedDateFrom
}

// WithReceivedDateTo adds the receivedDateTo to the purchase order goods receipt search params
func (o *PurchaseOrderGoodsReceiptSearchParams) WithReceivedDateTo(receivedDateTo *string) *PurchaseOrderGoodsReceiptSearchParams {
	o.SetReceivedDateTo(receivedDateTo)
	return o
}

// SetReceivedDateTo adds the receivedDateTo to the purchase order goods receipt search params
func (o *PurchaseOrderGoodsReceiptSearchParams) SetReceivedDateTo(receivedDateTo *string) {
	o.ReceivedDateTo = receivedDateTo
}

// WithSorting adds the sorting to the purchase order goods receipt search params
func (o *PurchaseOrderGoodsReceiptSearchParams) WithSorting(sorting *string) *PurchaseOrderGoodsReceiptSearchParams {
	o.SetSorting(sorting)
	return o
}

// SetSorting adds the sorting to the purchase order goods receipt search params
func (o *PurchaseOrderGoodsReceiptSearchParams) SetSorting(sorting *string) {
	o.Sorting = sorting
}

// WithStatus adds the status to the purchase order goods receipt search params
func (o *PurchaseOrderGoodsReceiptSearchParams) WithStatus(status *string) *PurchaseOrderGoodsReceiptSearchParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the purchase order goods receipt search params
func (o *PurchaseOrderGoodsReceiptSearchParams) SetStatus(status *string) {
	o.Status = status
}

// WithWithoutPurchase adds the withoutPurchase to the purchase order goods receipt search params
func (o *PurchaseOrderGoodsReceiptSearchParams) WithWithoutPurchase(withoutPurchase *bool) *PurchaseOrderGoodsReceiptSearchParams {
	o.SetWithoutPurchase(withoutPurchase)
	return o
}

// SetWithoutPurchase adds the withoutPurchase to the purchase order goods receipt search params
func (o *PurchaseOrderGoodsReceiptSearchParams) SetWithoutPurchase(withoutPurchase *bool) {
	o.WithoutPurchase = withoutPurchase
}

// WriteToRequest writes these params to a swagger request
func (o *PurchaseOrderGoodsReceiptSearchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Count != nil {

		// query param count
		var qrCount int64
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt64(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.From != nil {

		// query param from
		var qrFrom int64
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := swag.FormatInt64(qrFrom)
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	if o.ReceivedDateFrom != nil {

		// query param receivedDateFrom
		var qrReceivedDateFrom string
		if o.ReceivedDateFrom != nil {
			qrReceivedDateFrom = *o.ReceivedDateFrom
		}
		qReceivedDateFrom := qrReceivedDateFrom
		if qReceivedDateFrom != "" {
			if err := r.SetQueryParam("receivedDateFrom", qReceivedDateFrom); err != nil {
				return err
			}
		}

	}

	if o.ReceivedDateTo != nil {

		// query param receivedDateTo
		var qrReceivedDateTo string
		if o.ReceivedDateTo != nil {
			qrReceivedDateTo = *o.ReceivedDateTo
		}
		qReceivedDateTo := qrReceivedDateTo
		if qReceivedDateTo != "" {
			if err := r.SetQueryParam("receivedDateTo", qReceivedDateTo); err != nil {
				return err
			}
		}

	}

	if o.Sorting != nil {

		// query param sorting
		var qrSorting string
		if o.Sorting != nil {
			qrSorting = *o.Sorting
		}
		qSorting := qrSorting
		if qSorting != "" {
			if err := r.SetQueryParam("sorting", qSorting); err != nil {
				return err
			}
		}

	}

	if o.Status != nil {

		// query param status
		var qrStatus string
		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {
			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}

	}

	if o.WithoutPurchase != nil {

		// query param withoutPurchase
		var qrWithoutPurchase bool
		if o.WithoutPurchase != nil {
			qrWithoutPurchase = *o.WithoutPurchase
		}
		qWithoutPurchase := swag.FormatBool(qrWithoutPurchase)
		if qWithoutPurchase != "" {
			if err := r.SetQueryParam("withoutPurchase", qWithoutPurchase); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
