// Code generated by go-swagger; DO NOT EDIT.

package order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewOrderInvoiceInvoiceParams creates a new OrderInvoiceInvoiceParams object
// with the default values initialized.
func NewOrderInvoiceInvoiceParams() *OrderInvoiceInvoiceParams {
	var (
		sendToCustomerDefault = bool(true)
	)
	return &OrderInvoiceInvoiceParams{
		SendToCustomer: &sendToCustomerDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewOrderInvoiceInvoiceParamsWithTimeout creates a new OrderInvoiceInvoiceParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewOrderInvoiceInvoiceParamsWithTimeout(timeout time.Duration) *OrderInvoiceInvoiceParams {
	var (
		sendToCustomerDefault = bool(true)
	)
	return &OrderInvoiceInvoiceParams{
		SendToCustomer: &sendToCustomerDefault,

		timeout: timeout,
	}
}

// NewOrderInvoiceInvoiceParamsWithContext creates a new OrderInvoiceInvoiceParams object
// with the default values initialized, and the ability to set a context for a request
func NewOrderInvoiceInvoiceParamsWithContext(ctx context.Context) *OrderInvoiceInvoiceParams {
	var (
		sendToCustomerDefault = bool(true)
	)
	return &OrderInvoiceInvoiceParams{
		SendToCustomer: &sendToCustomerDefault,

		Context: ctx,
	}
}

// NewOrderInvoiceInvoiceParamsWithHTTPClient creates a new OrderInvoiceInvoiceParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewOrderInvoiceInvoiceParamsWithHTTPClient(client *http.Client) *OrderInvoiceInvoiceParams {
	var (
		sendToCustomerDefault = bool(true)
	)
	return &OrderInvoiceInvoiceParams{
		SendToCustomer: &sendToCustomerDefault,
		HTTPClient:     client,
	}
}

/*OrderInvoiceInvoiceParams contains all the parameters to send to the API endpoint
for the order invoice invoice operation typically these are written to a http.Request
*/
type OrderInvoiceInvoiceParams struct {

	/*ID
	  ID of order to invoice.

	*/
	ID int32
	/*InvoiceDate
	  The invoice date

	*/
	InvoiceDate string
	/*PaidAmount
	  Paid amount to register prepayment of the invoice, in invoice currency. paymentTypeId and paidAmount are optional, but both must be provided if the invoice has already been paid. This amount is in the invoice currency.

	*/
	PaidAmount *float64
	/*PaymentTypeID
	  Payment type to register prepayment of the invoice. paymentTypeId and paidAmount are optional, but both must be provided if the invoice has already been paid. The payment type must be related to an account with the same currency as the invoice.

	*/
	PaymentTypeID *int32
	/*SendToCustomer
	  Send invoice to customer

	*/
	SendToCustomer *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the order invoice invoice params
func (o *OrderInvoiceInvoiceParams) WithTimeout(timeout time.Duration) *OrderInvoiceInvoiceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the order invoice invoice params
func (o *OrderInvoiceInvoiceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the order invoice invoice params
func (o *OrderInvoiceInvoiceParams) WithContext(ctx context.Context) *OrderInvoiceInvoiceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the order invoice invoice params
func (o *OrderInvoiceInvoiceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the order invoice invoice params
func (o *OrderInvoiceInvoiceParams) WithHTTPClient(client *http.Client) *OrderInvoiceInvoiceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the order invoice invoice params
func (o *OrderInvoiceInvoiceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the order invoice invoice params
func (o *OrderInvoiceInvoiceParams) WithID(id int32) *OrderInvoiceInvoiceParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the order invoice invoice params
func (o *OrderInvoiceInvoiceParams) SetID(id int32) {
	o.ID = id
}

// WithInvoiceDate adds the invoiceDate to the order invoice invoice params
func (o *OrderInvoiceInvoiceParams) WithInvoiceDate(invoiceDate string) *OrderInvoiceInvoiceParams {
	o.SetInvoiceDate(invoiceDate)
	return o
}

// SetInvoiceDate adds the invoiceDate to the order invoice invoice params
func (o *OrderInvoiceInvoiceParams) SetInvoiceDate(invoiceDate string) {
	o.InvoiceDate = invoiceDate
}

// WithPaidAmount adds the paidAmount to the order invoice invoice params
func (o *OrderInvoiceInvoiceParams) WithPaidAmount(paidAmount *float64) *OrderInvoiceInvoiceParams {
	o.SetPaidAmount(paidAmount)
	return o
}

// SetPaidAmount adds the paidAmount to the order invoice invoice params
func (o *OrderInvoiceInvoiceParams) SetPaidAmount(paidAmount *float64) {
	o.PaidAmount = paidAmount
}

// WithPaymentTypeID adds the paymentTypeID to the order invoice invoice params
func (o *OrderInvoiceInvoiceParams) WithPaymentTypeID(paymentTypeID *int32) *OrderInvoiceInvoiceParams {
	o.SetPaymentTypeID(paymentTypeID)
	return o
}

// SetPaymentTypeID adds the paymentTypeId to the order invoice invoice params
func (o *OrderInvoiceInvoiceParams) SetPaymentTypeID(paymentTypeID *int32) {
	o.PaymentTypeID = paymentTypeID
}

// WithSendToCustomer adds the sendToCustomer to the order invoice invoice params
func (o *OrderInvoiceInvoiceParams) WithSendToCustomer(sendToCustomer *bool) *OrderInvoiceInvoiceParams {
	o.SetSendToCustomer(sendToCustomer)
	return o
}

// SetSendToCustomer adds the sendToCustomer to the order invoice invoice params
func (o *OrderInvoiceInvoiceParams) SetSendToCustomer(sendToCustomer *bool) {
	o.SendToCustomer = sendToCustomer
}

// WriteToRequest writes these params to a swagger request
func (o *OrderInvoiceInvoiceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt32(o.ID)); err != nil {
		return err
	}

	// query param invoiceDate
	qrInvoiceDate := o.InvoiceDate
	qInvoiceDate := qrInvoiceDate
	if qInvoiceDate != "" {
		if err := r.SetQueryParam("invoiceDate", qInvoiceDate); err != nil {
			return err
		}
	}

	if o.PaidAmount != nil {

		// query param paidAmount
		var qrPaidAmount float64
		if o.PaidAmount != nil {
			qrPaidAmount = *o.PaidAmount
		}
		qPaidAmount := swag.FormatFloat64(qrPaidAmount)
		if qPaidAmount != "" {
			if err := r.SetQueryParam("paidAmount", qPaidAmount); err != nil {
				return err
			}
		}

	}

	if o.PaymentTypeID != nil {

		// query param paymentTypeId
		var qrPaymentTypeID int32
		if o.PaymentTypeID != nil {
			qrPaymentTypeID = *o.PaymentTypeID
		}
		qPaymentTypeID := swag.FormatInt32(qrPaymentTypeID)
		if qPaymentTypeID != "" {
			if err := r.SetQueryParam("paymentTypeId", qPaymentTypeID); err != nil {
				return err
			}
		}

	}

	if o.SendToCustomer != nil {

		// query param sendToCustomer
		var qrSendToCustomer bool
		if o.SendToCustomer != nil {
			qrSendToCustomer = *o.SendToCustomer
		}
		qSendToCustomer := swag.FormatBool(qrSendToCustomer)
		if qSendToCustomer != "" {
			if err := r.SetQueryParam("sendToCustomer", qSendToCustomer); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
