// Code generated by go-swagger; DO NOT EDIT.

package supplier_invoice

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSupplierInvoiceAddPaymentAddPaymentParams creates a new SupplierInvoiceAddPaymentAddPaymentParams object
// with the default values initialized.
func NewSupplierInvoiceAddPaymentAddPaymentParams() *SupplierInvoiceAddPaymentAddPaymentParams {
	var (
		useDefaultPaymentTypeDefault = bool(false)
	)
	return &SupplierInvoiceAddPaymentAddPaymentParams{
		UseDefaultPaymentType: &useDefaultPaymentTypeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewSupplierInvoiceAddPaymentAddPaymentParamsWithTimeout creates a new SupplierInvoiceAddPaymentAddPaymentParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSupplierInvoiceAddPaymentAddPaymentParamsWithTimeout(timeout time.Duration) *SupplierInvoiceAddPaymentAddPaymentParams {
	var (
		useDefaultPaymentTypeDefault = bool(false)
	)
	return &SupplierInvoiceAddPaymentAddPaymentParams{
		UseDefaultPaymentType: &useDefaultPaymentTypeDefault,

		timeout: timeout,
	}
}

// NewSupplierInvoiceAddPaymentAddPaymentParamsWithContext creates a new SupplierInvoiceAddPaymentAddPaymentParams object
// with the default values initialized, and the ability to set a context for a request
func NewSupplierInvoiceAddPaymentAddPaymentParamsWithContext(ctx context.Context) *SupplierInvoiceAddPaymentAddPaymentParams {
	var (
		useDefaultPaymentTypeDefault = bool(false)
	)
	return &SupplierInvoiceAddPaymentAddPaymentParams{
		UseDefaultPaymentType: &useDefaultPaymentTypeDefault,

		Context: ctx,
	}
}

// NewSupplierInvoiceAddPaymentAddPaymentParamsWithHTTPClient creates a new SupplierInvoiceAddPaymentAddPaymentParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSupplierInvoiceAddPaymentAddPaymentParamsWithHTTPClient(client *http.Client) *SupplierInvoiceAddPaymentAddPaymentParams {
	var (
		useDefaultPaymentTypeDefault = bool(false)
	)
	return &SupplierInvoiceAddPaymentAddPaymentParams{
		UseDefaultPaymentType: &useDefaultPaymentTypeDefault,
		HTTPClient:            client,
	}
}

/*SupplierInvoiceAddPaymentAddPaymentParams contains all the parameters to send to the API endpoint
for the supplier invoice add payment add payment operation typically these are written to a http.Request
*/
type SupplierInvoiceAddPaymentAddPaymentParams struct {

	/*Amount*/
	Amount *string
	/*Bban*/
	Bban *string
	/*InvoiceID
	  Invoice ID.

	*/
	InvoiceID int32
	/*KidOrReceiverReference*/
	KidOrReceiverReference *string
	/*PaymentDate*/
	PaymentDate *string
	/*PaymentType*/
	PaymentType int32
	/*UseDefaultPaymentType
	  Set paymentType to last type for vendor, autopay, nets or first available other type

	*/
	UseDefaultPaymentType *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the supplier invoice add payment add payment params
func (o *SupplierInvoiceAddPaymentAddPaymentParams) WithTimeout(timeout time.Duration) *SupplierInvoiceAddPaymentAddPaymentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the supplier invoice add payment add payment params
func (o *SupplierInvoiceAddPaymentAddPaymentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the supplier invoice add payment add payment params
func (o *SupplierInvoiceAddPaymentAddPaymentParams) WithContext(ctx context.Context) *SupplierInvoiceAddPaymentAddPaymentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the supplier invoice add payment add payment params
func (o *SupplierInvoiceAddPaymentAddPaymentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the supplier invoice add payment add payment params
func (o *SupplierInvoiceAddPaymentAddPaymentParams) WithHTTPClient(client *http.Client) *SupplierInvoiceAddPaymentAddPaymentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the supplier invoice add payment add payment params
func (o *SupplierInvoiceAddPaymentAddPaymentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAmount adds the amount to the supplier invoice add payment add payment params
func (o *SupplierInvoiceAddPaymentAddPaymentParams) WithAmount(amount *string) *SupplierInvoiceAddPaymentAddPaymentParams {
	o.SetAmount(amount)
	return o
}

// SetAmount adds the amount to the supplier invoice add payment add payment params
func (o *SupplierInvoiceAddPaymentAddPaymentParams) SetAmount(amount *string) {
	o.Amount = amount
}

// WithBban adds the bban to the supplier invoice add payment add payment params
func (o *SupplierInvoiceAddPaymentAddPaymentParams) WithBban(bban *string) *SupplierInvoiceAddPaymentAddPaymentParams {
	o.SetBban(bban)
	return o
}

// SetBban adds the bban to the supplier invoice add payment add payment params
func (o *SupplierInvoiceAddPaymentAddPaymentParams) SetBban(bban *string) {
	o.Bban = bban
}

// WithInvoiceID adds the invoiceID to the supplier invoice add payment add payment params
func (o *SupplierInvoiceAddPaymentAddPaymentParams) WithInvoiceID(invoiceID int32) *SupplierInvoiceAddPaymentAddPaymentParams {
	o.SetInvoiceID(invoiceID)
	return o
}

// SetInvoiceID adds the invoiceId to the supplier invoice add payment add payment params
func (o *SupplierInvoiceAddPaymentAddPaymentParams) SetInvoiceID(invoiceID int32) {
	o.InvoiceID = invoiceID
}

// WithKidOrReceiverReference adds the kidOrReceiverReference to the supplier invoice add payment add payment params
func (o *SupplierInvoiceAddPaymentAddPaymentParams) WithKidOrReceiverReference(kidOrReceiverReference *string) *SupplierInvoiceAddPaymentAddPaymentParams {
	o.SetKidOrReceiverReference(kidOrReceiverReference)
	return o
}

// SetKidOrReceiverReference adds the kidOrReceiverReference to the supplier invoice add payment add payment params
func (o *SupplierInvoiceAddPaymentAddPaymentParams) SetKidOrReceiverReference(kidOrReceiverReference *string) {
	o.KidOrReceiverReference = kidOrReceiverReference
}

// WithPaymentDate adds the paymentDate to the supplier invoice add payment add payment params
func (o *SupplierInvoiceAddPaymentAddPaymentParams) WithPaymentDate(paymentDate *string) *SupplierInvoiceAddPaymentAddPaymentParams {
	o.SetPaymentDate(paymentDate)
	return o
}

// SetPaymentDate adds the paymentDate to the supplier invoice add payment add payment params
func (o *SupplierInvoiceAddPaymentAddPaymentParams) SetPaymentDate(paymentDate *string) {
	o.PaymentDate = paymentDate
}

// WithPaymentType adds the paymentType to the supplier invoice add payment add payment params
func (o *SupplierInvoiceAddPaymentAddPaymentParams) WithPaymentType(paymentType int32) *SupplierInvoiceAddPaymentAddPaymentParams {
	o.SetPaymentType(paymentType)
	return o
}

// SetPaymentType adds the paymentType to the supplier invoice add payment add payment params
func (o *SupplierInvoiceAddPaymentAddPaymentParams) SetPaymentType(paymentType int32) {
	o.PaymentType = paymentType
}

// WithUseDefaultPaymentType adds the useDefaultPaymentType to the supplier invoice add payment add payment params
func (o *SupplierInvoiceAddPaymentAddPaymentParams) WithUseDefaultPaymentType(useDefaultPaymentType *bool) *SupplierInvoiceAddPaymentAddPaymentParams {
	o.SetUseDefaultPaymentType(useDefaultPaymentType)
	return o
}

// SetUseDefaultPaymentType adds the useDefaultPaymentType to the supplier invoice add payment add payment params
func (o *SupplierInvoiceAddPaymentAddPaymentParams) SetUseDefaultPaymentType(useDefaultPaymentType *bool) {
	o.UseDefaultPaymentType = useDefaultPaymentType
}

// WriteToRequest writes these params to a swagger request
func (o *SupplierInvoiceAddPaymentAddPaymentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Amount != nil {

		// query param amount
		var qrAmount string
		if o.Amount != nil {
			qrAmount = *o.Amount
		}
		qAmount := qrAmount
		if qAmount != "" {
			if err := r.SetQueryParam("amount", qAmount); err != nil {
				return err
			}
		}

	}

	if o.Bban != nil {

		// query param bban
		var qrBban string
		if o.Bban != nil {
			qrBban = *o.Bban
		}
		qBban := qrBban
		if qBban != "" {
			if err := r.SetQueryParam("bban", qBban); err != nil {
				return err
			}
		}

	}

	// path param invoiceId
	if err := r.SetPathParam("invoiceId", swag.FormatInt32(o.InvoiceID)); err != nil {
		return err
	}

	if o.KidOrReceiverReference != nil {

		// query param kidOrReceiverReference
		var qrKidOrReceiverReference string
		if o.KidOrReceiverReference != nil {
			qrKidOrReceiverReference = *o.KidOrReceiverReference
		}
		qKidOrReceiverReference := qrKidOrReceiverReference
		if qKidOrReceiverReference != "" {
			if err := r.SetQueryParam("kidOrReceiverReference", qKidOrReceiverReference); err != nil {
				return err
			}
		}

	}

	if o.PaymentDate != nil {

		// query param paymentDate
		var qrPaymentDate string
		if o.PaymentDate != nil {
			qrPaymentDate = *o.PaymentDate
		}
		qPaymentDate := qrPaymentDate
		if qPaymentDate != "" {
			if err := r.SetQueryParam("paymentDate", qPaymentDate); err != nil {
				return err
			}
		}

	}

	// query param paymentType
	qrPaymentType := o.PaymentType
	qPaymentType := swag.FormatInt32(qrPaymentType)
	if qPaymentType != "" {
		if err := r.SetQueryParam("paymentType", qPaymentType); err != nil {
			return err
		}
	}

	if o.UseDefaultPaymentType != nil {

		// query param useDefaultPaymentType
		var qrUseDefaultPaymentType bool
		if o.UseDefaultPaymentType != nil {
			qrUseDefaultPaymentType = *o.UseDefaultPaymentType
		}
		qUseDefaultPaymentType := swag.FormatBool(qrUseDefaultPaymentType)
		if qUseDefaultPaymentType != "" {
			if err := r.SetQueryParam("useDefaultPaymentType", qUseDefaultPaymentType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
