// Copyright 2020 Bjerk AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package session

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewTokenSessionCreateCreateParams creates a new TokenSessionCreateCreateParams object
// with the default values initialized.
func NewTokenSessionCreateCreateParams() *TokenSessionCreateCreateParams {
	var ()
	return &TokenSessionCreateCreateParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTokenSessionCreateCreateParamsWithTimeout creates a new TokenSessionCreateCreateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTokenSessionCreateCreateParamsWithTimeout(timeout time.Duration) *TokenSessionCreateCreateParams {
	var ()
	return &TokenSessionCreateCreateParams{

		timeout: timeout,
	}
}

// NewTokenSessionCreateCreateParamsWithContext creates a new TokenSessionCreateCreateParams object
// with the default values initialized, and the ability to set a context for a request
func NewTokenSessionCreateCreateParamsWithContext(ctx context.Context) *TokenSessionCreateCreateParams {
	var ()
	return &TokenSessionCreateCreateParams{

		Context: ctx,
	}
}

// NewTokenSessionCreateCreateParamsWithHTTPClient creates a new TokenSessionCreateCreateParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTokenSessionCreateCreateParamsWithHTTPClient(client *http.Client) *TokenSessionCreateCreateParams {
	var ()
	return &TokenSessionCreateCreateParams{
		HTTPClient: client,
	}
}

/*TokenSessionCreateCreateParams contains all the parameters to send to the API endpoint
for the token session create create operation typically these are written to a http.Request
*/
type TokenSessionCreateCreateParams struct {

	/*ConsumerToken
	  Token of the API consumer

	*/
	ConsumerToken string
	/*EmployeeToken
	  The employees token

	*/
	EmployeeToken string
	/*ExpirationDate
	  Expiration date for the combined token

	*/
	ExpirationDate string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the token session create create params
func (o *TokenSessionCreateCreateParams) WithTimeout(timeout time.Duration) *TokenSessionCreateCreateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the token session create create params
func (o *TokenSessionCreateCreateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the token session create create params
func (o *TokenSessionCreateCreateParams) WithContext(ctx context.Context) *TokenSessionCreateCreateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the token session create create params
func (o *TokenSessionCreateCreateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the token session create create params
func (o *TokenSessionCreateCreateParams) WithHTTPClient(client *http.Client) *TokenSessionCreateCreateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the token session create create params
func (o *TokenSessionCreateCreateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConsumerToken adds the consumerToken to the token session create create params
func (o *TokenSessionCreateCreateParams) WithConsumerToken(consumerToken string) *TokenSessionCreateCreateParams {
	o.SetConsumerToken(consumerToken)
	return o
}

// SetConsumerToken adds the consumerToken to the token session create create params
func (o *TokenSessionCreateCreateParams) SetConsumerToken(consumerToken string) {
	o.ConsumerToken = consumerToken
}

// WithEmployeeToken adds the employeeToken to the token session create create params
func (o *TokenSessionCreateCreateParams) WithEmployeeToken(employeeToken string) *TokenSessionCreateCreateParams {
	o.SetEmployeeToken(employeeToken)
	return o
}

// SetEmployeeToken adds the employeeToken to the token session create create params
func (o *TokenSessionCreateCreateParams) SetEmployeeToken(employeeToken string) {
	o.EmployeeToken = employeeToken
}

// WithExpirationDate adds the expirationDate to the token session create create params
func (o *TokenSessionCreateCreateParams) WithExpirationDate(expirationDate string) *TokenSessionCreateCreateParams {
	o.SetExpirationDate(expirationDate)
	return o
}

// SetExpirationDate adds the expirationDate to the token session create create params
func (o *TokenSessionCreateCreateParams) SetExpirationDate(expirationDate string) {
	o.ExpirationDate = expirationDate
}

// WriteToRequest writes these params to a swagger request
func (o *TokenSessionCreateCreateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param consumerToken
	qrConsumerToken := o.ConsumerToken
	qConsumerToken := qrConsumerToken
	if qConsumerToken != "" {
		if err := r.SetQueryParam("consumerToken", qConsumerToken); err != nil {
			return err
		}
	}

	// query param employeeToken
	qrEmployeeToken := o.EmployeeToken
	qEmployeeToken := qrEmployeeToken
	if qEmployeeToken != "" {
		if err := r.SetQueryParam("employeeToken", qEmployeeToken); err != nil {
			return err
		}
	}

	// query param expirationDate
	qrExpirationDate := o.ExpirationDate
	qExpirationDate := qrExpirationDate
	if qExpirationDate != "" {
		if err := r.SetQueryParam("expirationDate", qExpirationDate); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
