// Code generated by go-swagger; DO NOT EDIT.

package compilation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSalaryCompilationGetParams creates a new SalaryCompilationGetParams object
// with the default values initialized.
func NewSalaryCompilationGetParams() *SalaryCompilationGetParams {
	var ()
	return &SalaryCompilationGetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSalaryCompilationGetParamsWithTimeout creates a new SalaryCompilationGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSalaryCompilationGetParamsWithTimeout(timeout time.Duration) *SalaryCompilationGetParams {
	var ()
	return &SalaryCompilationGetParams{

		timeout: timeout,
	}
}

// NewSalaryCompilationGetParamsWithContext creates a new SalaryCompilationGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewSalaryCompilationGetParamsWithContext(ctx context.Context) *SalaryCompilationGetParams {
	var ()
	return &SalaryCompilationGetParams{

		Context: ctx,
	}
}

// NewSalaryCompilationGetParamsWithHTTPClient creates a new SalaryCompilationGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSalaryCompilationGetParamsWithHTTPClient(client *http.Client) *SalaryCompilationGetParams {
	var ()
	return &SalaryCompilationGetParams{
		HTTPClient: client,
	}
}

/*SalaryCompilationGetParams contains all the parameters to send to the API endpoint
for the salary compilation get operation typically these are written to a http.Request
*/
type SalaryCompilationGetParams struct {

	/*EmployeeID
	  Element ID

	*/
	EmployeeID int32
	/*Fields
	  Fields filter pattern

	*/
	Fields *string
	/*Year
	  Must be between 1900-2100. Defaults to previous year.

	*/
	Year *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the salary compilation get params
func (o *SalaryCompilationGetParams) WithTimeout(timeout time.Duration) *SalaryCompilationGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the salary compilation get params
func (o *SalaryCompilationGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the salary compilation get params
func (o *SalaryCompilationGetParams) WithContext(ctx context.Context) *SalaryCompilationGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the salary compilation get params
func (o *SalaryCompilationGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the salary compilation get params
func (o *SalaryCompilationGetParams) WithHTTPClient(client *http.Client) *SalaryCompilationGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the salary compilation get params
func (o *SalaryCompilationGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEmployeeID adds the employeeID to the salary compilation get params
func (o *SalaryCompilationGetParams) WithEmployeeID(employeeID int32) *SalaryCompilationGetParams {
	o.SetEmployeeID(employeeID)
	return o
}

// SetEmployeeID adds the employeeId to the salary compilation get params
func (o *SalaryCompilationGetParams) SetEmployeeID(employeeID int32) {
	o.EmployeeID = employeeID
}

// WithFields adds the fields to the salary compilation get params
func (o *SalaryCompilationGetParams) WithFields(fields *string) *SalaryCompilationGetParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the salary compilation get params
func (o *SalaryCompilationGetParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithYear adds the year to the salary compilation get params
func (o *SalaryCompilationGetParams) WithYear(year *int32) *SalaryCompilationGetParams {
	o.SetYear(year)
	return o
}

// SetYear adds the year to the salary compilation get params
func (o *SalaryCompilationGetParams) SetYear(year *int32) {
	o.Year = year
}

// WriteToRequest writes these params to a swagger request
func (o *SalaryCompilationGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param employeeId
	qrEmployeeID := o.EmployeeID
	qEmployeeID := swag.FormatInt32(qrEmployeeID)
	if qEmployeeID != "" {
		if err := r.SetQueryParam("employeeId", qEmployeeID); err != nil {
			return err
		}
	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.Year != nil {

		// query param year
		var qrYear int32
		if o.Year != nil {
			qrYear = *o.Year
		}
		qYear := swag.FormatInt32(qrYear)
		if qYear != "" {
			if err := r.SetQueryParam("year", qYear); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
