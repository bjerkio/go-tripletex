// Code generated by go-swagger; DO NOT EDIT.

package purchase_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPurchaseOrderSendSendParams creates a new PurchaseOrderSendSendParams object
// with the default values initialized.
func NewPurchaseOrderSendSendParams() *PurchaseOrderSendSendParams {
	var (
		sendTypeDefault = string("DEFAULT")
	)
	return &PurchaseOrderSendSendParams{
		SendType: &sendTypeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewPurchaseOrderSendSendParamsWithTimeout creates a new PurchaseOrderSendSendParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPurchaseOrderSendSendParamsWithTimeout(timeout time.Duration) *PurchaseOrderSendSendParams {
	var (
		sendTypeDefault = string("DEFAULT")
	)
	return &PurchaseOrderSendSendParams{
		SendType: &sendTypeDefault,

		timeout: timeout,
	}
}

// NewPurchaseOrderSendSendParamsWithContext creates a new PurchaseOrderSendSendParams object
// with the default values initialized, and the ability to set a context for a request
func NewPurchaseOrderSendSendParamsWithContext(ctx context.Context) *PurchaseOrderSendSendParams {
	var (
		sendTypeDefault = string("DEFAULT")
	)
	return &PurchaseOrderSendSendParams{
		SendType: &sendTypeDefault,

		Context: ctx,
	}
}

// NewPurchaseOrderSendSendParamsWithHTTPClient creates a new PurchaseOrderSendSendParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPurchaseOrderSendSendParamsWithHTTPClient(client *http.Client) *PurchaseOrderSendSendParams {
	var (
		sendTypeDefault = string("DEFAULT")
	)
	return &PurchaseOrderSendSendParams{
		SendType:   &sendTypeDefault,
		HTTPClient: client,
	}
}

/*PurchaseOrderSendSendParams contains all the parameters to send to the API endpoint
for the purchase order send send operation typically these are written to a http.Request
*/
type PurchaseOrderSendSendParams struct {

	/*ID
	  Element ID

	*/
	ID int32
	/*SendType
	  Send type.DEFAULT will determine the send parameter based on the supplier type.

	*/
	SendType *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the purchase order send send params
func (o *PurchaseOrderSendSendParams) WithTimeout(timeout time.Duration) *PurchaseOrderSendSendParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the purchase order send send params
func (o *PurchaseOrderSendSendParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the purchase order send send params
func (o *PurchaseOrderSendSendParams) WithContext(ctx context.Context) *PurchaseOrderSendSendParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the purchase order send send params
func (o *PurchaseOrderSendSendParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the purchase order send send params
func (o *PurchaseOrderSendSendParams) WithHTTPClient(client *http.Client) *PurchaseOrderSendSendParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the purchase order send send params
func (o *PurchaseOrderSendSendParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the purchase order send send params
func (o *PurchaseOrderSendSendParams) WithID(id int32) *PurchaseOrderSendSendParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the purchase order send send params
func (o *PurchaseOrderSendSendParams) SetID(id int32) {
	o.ID = id
}

// WithSendType adds the sendType to the purchase order send send params
func (o *PurchaseOrderSendSendParams) WithSendType(sendType *string) *PurchaseOrderSendSendParams {
	o.SetSendType(sendType)
	return o
}

// SetSendType adds the sendType to the purchase order send send params
func (o *PurchaseOrderSendSendParams) SetSendType(sendType *string) {
	o.SendType = sendType
}

// WriteToRequest writes these params to a swagger request
func (o *PurchaseOrderSendSendParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt32(o.ID)); err != nil {
		return err
	}

	if o.SendType != nil {

		// query param sendType
		var qrSendType string
		if o.SendType != nil {
			qrSendType = *o.SendType
		}
		qSendType := qrSendType
		if qSendType != "" {
			if err := r.SetQueryParam("sendType", qSendType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
