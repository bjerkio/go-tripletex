// Copyright 2020 Bjerk AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package goods_receipt

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParams creates a new PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParams object
// with the default values initialized.
func NewPurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParams() *PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParams {
	var ()
	return &PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParamsWithTimeout creates a new PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParamsWithTimeout(timeout time.Duration) *PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParams {
	var ()
	return &PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParams{

		timeout: timeout,
	}
}

// NewPurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParamsWithContext creates a new PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParams object
// with the default values initialized, and the ability to set a context for a request
func NewPurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParamsWithContext(ctx context.Context) *PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParams {
	var ()
	return &PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParams{

		Context: ctx,
	}
}

// NewPurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParamsWithHTTPClient creates a new PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParamsWithHTTPClient(client *http.Client) *PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParams {
	var ()
	return &PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParams{
		HTTPClient: client,
	}
}

/*PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParams contains all the parameters to send to the API endpoint
for the purchase order goods receipt receive and confirm receive and confirm operation typically these are written to a http.Request
*/
type PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParams struct {

	/*ID
	  Purchase Order ID.

	*/
	ID int32
	/*InventoryID
	  ID of inventory. Main inventory is set as default

	*/
	InventoryID *int32
	/*ReceivedDate
	  The approval date for the subscription.

	*/
	ReceivedDate string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the purchase order goods receipt receive and confirm receive and confirm params
func (o *PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParams) WithTimeout(timeout time.Duration) *PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the purchase order goods receipt receive and confirm receive and confirm params
func (o *PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the purchase order goods receipt receive and confirm receive and confirm params
func (o *PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParams) WithContext(ctx context.Context) *PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the purchase order goods receipt receive and confirm receive and confirm params
func (o *PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the purchase order goods receipt receive and confirm receive and confirm params
func (o *PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParams) WithHTTPClient(client *http.Client) *PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the purchase order goods receipt receive and confirm receive and confirm params
func (o *PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the purchase order goods receipt receive and confirm receive and confirm params
func (o *PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParams) WithID(id int32) *PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the purchase order goods receipt receive and confirm receive and confirm params
func (o *PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParams) SetID(id int32) {
	o.ID = id
}

// WithInventoryID adds the inventoryID to the purchase order goods receipt receive and confirm receive and confirm params
func (o *PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParams) WithInventoryID(inventoryID *int32) *PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParams {
	o.SetInventoryID(inventoryID)
	return o
}

// SetInventoryID adds the inventoryId to the purchase order goods receipt receive and confirm receive and confirm params
func (o *PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParams) SetInventoryID(inventoryID *int32) {
	o.InventoryID = inventoryID
}

// WithReceivedDate adds the receivedDate to the purchase order goods receipt receive and confirm receive and confirm params
func (o *PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParams) WithReceivedDate(receivedDate string) *PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParams {
	o.SetReceivedDate(receivedDate)
	return o
}

// SetReceivedDate adds the receivedDate to the purchase order goods receipt receive and confirm receive and confirm params
func (o *PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParams) SetReceivedDate(receivedDate string) {
	o.ReceivedDate = receivedDate
}

// WriteToRequest writes these params to a swagger request
func (o *PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt32(o.ID)); err != nil {
		return err
	}

	if o.InventoryID != nil {

		// query param inventoryId
		var qrInventoryID int32
		if o.InventoryID != nil {
			qrInventoryID = *o.InventoryID
		}
		qInventoryID := swag.FormatInt32(qrInventoryID)
		if qInventoryID != "" {
			if err := r.SetQueryParam("inventoryId", qInventoryID); err != nil {
				return err
			}
		}

	}

	// query param receivedDate
	qrReceivedDate := o.ReceivedDate
	qReceivedDate := qrReceivedDate
	if qReceivedDate != "" {
		if err := r.SetQueryParam("receivedDate", qReceivedDate); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
