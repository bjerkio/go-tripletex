// Copyright 2020 Bjerk AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package invoice

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewInvoiceSendSendParams creates a new InvoiceSendSendParams object
// with the default values initialized.
func NewInvoiceSendSendParams() *InvoiceSendSendParams {
	var ()
	return &InvoiceSendSendParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewInvoiceSendSendParamsWithTimeout creates a new InvoiceSendSendParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewInvoiceSendSendParamsWithTimeout(timeout time.Duration) *InvoiceSendSendParams {
	var ()
	return &InvoiceSendSendParams{

		timeout: timeout,
	}
}

// NewInvoiceSendSendParamsWithContext creates a new InvoiceSendSendParams object
// with the default values initialized, and the ability to set a context for a request
func NewInvoiceSendSendParamsWithContext(ctx context.Context) *InvoiceSendSendParams {
	var ()
	return &InvoiceSendSendParams{

		Context: ctx,
	}
}

// NewInvoiceSendSendParamsWithHTTPClient creates a new InvoiceSendSendParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewInvoiceSendSendParamsWithHTTPClient(client *http.Client) *InvoiceSendSendParams {
	var ()
	return &InvoiceSendSendParams{
		HTTPClient: client,
	}
}

/*InvoiceSendSendParams contains all the parameters to send to the API endpoint
for the invoice send send operation typically these are written to a http.Request
*/
type InvoiceSendSendParams struct {

	/*ID
	  Element ID

	*/
	ID int32
	/*OverrideEmailAddress
	  Will override email address if sendType = EMAIL

	*/
	OverrideEmailAddress *string
	/*SendType
	  SendType

	*/
	SendType string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the invoice send send params
func (o *InvoiceSendSendParams) WithTimeout(timeout time.Duration) *InvoiceSendSendParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the invoice send send params
func (o *InvoiceSendSendParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the invoice send send params
func (o *InvoiceSendSendParams) WithContext(ctx context.Context) *InvoiceSendSendParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the invoice send send params
func (o *InvoiceSendSendParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the invoice send send params
func (o *InvoiceSendSendParams) WithHTTPClient(client *http.Client) *InvoiceSendSendParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the invoice send send params
func (o *InvoiceSendSendParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the invoice send send params
func (o *InvoiceSendSendParams) WithID(id int32) *InvoiceSendSendParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the invoice send send params
func (o *InvoiceSendSendParams) SetID(id int32) {
	o.ID = id
}

// WithOverrideEmailAddress adds the overrideEmailAddress to the invoice send send params
func (o *InvoiceSendSendParams) WithOverrideEmailAddress(overrideEmailAddress *string) *InvoiceSendSendParams {
	o.SetOverrideEmailAddress(overrideEmailAddress)
	return o
}

// SetOverrideEmailAddress adds the overrideEmailAddress to the invoice send send params
func (o *InvoiceSendSendParams) SetOverrideEmailAddress(overrideEmailAddress *string) {
	o.OverrideEmailAddress = overrideEmailAddress
}

// WithSendType adds the sendType to the invoice send send params
func (o *InvoiceSendSendParams) WithSendType(sendType string) *InvoiceSendSendParams {
	o.SetSendType(sendType)
	return o
}

// SetSendType adds the sendType to the invoice send send params
func (o *InvoiceSendSendParams) SetSendType(sendType string) {
	o.SendType = sendType
}

// WriteToRequest writes these params to a swagger request
func (o *InvoiceSendSendParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt32(o.ID)); err != nil {
		return err
	}

	if o.OverrideEmailAddress != nil {

		// query param overrideEmailAddress
		var qrOverrideEmailAddress string
		if o.OverrideEmailAddress != nil {
			qrOverrideEmailAddress = *o.OverrideEmailAddress
		}
		qOverrideEmailAddress := qrOverrideEmailAddress
		if qOverrideEmailAddress != "" {
			if err := r.SetQueryParam("overrideEmailAddress", qOverrideEmailAddress); err != nil {
				return err
			}
		}

	}

	// query param sendType
	qrSendType := o.SendType
	qSendType := qrSendType
	if qSendType != "" {
		if err := r.SetQueryParam("sendType", qSendType); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
