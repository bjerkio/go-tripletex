// Code generated by go-swagger; DO NOT EDIT.

package goods_receipt

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new goods receipt API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for goods receipt API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	PurchaseOrderGoodsReceiptConfirmConfirm(params *PurchaseOrderGoodsReceiptConfirmConfirmParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderGoodsReceiptConfirmConfirmOK, error)

	PurchaseOrderGoodsReceiptListDeleteByIds(params *PurchaseOrderGoodsReceiptListDeleteByIdsParams, authInfo runtime.ClientAuthInfoWriter) error

	PurchaseOrderGoodsReceiptListPostList(params *PurchaseOrderGoodsReceiptListPostListParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderGoodsReceiptListPostListCreated, error)

	PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirm(params *PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmOK, error)

	PurchaseOrderGoodsReceiptRegisterGoodsReceiptRegisterGoodsReceipt(params *PurchaseOrderGoodsReceiptRegisterGoodsReceiptRegisterGoodsReceiptParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderGoodsReceiptRegisterGoodsReceiptRegisterGoodsReceiptOK, error)

	PurchaseOrderGoodsReceiptDelete(params *PurchaseOrderGoodsReceiptDeleteParams, authInfo runtime.ClientAuthInfoWriter) error

	PurchaseOrderGoodsReceiptGet(params *PurchaseOrderGoodsReceiptGetParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderGoodsReceiptGetOK, error)

	PurchaseOrderGoodsReceiptPost(params *PurchaseOrderGoodsReceiptPostParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderGoodsReceiptPostCreated, error)

	PurchaseOrderGoodsReceiptPut(params *PurchaseOrderGoodsReceiptPutParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderGoodsReceiptPutOK, error)

	PurchaseOrderGoodsReceiptSearch(params *PurchaseOrderGoodsReceiptSearchParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderGoodsReceiptSearchOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  PurchaseOrderGoodsReceiptConfirmConfirm bs e t a confirm goods receipt only available for users that have activated the logistics plus beta program in our customer account
*/
func (a *Client) PurchaseOrderGoodsReceiptConfirmConfirm(params *PurchaseOrderGoodsReceiptConfirmConfirmParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderGoodsReceiptConfirmConfirmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPurchaseOrderGoodsReceiptConfirmConfirmParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PurchaseOrderGoodsReceiptConfirm_confirm",
		Method:             "PUT",
		PathPattern:        "/purchaseOrder/goodsReceipt/{id}/:confirm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PurchaseOrderGoodsReceiptConfirmConfirmReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PurchaseOrderGoodsReceiptConfirmConfirmOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PurchaseOrderGoodsReceiptConfirm_confirm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PurchaseOrderGoodsReceiptListDeleteByIds bs e t a delete multiple goods receipt by ID only available for users that have activated the logistics plus beta program in our customer account
*/
func (a *Client) PurchaseOrderGoodsReceiptListDeleteByIds(params *PurchaseOrderGoodsReceiptListDeleteByIdsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPurchaseOrderGoodsReceiptListDeleteByIdsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PurchaseOrderGoodsReceiptList_deleteByIds",
		Method:             "DELETE",
		PathPattern:        "/purchaseOrder/goodsReceipt/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PurchaseOrderGoodsReceiptListDeleteByIdsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  PurchaseOrderGoodsReceiptListPostList bs e t a register multiple goods receipt without an existing purchase order only available for users that have activated the logistics plus beta program in our customer account
*/
func (a *Client) PurchaseOrderGoodsReceiptListPostList(params *PurchaseOrderGoodsReceiptListPostListParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderGoodsReceiptListPostListCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPurchaseOrderGoodsReceiptListPostListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PurchaseOrderGoodsReceiptList_postList",
		Method:             "POST",
		PathPattern:        "/purchaseOrder/goodsReceipt/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PurchaseOrderGoodsReceiptListPostListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PurchaseOrderGoodsReceiptListPostListCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PurchaseOrderGoodsReceiptList_postList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirm bs e t a receive all ordered products and approve goods receipt only available for users that have activated the logistics logistics plus beta program in our customer account
*/
func (a *Client) PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirm(params *PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PurchaseOrderGoodsReceiptReceiveAndConfirm_receiveAndConfirm",
		Method:             "PUT",
		PathPattern:        "/purchaseOrder/goodsReceipt/{id}/:receiveAndConfirm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirmOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PurchaseOrderGoodsReceiptReceiveAndConfirm_receiveAndConfirm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PurchaseOrderGoodsReceiptRegisterGoodsReceiptRegisterGoodsReceipt bs e t a register goods receipt quantity received on the products is set to the same as quantity ordered to update the quantity received use p u t purchase order goods receipt line id only available for users that have activated the logistics plus beta program in our customer account
*/
func (a *Client) PurchaseOrderGoodsReceiptRegisterGoodsReceiptRegisterGoodsReceipt(params *PurchaseOrderGoodsReceiptRegisterGoodsReceiptRegisterGoodsReceiptParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderGoodsReceiptRegisterGoodsReceiptRegisterGoodsReceiptOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPurchaseOrderGoodsReceiptRegisterGoodsReceiptRegisterGoodsReceiptParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PurchaseOrderGoodsReceiptRegisterGoodsReceipt_registerGoodsReceipt",
		Method:             "PUT",
		PathPattern:        "/purchaseOrder/goodsReceipt/{id}/:registerGoodsReceipt",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PurchaseOrderGoodsReceiptRegisterGoodsReceiptRegisterGoodsReceiptReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PurchaseOrderGoodsReceiptRegisterGoodsReceiptRegisterGoodsReceiptOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PurchaseOrderGoodsReceiptRegisterGoodsReceipt_registerGoodsReceipt: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PurchaseOrderGoodsReceiptDelete bs e t a delete goods receipt by ID only available for users that have activated the logistics plus beta program in our customer account
*/
func (a *Client) PurchaseOrderGoodsReceiptDelete(params *PurchaseOrderGoodsReceiptDeleteParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPurchaseOrderGoodsReceiptDeleteParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PurchaseOrderGoodsReceipt_delete",
		Method:             "DELETE",
		PathPattern:        "/purchaseOrder/goodsReceipt/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PurchaseOrderGoodsReceiptDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  PurchaseOrderGoodsReceiptGet bs e t a get goods receipt by purchase order ID only available for users that have activated the logistics plus beta program in our customer account
*/
func (a *Client) PurchaseOrderGoodsReceiptGet(params *PurchaseOrderGoodsReceiptGetParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderGoodsReceiptGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPurchaseOrderGoodsReceiptGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PurchaseOrderGoodsReceipt_get",
		Method:             "GET",
		PathPattern:        "/purchaseOrder/goodsReceipt/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PurchaseOrderGoodsReceiptGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PurchaseOrderGoodsReceiptGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PurchaseOrderGoodsReceipt_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PurchaseOrderGoodsReceiptPost bs e t a register goods receipt without an existing purchase order when registration of several goods receipt use list for better performance only available for users that have activated the logistics plus beta program in our customer account
*/
func (a *Client) PurchaseOrderGoodsReceiptPost(params *PurchaseOrderGoodsReceiptPostParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderGoodsReceiptPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPurchaseOrderGoodsReceiptPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PurchaseOrderGoodsReceipt_post",
		Method:             "POST",
		PathPattern:        "/purchaseOrder/goodsReceipt",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PurchaseOrderGoodsReceiptPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PurchaseOrderGoodsReceiptPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PurchaseOrderGoodsReceipt_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PurchaseOrderGoodsReceiptPut bs e t a update goods receipt only available for users that have activated the logistics plus beta program in our customer account
*/
func (a *Client) PurchaseOrderGoodsReceiptPut(params *PurchaseOrderGoodsReceiptPutParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderGoodsReceiptPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPurchaseOrderGoodsReceiptPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PurchaseOrderGoodsReceipt_put",
		Method:             "PUT",
		PathPattern:        "/purchaseOrder/goodsReceipt/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PurchaseOrderGoodsReceiptPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PurchaseOrderGoodsReceiptPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PurchaseOrderGoodsReceipt_put: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PurchaseOrderGoodsReceiptSearch bs e t a get goods receipt only available for users that have activated the logistics plus beta program in our customer account
*/
func (a *Client) PurchaseOrderGoodsReceiptSearch(params *PurchaseOrderGoodsReceiptSearchParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderGoodsReceiptSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPurchaseOrderGoodsReceiptSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PurchaseOrderGoodsReceipt_search",
		Method:             "GET",
		PathPattern:        "/purchaseOrder/goodsReceipt",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PurchaseOrderGoodsReceiptSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PurchaseOrderGoodsReceiptSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PurchaseOrderGoodsReceipt_search: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
