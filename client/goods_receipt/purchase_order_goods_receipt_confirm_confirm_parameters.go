// Code generated by go-swagger; DO NOT EDIT.

package goods_receipt

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPurchaseOrderGoodsReceiptConfirmConfirmParams creates a new PurchaseOrderGoodsReceiptConfirmConfirmParams object
// with the default values initialized.
func NewPurchaseOrderGoodsReceiptConfirmConfirmParams() *PurchaseOrderGoodsReceiptConfirmConfirmParams {
	var (
		createRestOrderDefault = bool(false)
	)
	return &PurchaseOrderGoodsReceiptConfirmConfirmParams{
		CreateRestOrder: &createRestOrderDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewPurchaseOrderGoodsReceiptConfirmConfirmParamsWithTimeout creates a new PurchaseOrderGoodsReceiptConfirmConfirmParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPurchaseOrderGoodsReceiptConfirmConfirmParamsWithTimeout(timeout time.Duration) *PurchaseOrderGoodsReceiptConfirmConfirmParams {
	var (
		createRestOrderDefault = bool(false)
	)
	return &PurchaseOrderGoodsReceiptConfirmConfirmParams{
		CreateRestOrder: &createRestOrderDefault,

		timeout: timeout,
	}
}

// NewPurchaseOrderGoodsReceiptConfirmConfirmParamsWithContext creates a new PurchaseOrderGoodsReceiptConfirmConfirmParams object
// with the default values initialized, and the ability to set a context for a request
func NewPurchaseOrderGoodsReceiptConfirmConfirmParamsWithContext(ctx context.Context) *PurchaseOrderGoodsReceiptConfirmConfirmParams {
	var (
		createRestOrderDefault = bool(false)
	)
	return &PurchaseOrderGoodsReceiptConfirmConfirmParams{
		CreateRestOrder: &createRestOrderDefault,

		Context: ctx,
	}
}

// NewPurchaseOrderGoodsReceiptConfirmConfirmParamsWithHTTPClient creates a new PurchaseOrderGoodsReceiptConfirmConfirmParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPurchaseOrderGoodsReceiptConfirmConfirmParamsWithHTTPClient(client *http.Client) *PurchaseOrderGoodsReceiptConfirmConfirmParams {
	var (
		createRestOrderDefault = bool(false)
	)
	return &PurchaseOrderGoodsReceiptConfirmConfirmParams{
		CreateRestOrder: &createRestOrderDefault,
		HTTPClient:      client,
	}
}

/*PurchaseOrderGoodsReceiptConfirmConfirmParams contains all the parameters to send to the API endpoint
for the purchase order goods receipt confirm confirm operation typically these are written to a http.Request
*/
type PurchaseOrderGoodsReceiptConfirmConfirmParams struct {

	/*CreateRestOrder
	  Create restorder if quantity received is less than ordered

	*/
	CreateRestOrder *bool
	/*ID
	  Purchase Order ID.

	*/
	ID int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the purchase order goods receipt confirm confirm params
func (o *PurchaseOrderGoodsReceiptConfirmConfirmParams) WithTimeout(timeout time.Duration) *PurchaseOrderGoodsReceiptConfirmConfirmParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the purchase order goods receipt confirm confirm params
func (o *PurchaseOrderGoodsReceiptConfirmConfirmParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the purchase order goods receipt confirm confirm params
func (o *PurchaseOrderGoodsReceiptConfirmConfirmParams) WithContext(ctx context.Context) *PurchaseOrderGoodsReceiptConfirmConfirmParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the purchase order goods receipt confirm confirm params
func (o *PurchaseOrderGoodsReceiptConfirmConfirmParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the purchase order goods receipt confirm confirm params
func (o *PurchaseOrderGoodsReceiptConfirmConfirmParams) WithHTTPClient(client *http.Client) *PurchaseOrderGoodsReceiptConfirmConfirmParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the purchase order goods receipt confirm confirm params
func (o *PurchaseOrderGoodsReceiptConfirmConfirmParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCreateRestOrder adds the createRestOrder to the purchase order goods receipt confirm confirm params
func (o *PurchaseOrderGoodsReceiptConfirmConfirmParams) WithCreateRestOrder(createRestOrder *bool) *PurchaseOrderGoodsReceiptConfirmConfirmParams {
	o.SetCreateRestOrder(createRestOrder)
	return o
}

// SetCreateRestOrder adds the createRestOrder to the purchase order goods receipt confirm confirm params
func (o *PurchaseOrderGoodsReceiptConfirmConfirmParams) SetCreateRestOrder(createRestOrder *bool) {
	o.CreateRestOrder = createRestOrder
}

// WithID adds the id to the purchase order goods receipt confirm confirm params
func (o *PurchaseOrderGoodsReceiptConfirmConfirmParams) WithID(id int32) *PurchaseOrderGoodsReceiptConfirmConfirmParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the purchase order goods receipt confirm confirm params
func (o *PurchaseOrderGoodsReceiptConfirmConfirmParams) SetID(id int32) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *PurchaseOrderGoodsReceiptConfirmConfirmParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CreateRestOrder != nil {

		// query param createRestOrder
		var qrCreateRestOrder bool
		if o.CreateRestOrder != nil {
			qrCreateRestOrder = *o.CreateRestOrder
		}
		qCreateRestOrder := swag.FormatBool(qrCreateRestOrder)
		if qCreateRestOrder != "" {
			if err := r.SetQueryParam("createRestOrder", qCreateRestOrder); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt32(o.ID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
