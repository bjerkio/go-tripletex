// Copyright 2020 Bjerk AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Posting posting
//
// swagger:model Posting
type Posting struct {

	// account
	Account *Account `json:"account,omitempty"`

	// amount
	Amount float64 `json:"amount,omitempty"`

	// amount currency
	AmountCurrency float64 `json:"amountCurrency,omitempty"`

	// amount gross
	AmountGross float64 `json:"amountGross,omitempty"`

	// amount gross currency
	AmountGrossCurrency float64 `json:"amountGrossCurrency,omitempty"`

	// changes
	// Read Only: true
	Changes []*Change `json:"changes"`

	// close group
	CloseGroup *CloseGroup `json:"closeGroup,omitempty"`

	// currency
	Currency *Currency `json:"currency,omitempty"`

	// customer
	Customer *Customer `json:"customer,omitempty"`

	// date
	Date string `json:"date,omitempty"`

	// department
	Department *Department `json:"department,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// employee
	Employee *Employee `json:"employee,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// invoice number
	// Max Length: 100
	InvoiceNumber string `json:"invoiceNumber,omitempty"`

	// product
	Product *Product `json:"product,omitempty"`

	// project
	Project *Project `json:"project,omitempty"`

	// row
	// Minimum: 0
	Row *int32 `json:"row,omitempty"`

	// supplier
	Supplier *Supplier `json:"supplier,omitempty"`

	// system generated
	// Read Only: true
	SystemGenerated *bool `json:"systemGenerated,omitempty"`

	// term of payment
	TermOfPayment string `json:"termOfPayment,omitempty"`

	// url
	// Read Only: true
	URL string `json:"url,omitempty"`

	// vat type
	VatType *VatType `json:"vatType,omitempty"`

	// version
	Version int32 `json:"version,omitempty"`

	// voucher
	// Read Only: true
	Voucher *Voucher `json:"voucher,omitempty"`
}

// Validate validates this posting
func (m *Posting) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloseGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDepartment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmployee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvoiceNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProduct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupplier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVatType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVoucher(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Posting) validateAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.Account) { // not required
		return nil
	}

	if m.Account != nil {
		if err := m.Account.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("account")
			}
			return err
		}
	}

	return nil
}

func (m *Posting) validateChanges(formats strfmt.Registry) error {

	if swag.IsZero(m.Changes) { // not required
		return nil
	}

	for i := 0; i < len(m.Changes); i++ {
		if swag.IsZero(m.Changes[i]) { // not required
			continue
		}

		if m.Changes[i] != nil {
			if err := m.Changes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("changes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Posting) validateCloseGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.CloseGroup) { // not required
		return nil
	}

	if m.CloseGroup != nil {
		if err := m.CloseGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("closeGroup")
			}
			return err
		}
	}

	return nil
}

func (m *Posting) validateCurrency(formats strfmt.Registry) error {

	if swag.IsZero(m.Currency) { // not required
		return nil
	}

	if m.Currency != nil {
		if err := m.Currency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currency")
			}
			return err
		}
	}

	return nil
}

func (m *Posting) validateCustomer(formats strfmt.Registry) error {

	if swag.IsZero(m.Customer) { // not required
		return nil
	}

	if m.Customer != nil {
		if err := m.Customer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customer")
			}
			return err
		}
	}

	return nil
}

func (m *Posting) validateDepartment(formats strfmt.Registry) error {

	if swag.IsZero(m.Department) { // not required
		return nil
	}

	if m.Department != nil {
		if err := m.Department.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("department")
			}
			return err
		}
	}

	return nil
}

func (m *Posting) validateEmployee(formats strfmt.Registry) error {

	if swag.IsZero(m.Employee) { // not required
		return nil
	}

	if m.Employee != nil {
		if err := m.Employee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("employee")
			}
			return err
		}
	}

	return nil
}

func (m *Posting) validateInvoiceNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.InvoiceNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("invoiceNumber", "body", string(m.InvoiceNumber), 100); err != nil {
		return err
	}

	return nil
}

func (m *Posting) validateProduct(formats strfmt.Registry) error {

	if swag.IsZero(m.Product) { // not required
		return nil
	}

	if m.Product != nil {
		if err := m.Product.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("product")
			}
			return err
		}
	}

	return nil
}

func (m *Posting) validateProject(formats strfmt.Registry) error {

	if swag.IsZero(m.Project) { // not required
		return nil
	}

	if m.Project != nil {
		if err := m.Project.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("project")
			}
			return err
		}
	}

	return nil
}

func (m *Posting) validateRow(formats strfmt.Registry) error {

	if swag.IsZero(m.Row) { // not required
		return nil
	}

	if err := validate.MinimumInt("row", "body", int64(*m.Row), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Posting) validateSupplier(formats strfmt.Registry) error {

	if swag.IsZero(m.Supplier) { // not required
		return nil
	}

	if m.Supplier != nil {
		if err := m.Supplier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("supplier")
			}
			return err
		}
	}

	return nil
}

func (m *Posting) validateVatType(formats strfmt.Registry) error {

	if swag.IsZero(m.VatType) { // not required
		return nil
	}

	if m.VatType != nil {
		if err := m.VatType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vatType")
			}
			return err
		}
	}

	return nil
}

func (m *Posting) validateVoucher(formats strfmt.Registry) error {

	if swag.IsZero(m.Voucher) { // not required
		return nil
	}

	if m.Voucher != nil {
		if err := m.Voucher.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("voucher")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Posting) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Posting) UnmarshalBinary(b []byte) error {
	var res Posting
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
