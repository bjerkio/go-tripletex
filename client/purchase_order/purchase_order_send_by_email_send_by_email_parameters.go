// Copyright 2020 Bjerk AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package purchase_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPurchaseOrderSendByEmailSendByEmailParams creates a new PurchaseOrderSendByEmailSendByEmailParams object
// with the default values initialized.
func NewPurchaseOrderSendByEmailSendByEmailParams() *PurchaseOrderSendByEmailSendByEmailParams {
	var ()
	return &PurchaseOrderSendByEmailSendByEmailParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPurchaseOrderSendByEmailSendByEmailParamsWithTimeout creates a new PurchaseOrderSendByEmailSendByEmailParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPurchaseOrderSendByEmailSendByEmailParamsWithTimeout(timeout time.Duration) *PurchaseOrderSendByEmailSendByEmailParams {
	var ()
	return &PurchaseOrderSendByEmailSendByEmailParams{

		timeout: timeout,
	}
}

// NewPurchaseOrderSendByEmailSendByEmailParamsWithContext creates a new PurchaseOrderSendByEmailSendByEmailParams object
// with the default values initialized, and the ability to set a context for a request
func NewPurchaseOrderSendByEmailSendByEmailParamsWithContext(ctx context.Context) *PurchaseOrderSendByEmailSendByEmailParams {
	var ()
	return &PurchaseOrderSendByEmailSendByEmailParams{

		Context: ctx,
	}
}

// NewPurchaseOrderSendByEmailSendByEmailParamsWithHTTPClient creates a new PurchaseOrderSendByEmailSendByEmailParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPurchaseOrderSendByEmailSendByEmailParamsWithHTTPClient(client *http.Client) *PurchaseOrderSendByEmailSendByEmailParams {
	var ()
	return &PurchaseOrderSendByEmailSendByEmailParams{
		HTTPClient: client,
	}
}

/*PurchaseOrderSendByEmailSendByEmailParams contains all the parameters to send to the API endpoint
for the purchase order send by email send by email operation typically these are written to a http.Request
*/
type PurchaseOrderSendByEmailSendByEmailParams struct {

	/*EmailAddress
	  Email address

	*/
	EmailAddress string
	/*ID
	  Element ID

	*/
	ID int32
	/*Message
	  Message

	*/
	Message *string
	/*Subject
	  Subject

	*/
	Subject string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the purchase order send by email send by email params
func (o *PurchaseOrderSendByEmailSendByEmailParams) WithTimeout(timeout time.Duration) *PurchaseOrderSendByEmailSendByEmailParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the purchase order send by email send by email params
func (o *PurchaseOrderSendByEmailSendByEmailParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the purchase order send by email send by email params
func (o *PurchaseOrderSendByEmailSendByEmailParams) WithContext(ctx context.Context) *PurchaseOrderSendByEmailSendByEmailParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the purchase order send by email send by email params
func (o *PurchaseOrderSendByEmailSendByEmailParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the purchase order send by email send by email params
func (o *PurchaseOrderSendByEmailSendByEmailParams) WithHTTPClient(client *http.Client) *PurchaseOrderSendByEmailSendByEmailParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the purchase order send by email send by email params
func (o *PurchaseOrderSendByEmailSendByEmailParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEmailAddress adds the emailAddress to the purchase order send by email send by email params
func (o *PurchaseOrderSendByEmailSendByEmailParams) WithEmailAddress(emailAddress string) *PurchaseOrderSendByEmailSendByEmailParams {
	o.SetEmailAddress(emailAddress)
	return o
}

// SetEmailAddress adds the emailAddress to the purchase order send by email send by email params
func (o *PurchaseOrderSendByEmailSendByEmailParams) SetEmailAddress(emailAddress string) {
	o.EmailAddress = emailAddress
}

// WithID adds the id to the purchase order send by email send by email params
func (o *PurchaseOrderSendByEmailSendByEmailParams) WithID(id int32) *PurchaseOrderSendByEmailSendByEmailParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the purchase order send by email send by email params
func (o *PurchaseOrderSendByEmailSendByEmailParams) SetID(id int32) {
	o.ID = id
}

// WithMessage adds the message to the purchase order send by email send by email params
func (o *PurchaseOrderSendByEmailSendByEmailParams) WithMessage(message *string) *PurchaseOrderSendByEmailSendByEmailParams {
	o.SetMessage(message)
	return o
}

// SetMessage adds the message to the purchase order send by email send by email params
func (o *PurchaseOrderSendByEmailSendByEmailParams) SetMessage(message *string) {
	o.Message = message
}

// WithSubject adds the subject to the purchase order send by email send by email params
func (o *PurchaseOrderSendByEmailSendByEmailParams) WithSubject(subject string) *PurchaseOrderSendByEmailSendByEmailParams {
	o.SetSubject(subject)
	return o
}

// SetSubject adds the subject to the purchase order send by email send by email params
func (o *PurchaseOrderSendByEmailSendByEmailParams) SetSubject(subject string) {
	o.Subject = subject
}

// WriteToRequest writes these params to a swagger request
func (o *PurchaseOrderSendByEmailSendByEmailParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param emailAddress
	qrEmailAddress := o.EmailAddress
	qEmailAddress := qrEmailAddress
	if qEmailAddress != "" {
		if err := r.SetQueryParam("emailAddress", qEmailAddress); err != nil {
			return err
		}
	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt32(o.ID)); err != nil {
		return err
	}

	if o.Message != nil {

		// query param message
		var qrMessage string
		if o.Message != nil {
			qrMessage = *o.Message
		}
		qMessage := qrMessage
		if qMessage != "" {
			if err := r.SetQueryParam("message", qMessage); err != nil {
				return err
			}
		}

	}

	// query param subject
	qrSubject := o.Subject
	qSubject := qrSubject
	if qSubject != "" {
		if err := r.SetQueryParam("subject", qSubject); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
