// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InternationalID international Id
//
// swagger:model InternationalId
type InternationalID struct {

	// country
	Country *Country `json:"country,omitempty"`

	// Define the employee's International Identificator.<br>PASSPORT_NO<br>NATIONAL_INSURANCE_NO<br>TAX_IDENTIFICATION_NO<br>VALUE_ADDED_TAX_IDENTIFICATION_NO
	// Enum: [PASSPORT_NO NATIONAL_INSURANCE_NO TAX_IDENTIFICATION_NO VALUE_ADDED_TAX_IDENTIFICATION_NO]
	IntAmeldingType string `json:"intAmeldingType,omitempty"`

	// number
	// Max Length: 100
	Number string `json:"number,omitempty"`
}

// Validate validates this international Id
func (m *InternationalID) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntAmeldingType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InternationalID) validateCountry(formats strfmt.Registry) error {

	if swag.IsZero(m.Country) { // not required
		return nil
	}

	if m.Country != nil {
		if err := m.Country.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("country")
			}
			return err
		}
	}

	return nil
}

var internationalIdTypeIntAmeldingTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PASSPORT_NO","NATIONAL_INSURANCE_NO","TAX_IDENTIFICATION_NO","VALUE_ADDED_TAX_IDENTIFICATION_NO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		internationalIdTypeIntAmeldingTypePropEnum = append(internationalIdTypeIntAmeldingTypePropEnum, v)
	}
}

const (

	// InternationalIDIntAmeldingTypePASSPORTNO captures enum value "PASSPORT_NO"
	InternationalIDIntAmeldingTypePASSPORTNO string = "PASSPORT_NO"

	// InternationalIDIntAmeldingTypeNATIONALINSURANCENO captures enum value "NATIONAL_INSURANCE_NO"
	InternationalIDIntAmeldingTypeNATIONALINSURANCENO string = "NATIONAL_INSURANCE_NO"

	// InternationalIDIntAmeldingTypeTAXIDENTIFICATIONNO captures enum value "TAX_IDENTIFICATION_NO"
	InternationalIDIntAmeldingTypeTAXIDENTIFICATIONNO string = "TAX_IDENTIFICATION_NO"

	// InternationalIDIntAmeldingTypeVALUEADDEDTAXIDENTIFICATIONNO captures enum value "VALUE_ADDED_TAX_IDENTIFICATION_NO"
	InternationalIDIntAmeldingTypeVALUEADDEDTAXIDENTIFICATIONNO string = "VALUE_ADDED_TAX_IDENTIFICATION_NO"
)

// prop value enum
func (m *InternationalID) validateIntAmeldingTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, internationalIdTypeIntAmeldingTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *InternationalID) validateIntAmeldingType(formats strfmt.Registry) error {

	if swag.IsZero(m.IntAmeldingType) { // not required
		return nil
	}

	// value enum
	if err := m.validateIntAmeldingTypeEnum("intAmeldingType", "body", m.IntAmeldingType); err != nil {
		return err
	}

	return nil
}

func (m *InternationalID) validateNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.Number) { // not required
		return nil
	}

	if err := validate.MaxLength("number", "body", string(m.Number), 100); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InternationalID) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InternationalID) UnmarshalBinary(b []byte) error {
	var res InternationalID
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
