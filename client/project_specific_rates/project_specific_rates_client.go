// Code generated by go-swagger; DO NOT EDIT.

package project_specific_rates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new project specific rates API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for project specific rates API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ProjectHourlyRatesProjectSpecificRatesListDeleteByIds(params *ProjectHourlyRatesProjectSpecificRatesListDeleteByIdsParams, authInfo runtime.ClientAuthInfoWriter) error

	ProjectHourlyRatesProjectSpecificRatesListPostList(params *ProjectHourlyRatesProjectSpecificRatesListPostListParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectHourlyRatesProjectSpecificRatesListPostListCreated, error)

	ProjectHourlyRatesProjectSpecificRatesListPutList(params *ProjectHourlyRatesProjectSpecificRatesListPutListParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectHourlyRatesProjectSpecificRatesListPutListOK, error)

	ProjectHourlyRatesProjectSpecificRatesDelete(params *ProjectHourlyRatesProjectSpecificRatesDeleteParams, authInfo runtime.ClientAuthInfoWriter) error

	ProjectHourlyRatesProjectSpecificRatesGet(params *ProjectHourlyRatesProjectSpecificRatesGetParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectHourlyRatesProjectSpecificRatesGetOK, error)

	ProjectHourlyRatesProjectSpecificRatesPost(params *ProjectHourlyRatesProjectSpecificRatesPostParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectHourlyRatesProjectSpecificRatesPostCreated, error)

	ProjectHourlyRatesProjectSpecificRatesPut(params *ProjectHourlyRatesProjectSpecificRatesPutParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectHourlyRatesProjectSpecificRatesPutOK, error)

	ProjectHourlyRatesProjectSpecificRatesSearch(params *ProjectHourlyRatesProjectSpecificRatesSearchParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectHourlyRatesProjectSpecificRatesSearchOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ProjectHourlyRatesProjectSpecificRatesListDeleteByIds deletes project specific rates
*/
func (a *Client) ProjectHourlyRatesProjectSpecificRatesListDeleteByIds(params *ProjectHourlyRatesProjectSpecificRatesListDeleteByIdsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectHourlyRatesProjectSpecificRatesListDeleteByIdsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectHourlyRatesProjectSpecificRatesList_deleteByIds",
		Method:             "DELETE",
		PathPattern:        "/project/hourlyRates/projectSpecificRates/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectHourlyRatesProjectSpecificRatesListDeleteByIdsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  ProjectHourlyRatesProjectSpecificRatesListPostList creates multiple new project specific rates
*/
func (a *Client) ProjectHourlyRatesProjectSpecificRatesListPostList(params *ProjectHourlyRatesProjectSpecificRatesListPostListParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectHourlyRatesProjectSpecificRatesListPostListCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectHourlyRatesProjectSpecificRatesListPostListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectHourlyRatesProjectSpecificRatesList_postList",
		Method:             "POST",
		PathPattern:        "/project/hourlyRates/projectSpecificRates/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectHourlyRatesProjectSpecificRatesListPostListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectHourlyRatesProjectSpecificRatesListPostListCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProjectHourlyRatesProjectSpecificRatesList_postList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectHourlyRatesProjectSpecificRatesListPutList updates multiple project specific rates
*/
func (a *Client) ProjectHourlyRatesProjectSpecificRatesListPutList(params *ProjectHourlyRatesProjectSpecificRatesListPutListParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectHourlyRatesProjectSpecificRatesListPutListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectHourlyRatesProjectSpecificRatesListPutListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectHourlyRatesProjectSpecificRatesList_putList",
		Method:             "PUT",
		PathPattern:        "/project/hourlyRates/projectSpecificRates/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectHourlyRatesProjectSpecificRatesListPutListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectHourlyRatesProjectSpecificRatesListPutListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProjectHourlyRatesProjectSpecificRatesList_putList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectHourlyRatesProjectSpecificRatesDelete deletes project specific rate
*/
func (a *Client) ProjectHourlyRatesProjectSpecificRatesDelete(params *ProjectHourlyRatesProjectSpecificRatesDeleteParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectHourlyRatesProjectSpecificRatesDeleteParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectHourlyRatesProjectSpecificRates_delete",
		Method:             "DELETE",
		PathPattern:        "/project/hourlyRates/projectSpecificRates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectHourlyRatesProjectSpecificRatesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  ProjectHourlyRatesProjectSpecificRatesGet finds project specific rate by ID
*/
func (a *Client) ProjectHourlyRatesProjectSpecificRatesGet(params *ProjectHourlyRatesProjectSpecificRatesGetParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectHourlyRatesProjectSpecificRatesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectHourlyRatesProjectSpecificRatesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectHourlyRatesProjectSpecificRates_get",
		Method:             "GET",
		PathPattern:        "/project/hourlyRates/projectSpecificRates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectHourlyRatesProjectSpecificRatesGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectHourlyRatesProjectSpecificRatesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProjectHourlyRatesProjectSpecificRates_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectHourlyRatesProjectSpecificRatesPost creates new project specific rate
*/
func (a *Client) ProjectHourlyRatesProjectSpecificRatesPost(params *ProjectHourlyRatesProjectSpecificRatesPostParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectHourlyRatesProjectSpecificRatesPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectHourlyRatesProjectSpecificRatesPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectHourlyRatesProjectSpecificRates_post",
		Method:             "POST",
		PathPattern:        "/project/hourlyRates/projectSpecificRates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectHourlyRatesProjectSpecificRatesPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectHourlyRatesProjectSpecificRatesPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProjectHourlyRatesProjectSpecificRates_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectHourlyRatesProjectSpecificRatesPut updates a project specific rate
*/
func (a *Client) ProjectHourlyRatesProjectSpecificRatesPut(params *ProjectHourlyRatesProjectSpecificRatesPutParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectHourlyRatesProjectSpecificRatesPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectHourlyRatesProjectSpecificRatesPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectHourlyRatesProjectSpecificRates_put",
		Method:             "PUT",
		PathPattern:        "/project/hourlyRates/projectSpecificRates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectHourlyRatesProjectSpecificRatesPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectHourlyRatesProjectSpecificRatesPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProjectHourlyRatesProjectSpecificRates_put: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectHourlyRatesProjectSpecificRatesSearch finds project specific rates corresponding with sent data
*/
func (a *Client) ProjectHourlyRatesProjectSpecificRatesSearch(params *ProjectHourlyRatesProjectSpecificRatesSearchParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectHourlyRatesProjectSpecificRatesSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectHourlyRatesProjectSpecificRatesSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectHourlyRatesProjectSpecificRates_search",
		Method:             "GET",
		PathPattern:        "/project/hourlyRates/projectSpecificRates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectHourlyRatesProjectSpecificRatesSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectHourlyRatesProjectSpecificRatesSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProjectHourlyRatesProjectSpecificRates_search: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
