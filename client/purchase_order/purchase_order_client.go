// Code generated by go-swagger; DO NOT EDIT.

package purchase_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new purchase order API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for purchase order API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	PurchaseOrderSendByEmailSendByEmail(params *PurchaseOrderSendByEmailSendByEmailParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderSendByEmailSendByEmailOK, error)

	PurchaseOrderSendSend(params *PurchaseOrderSendSendParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderSendSendOK, error)

	PurchaseOrderDelete(params *PurchaseOrderDeleteParams, authInfo runtime.ClientAuthInfoWriter) error

	PurchaseOrderGet(params *PurchaseOrderGetParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderGetOK, error)

	PurchaseOrderPost(params *PurchaseOrderPostParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderPostCreated, error)

	PurchaseOrderPut(params *PurchaseOrderPutParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderPutOK, error)

	PurchaseOrderSearch(params *PurchaseOrderSearchParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderSearchOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  PurchaseOrderSendByEmailSendByEmail bs e t a send purchase order by customisable email
*/
func (a *Client) PurchaseOrderSendByEmailSendByEmail(params *PurchaseOrderSendByEmailSendByEmailParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderSendByEmailSendByEmailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPurchaseOrderSendByEmailSendByEmailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PurchaseOrderSendByEmail_sendByEmail",
		Method:             "PUT",
		PathPattern:        "/purchaseOrder/{id}/:sendByEmail",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PurchaseOrderSendByEmailSendByEmailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PurchaseOrderSendByEmailSendByEmailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PurchaseOrderSendByEmail_sendByEmail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PurchaseOrderSendSend bs e t a send purchase order by id and send type
*/
func (a *Client) PurchaseOrderSendSend(params *PurchaseOrderSendSendParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderSendSendOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPurchaseOrderSendSendParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PurchaseOrderSend_send",
		Method:             "PUT",
		PathPattern:        "/purchaseOrder/{id}/:send",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PurchaseOrderSendSendReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PurchaseOrderSendSendOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PurchaseOrderSend_send: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PurchaseOrderDelete bs e t a delete purchase order
*/
func (a *Client) PurchaseOrderDelete(params *PurchaseOrderDeleteParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPurchaseOrderDeleteParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PurchaseOrder_delete",
		Method:             "DELETE",
		PathPattern:        "/purchaseOrder/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PurchaseOrderDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  PurchaseOrderGet bs e t a find purchase order by ID
*/
func (a *Client) PurchaseOrderGet(params *PurchaseOrderGetParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPurchaseOrderGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PurchaseOrder_get",
		Method:             "GET",
		PathPattern:        "/purchaseOrder/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PurchaseOrderGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PurchaseOrderGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PurchaseOrder_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PurchaseOrderPost bs e t a creates a new purchase order
*/
func (a *Client) PurchaseOrderPost(params *PurchaseOrderPostParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPurchaseOrderPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PurchaseOrder_post",
		Method:             "POST",
		PathPattern:        "/purchaseOrder",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PurchaseOrderPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PurchaseOrderPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PurchaseOrder_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PurchaseOrderPut bs e t a update purchase order
*/
func (a *Client) PurchaseOrderPut(params *PurchaseOrderPutParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPurchaseOrderPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PurchaseOrder_put",
		Method:             "PUT",
		PathPattern:        "/purchaseOrder/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PurchaseOrderPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PurchaseOrderPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PurchaseOrder_put: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PurchaseOrderSearch bs e t a find purchase orders with send data
*/
func (a *Client) PurchaseOrderSearch(params *PurchaseOrderSearchParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPurchaseOrderSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PurchaseOrder_search",
		Method:             "GET",
		PathPattern:        "/purchaseOrder",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PurchaseOrderSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PurchaseOrderSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PurchaseOrder_search: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
