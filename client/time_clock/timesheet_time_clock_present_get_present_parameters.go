// Code generated by go-swagger; DO NOT EDIT.

package time_clock

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewTimesheetTimeClockPresentGetPresentParams creates a new TimesheetTimeClockPresentGetPresentParams object
// with the default values initialized.
func NewTimesheetTimeClockPresentGetPresentParams() *TimesheetTimeClockPresentGetPresentParams {
	var ()
	return &TimesheetTimeClockPresentGetPresentParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTimesheetTimeClockPresentGetPresentParamsWithTimeout creates a new TimesheetTimeClockPresentGetPresentParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTimesheetTimeClockPresentGetPresentParamsWithTimeout(timeout time.Duration) *TimesheetTimeClockPresentGetPresentParams {
	var ()
	return &TimesheetTimeClockPresentGetPresentParams{

		timeout: timeout,
	}
}

// NewTimesheetTimeClockPresentGetPresentParamsWithContext creates a new TimesheetTimeClockPresentGetPresentParams object
// with the default values initialized, and the ability to set a context for a request
func NewTimesheetTimeClockPresentGetPresentParamsWithContext(ctx context.Context) *TimesheetTimeClockPresentGetPresentParams {
	var ()
	return &TimesheetTimeClockPresentGetPresentParams{

		Context: ctx,
	}
}

// NewTimesheetTimeClockPresentGetPresentParamsWithHTTPClient creates a new TimesheetTimeClockPresentGetPresentParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTimesheetTimeClockPresentGetPresentParamsWithHTTPClient(client *http.Client) *TimesheetTimeClockPresentGetPresentParams {
	var ()
	return &TimesheetTimeClockPresentGetPresentParams{
		HTTPClient: client,
	}
}

/*TimesheetTimeClockPresentGetPresentParams contains all the parameters to send to the API endpoint
for the timesheet time clock present get present operation typically these are written to a http.Request
*/
type TimesheetTimeClockPresentGetPresentParams struct {

	/*EmployeeID
	  Employee ID. Defaults to ID of token owner.

	*/
	EmployeeID *int32
	/*Fields
	  Fields filter pattern

	*/
	Fields *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the timesheet time clock present get present params
func (o *TimesheetTimeClockPresentGetPresentParams) WithTimeout(timeout time.Duration) *TimesheetTimeClockPresentGetPresentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the timesheet time clock present get present params
func (o *TimesheetTimeClockPresentGetPresentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the timesheet time clock present get present params
func (o *TimesheetTimeClockPresentGetPresentParams) WithContext(ctx context.Context) *TimesheetTimeClockPresentGetPresentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the timesheet time clock present get present params
func (o *TimesheetTimeClockPresentGetPresentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the timesheet time clock present get present params
func (o *TimesheetTimeClockPresentGetPresentParams) WithHTTPClient(client *http.Client) *TimesheetTimeClockPresentGetPresentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the timesheet time clock present get present params
func (o *TimesheetTimeClockPresentGetPresentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEmployeeID adds the employeeID to the timesheet time clock present get present params
func (o *TimesheetTimeClockPresentGetPresentParams) WithEmployeeID(employeeID *int32) *TimesheetTimeClockPresentGetPresentParams {
	o.SetEmployeeID(employeeID)
	return o
}

// SetEmployeeID adds the employeeId to the timesheet time clock present get present params
func (o *TimesheetTimeClockPresentGetPresentParams) SetEmployeeID(employeeID *int32) {
	o.EmployeeID = employeeID
}

// WithFields adds the fields to the timesheet time clock present get present params
func (o *TimesheetTimeClockPresentGetPresentParams) WithFields(fields *string) *TimesheetTimeClockPresentGetPresentParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the timesheet time clock present get present params
func (o *TimesheetTimeClockPresentGetPresentParams) SetFields(fields *string) {
	o.Fields = fields
}

// WriteToRequest writes these params to a swagger request
func (o *TimesheetTimeClockPresentGetPresentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EmployeeID != nil {

		// query param employeeId
		var qrEmployeeID int32
		if o.EmployeeID != nil {
			qrEmployeeID = *o.EmployeeID
		}
		qEmployeeID := swag.FormatInt32(qrEmployeeID)
		if qEmployeeID != "" {
			if err := r.SetQueryParam("employeeId", qEmployeeID); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
