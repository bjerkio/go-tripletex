// Code generated by go-swagger; DO NOT EDIT.

package subscription

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new subscription API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for subscription API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	EventSubscriptionDelete(params *EventSubscriptionDeleteParams, authInfo runtime.ClientAuthInfoWriter) error

	EventSubscriptionGet(params *EventSubscriptionGetParams, authInfo runtime.ClientAuthInfoWriter) (*EventSubscriptionGetOK, error)

	EventSubscriptionPost(params *EventSubscriptionPostParams, authInfo runtime.ClientAuthInfoWriter) (*EventSubscriptionPostCreated, error)

	EventSubscriptionPut(params *EventSubscriptionPutParams, authInfo runtime.ClientAuthInfoWriter) (*EventSubscriptionPutOK, error)

	EventSubscriptionSearch(params *EventSubscriptionSearchParams, authInfo runtime.ClientAuthInfoWriter) (*EventSubscriptionSearchOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  EventSubscriptionDelete bs e t a delete the given subscription
*/
func (a *Client) EventSubscriptionDelete(params *EventSubscriptionDeleteParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEventSubscriptionDeleteParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EventSubscription_delete",
		Method:             "DELETE",
		PathPattern:        "/event/subscription/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EventSubscriptionDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  EventSubscriptionGet bs e t a get subscription by ID
*/
func (a *Client) EventSubscriptionGet(params *EventSubscriptionGetParams, authInfo runtime.ClientAuthInfoWriter) (*EventSubscriptionGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEventSubscriptionGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EventSubscription_get",
		Method:             "GET",
		PathPattern:        "/event/subscription/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EventSubscriptionGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EventSubscriptionGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EventSubscription_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EventSubscriptionPost bs e t a create a new subscription for current employee token
*/
func (a *Client) EventSubscriptionPost(params *EventSubscriptionPostParams, authInfo runtime.ClientAuthInfoWriter) (*EventSubscriptionPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEventSubscriptionPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EventSubscription_post",
		Method:             "POST",
		PathPattern:        "/event/subscription",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EventSubscriptionPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EventSubscriptionPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EventSubscription_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EventSubscriptionPut bs e t a change a current subscription based on id
*/
func (a *Client) EventSubscriptionPut(params *EventSubscriptionPutParams, authInfo runtime.ClientAuthInfoWriter) (*EventSubscriptionPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEventSubscriptionPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EventSubscription_put",
		Method:             "PUT",
		PathPattern:        "/event/subscription/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EventSubscriptionPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EventSubscriptionPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EventSubscription_put: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EventSubscriptionSearch bs e t a find all ongoing subscriptions
*/
func (a *Client) EventSubscriptionSearch(params *EventSubscriptionSearchParams, authInfo runtime.ClientAuthInfoWriter) (*EventSubscriptionSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEventSubscriptionSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EventSubscription_search",
		Method:             "GET",
		PathPattern:        "/event/subscription",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EventSubscriptionSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EventSubscriptionSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EventSubscription_search: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
