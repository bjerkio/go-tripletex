// Code generated by go-swagger; DO NOT EDIT.

package employment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new employment API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for employment API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	EmployeeEmploymentGet(params *EmployeeEmploymentGetParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeEmploymentGetOK, error)

	EmployeeEmploymentPost(params *EmployeeEmploymentPostParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeEmploymentPostCreated, error)

	EmployeeEmploymentPut(params *EmployeeEmploymentPutParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeEmploymentPutOK, error)

	EmployeeEmploymentSearch(params *EmployeeEmploymentSearchParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeEmploymentSearchOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  EmployeeEmploymentGet finds employment by ID
*/
func (a *Client) EmployeeEmploymentGet(params *EmployeeEmploymentGetParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeEmploymentGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeeEmploymentGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeeEmployment_get",
		Method:             "GET",
		PathPattern:        "/employee/employment/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmployeeEmploymentGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmployeeEmploymentGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmployeeEmployment_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EmployeeEmploymentPost bs e t a create employment
*/
func (a *Client) EmployeeEmploymentPost(params *EmployeeEmploymentPostParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeEmploymentPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeeEmploymentPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeeEmployment_post",
		Method:             "POST",
		PathPattern:        "/employee/employment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmployeeEmploymentPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmployeeEmploymentPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmployeeEmployment_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EmployeeEmploymentPut bs e t a update employemnt
*/
func (a *Client) EmployeeEmploymentPut(params *EmployeeEmploymentPutParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeEmploymentPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeeEmploymentPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeeEmployment_put",
		Method:             "PUT",
		PathPattern:        "/employee/employment/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmployeeEmploymentPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmployeeEmploymentPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmployeeEmployment_put: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EmployeeEmploymentSearch finds all employments for employee
*/
func (a *Client) EmployeeEmploymentSearch(params *EmployeeEmploymentSearchParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeEmploymentSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeeEmploymentSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeeEmployment_search",
		Method:             "GET",
		PathPattern:        "/employee/employment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmployeeEmploymentSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmployeeEmploymentSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmployeeEmployment_search: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
