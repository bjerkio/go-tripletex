// Copyright 2020 Bjerk AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package unit

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewProductUnitSearchParams creates a new ProductUnitSearchParams object
// with the default values initialized.
func NewProductUnitSearchParams() *ProductUnitSearchParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &ProductUnitSearchParams{
		Count: &countDefault,
		From:  &fromDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewProductUnitSearchParamsWithTimeout creates a new ProductUnitSearchParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewProductUnitSearchParamsWithTimeout(timeout time.Duration) *ProductUnitSearchParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &ProductUnitSearchParams{
		Count: &countDefault,
		From:  &fromDefault,

		timeout: timeout,
	}
}

// NewProductUnitSearchParamsWithContext creates a new ProductUnitSearchParams object
// with the default values initialized, and the ability to set a context for a request
func NewProductUnitSearchParamsWithContext(ctx context.Context) *ProductUnitSearchParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &ProductUnitSearchParams{
		Count: &countDefault,
		From:  &fromDefault,

		Context: ctx,
	}
}

// NewProductUnitSearchParamsWithHTTPClient creates a new ProductUnitSearchParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewProductUnitSearchParamsWithHTTPClient(client *http.Client) *ProductUnitSearchParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &ProductUnitSearchParams{
		Count:      &countDefault,
		From:       &fromDefault,
		HTTPClient: client,
	}
}

/*ProductUnitSearchParams contains all the parameters to send to the API endpoint
for the product unit search operation typically these are written to a http.Request
*/
type ProductUnitSearchParams struct {

	/*CommonCode
	  Common codes

	*/
	CommonCode *string
	/*Count
	  Number of elements to return

	*/
	Count *int64
	/*Fields
	  Fields filter pattern

	*/
	Fields *string
	/*From
	  From index

	*/
	From *int64
	/*ID
	  List of IDs

	*/
	ID *string
	/*Name
	  Names

	*/
	Name *string
	/*NameShort
	  Short names

	*/
	NameShort *string
	/*Sorting
	  Sorting pattern

	*/
	Sorting *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the product unit search params
func (o *ProductUnitSearchParams) WithTimeout(timeout time.Duration) *ProductUnitSearchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the product unit search params
func (o *ProductUnitSearchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the product unit search params
func (o *ProductUnitSearchParams) WithContext(ctx context.Context) *ProductUnitSearchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the product unit search params
func (o *ProductUnitSearchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the product unit search params
func (o *ProductUnitSearchParams) WithHTTPClient(client *http.Client) *ProductUnitSearchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the product unit search params
func (o *ProductUnitSearchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCommonCode adds the commonCode to the product unit search params
func (o *ProductUnitSearchParams) WithCommonCode(commonCode *string) *ProductUnitSearchParams {
	o.SetCommonCode(commonCode)
	return o
}

// SetCommonCode adds the commonCode to the product unit search params
func (o *ProductUnitSearchParams) SetCommonCode(commonCode *string) {
	o.CommonCode = commonCode
}

// WithCount adds the count to the product unit search params
func (o *ProductUnitSearchParams) WithCount(count *int64) *ProductUnitSearchParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the product unit search params
func (o *ProductUnitSearchParams) SetCount(count *int64) {
	o.Count = count
}

// WithFields adds the fields to the product unit search params
func (o *ProductUnitSearchParams) WithFields(fields *string) *ProductUnitSearchParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the product unit search params
func (o *ProductUnitSearchParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithFrom adds the from to the product unit search params
func (o *ProductUnitSearchParams) WithFrom(from *int64) *ProductUnitSearchParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the product unit search params
func (o *ProductUnitSearchParams) SetFrom(from *int64) {
	o.From = from
}

// WithID adds the id to the product unit search params
func (o *ProductUnitSearchParams) WithID(id *string) *ProductUnitSearchParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the product unit search params
func (o *ProductUnitSearchParams) SetID(id *string) {
	o.ID = id
}

// WithName adds the name to the product unit search params
func (o *ProductUnitSearchParams) WithName(name *string) *ProductUnitSearchParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the product unit search params
func (o *ProductUnitSearchParams) SetName(name *string) {
	o.Name = name
}

// WithNameShort adds the nameShort to the product unit search params
func (o *ProductUnitSearchParams) WithNameShort(nameShort *string) *ProductUnitSearchParams {
	o.SetNameShort(nameShort)
	return o
}

// SetNameShort adds the nameShort to the product unit search params
func (o *ProductUnitSearchParams) SetNameShort(nameShort *string) {
	o.NameShort = nameShort
}

// WithSorting adds the sorting to the product unit search params
func (o *ProductUnitSearchParams) WithSorting(sorting *string) *ProductUnitSearchParams {
	o.SetSorting(sorting)
	return o
}

// SetSorting adds the sorting to the product unit search params
func (o *ProductUnitSearchParams) SetSorting(sorting *string) {
	o.Sorting = sorting
}

// WriteToRequest writes these params to a swagger request
func (o *ProductUnitSearchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CommonCode != nil {

		// query param commonCode
		var qrCommonCode string
		if o.CommonCode != nil {
			qrCommonCode = *o.CommonCode
		}
		qCommonCode := qrCommonCode
		if qCommonCode != "" {
			if err := r.SetQueryParam("commonCode", qCommonCode); err != nil {
				return err
			}
		}

	}

	if o.Count != nil {

		// query param count
		var qrCount int64
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt64(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.From != nil {

		// query param from
		var qrFrom int64
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := swag.FormatInt64(qrFrom)
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	if o.ID != nil {

		// query param id
		var qrID string
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.NameShort != nil {

		// query param nameShort
		var qrNameShort string
		if o.NameShort != nil {
			qrNameShort = *o.NameShort
		}
		qNameShort := qrNameShort
		if qNameShort != "" {
			if err := r.SetQueryParam("nameShort", qNameShort); err != nil {
				return err
			}
		}

	}

	if o.Sorting != nil {

		// query param sorting
		var qrSorting string
		if o.Sorting != nil {
			qrSorting = *o.Sorting
		}
		qSorting := qrSorting
		if qSorting != "" {
			if err := r.SetQueryParam("sorting", qSorting); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
