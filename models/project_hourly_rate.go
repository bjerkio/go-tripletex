// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProjectHourlyRate project hourly rate
//
// swagger:model ProjectHourlyRate
type ProjectHourlyRate struct {

	// changes
	// Read Only: true
	Changes []*Change `json:"changes"`

	// Fixed Hourly rates if hourlyRateModel is TYPE_FIXED_HOURLY_RATE.
	FixedRate float64 `json:"fixedRate,omitempty"`

	// Defines the model used for the hourly rate.
	// Required: true
	// Enum: [TYPE_PREDEFINED_HOURLY_RATES TYPE_PROJECT_SPECIFIC_HOURLY_RATES TYPE_FIXED_HOURLY_RATE]
	HourlyRateModel *string `json:"hourlyRateModel"`

	// id
	ID int32 `json:"id,omitempty"`

	// project
	Project *Project `json:"project,omitempty"`

	// Project specific rates if hourlyRateModel is TYPE_PROJECT_SPECIFIC_HOURLY_RATES.
	ProjectSpecificRates []*ProjectSpecificRate `json:"projectSpecificRates"`

	// Show on contract confirmation/offers
	ShowInProjectOrder *bool `json:"showInProjectOrder,omitempty"`

	// start date
	// Required: true
	StartDate *string `json:"startDate"`

	// url
	// Read Only: true
	URL string `json:"url,omitempty"`

	// version
	Version int32 `json:"version,omitempty"`
}

// Validate validates this project hourly rate
func (m *ProjectHourlyRate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHourlyRateModel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectSpecificRates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectHourlyRate) validateChanges(formats strfmt.Registry) error {

	if swag.IsZero(m.Changes) { // not required
		return nil
	}

	for i := 0; i < len(m.Changes); i++ {
		if swag.IsZero(m.Changes[i]) { // not required
			continue
		}

		if m.Changes[i] != nil {
			if err := m.Changes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("changes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var projectHourlyRateTypeHourlyRateModelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["TYPE_PREDEFINED_HOURLY_RATES","TYPE_PROJECT_SPECIFIC_HOURLY_RATES","TYPE_FIXED_HOURLY_RATE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectHourlyRateTypeHourlyRateModelPropEnum = append(projectHourlyRateTypeHourlyRateModelPropEnum, v)
	}
}

const (

	// ProjectHourlyRateHourlyRateModelTYPEPREDEFINEDHOURLYRATES captures enum value "TYPE_PREDEFINED_HOURLY_RATES"
	ProjectHourlyRateHourlyRateModelTYPEPREDEFINEDHOURLYRATES string = "TYPE_PREDEFINED_HOURLY_RATES"

	// ProjectHourlyRateHourlyRateModelTYPEPROJECTSPECIFICHOURLYRATES captures enum value "TYPE_PROJECT_SPECIFIC_HOURLY_RATES"
	ProjectHourlyRateHourlyRateModelTYPEPROJECTSPECIFICHOURLYRATES string = "TYPE_PROJECT_SPECIFIC_HOURLY_RATES"

	// ProjectHourlyRateHourlyRateModelTYPEFIXEDHOURLYRATE captures enum value "TYPE_FIXED_HOURLY_RATE"
	ProjectHourlyRateHourlyRateModelTYPEFIXEDHOURLYRATE string = "TYPE_FIXED_HOURLY_RATE"
)

// prop value enum
func (m *ProjectHourlyRate) validateHourlyRateModelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, projectHourlyRateTypeHourlyRateModelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProjectHourlyRate) validateHourlyRateModel(formats strfmt.Registry) error {

	if err := validate.Required("hourlyRateModel", "body", m.HourlyRateModel); err != nil {
		return err
	}

	// value enum
	if err := m.validateHourlyRateModelEnum("hourlyRateModel", "body", *m.HourlyRateModel); err != nil {
		return err
	}

	return nil
}

func (m *ProjectHourlyRate) validateProject(formats strfmt.Registry) error {

	if swag.IsZero(m.Project) { // not required
		return nil
	}

	if m.Project != nil {
		if err := m.Project.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("project")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectHourlyRate) validateProjectSpecificRates(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectSpecificRates) { // not required
		return nil
	}

	for i := 0; i < len(m.ProjectSpecificRates); i++ {
		if swag.IsZero(m.ProjectSpecificRates[i]) { // not required
			continue
		}

		if m.ProjectSpecificRates[i] != nil {
			if err := m.ProjectSpecificRates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("projectSpecificRates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectHourlyRate) validateStartDate(formats strfmt.Registry) error {

	if err := validate.Required("startDate", "body", m.StartDate); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectHourlyRate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectHourlyRate) UnmarshalBinary(b []byte) error {
	var res ProjectHourlyRate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
