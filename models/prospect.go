// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Prospect prospect
//
// swagger:model Prospect
type Prospect struct {

	// changes
	// Read Only: true
	Changes []*Change `json:"changes"`

	// closed date
	ClosedDate string `json:"closedDate,omitempty"`

	// closed reason
	// Minimum: 0
	ClosedReason *int32 `json:"closedReason,omitempty"`

	// competitor
	// Max Length: 255
	Competitor string `json:"competitor,omitempty"`

	// created date
	// Required: true
	CreatedDate *string `json:"createdDate"`

	// customer
	Customer *Customer `json:"customer,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// Tripletex specific.
	FinalAdditionalServicesValue float64 `json:"finalAdditionalServicesValue,omitempty"`

	// The estimated start date for income on the prospect.
	FinalIncomeDate string `json:"finalIncomeDate,omitempty"`

	// The estimated startup fee on this prospect.
	FinalInitialValue float64 `json:"finalInitialValue,omitempty"`

	// The estimated monthly fee on this prospect.
	FinalMonthlyValue float64 `json:"finalMonthlyValue,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// is closed
	IsClosed *bool `json:"isClosed,omitempty"`

	// name
	// Max Length: 255
	Name string `json:"name,omitempty"`

	// The project connected to this prospect.
	Project *Project `json:"project,omitempty"`

	// The project offer connected to this prospect.
	ProjectOffer *Project `json:"projectOffer,omitempty"`

	// prospect type
	// Minimum: 1
	ProspectType int32 `json:"prospectType,omitempty"`

	// sales employee
	SalesEmployee *Employee `json:"salesEmployee,omitempty"`

	// The estimated total fee on this prospect.
	// Read Only: true
	TotalValue float64 `json:"totalValue,omitempty"`

	// url
	// Read Only: true
	URL string `json:"url,omitempty"`

	// version
	Version int32 `json:"version,omitempty"`
}

// Validate validates this prospect
func (m *Prospect) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClosedReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompetitor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectOffer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProspectType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSalesEmployee(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Prospect) validateChanges(formats strfmt.Registry) error {

	if swag.IsZero(m.Changes) { // not required
		return nil
	}

	for i := 0; i < len(m.Changes); i++ {
		if swag.IsZero(m.Changes[i]) { // not required
			continue
		}

		if m.Changes[i] != nil {
			if err := m.Changes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("changes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Prospect) validateClosedReason(formats strfmt.Registry) error {

	if swag.IsZero(m.ClosedReason) { // not required
		return nil
	}

	if err := validate.MinimumInt("closedReason", "body", int64(*m.ClosedReason), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Prospect) validateCompetitor(formats strfmt.Registry) error {

	if swag.IsZero(m.Competitor) { // not required
		return nil
	}

	if err := validate.MaxLength("competitor", "body", string(m.Competitor), 255); err != nil {
		return err
	}

	return nil
}

func (m *Prospect) validateCreatedDate(formats strfmt.Registry) error {

	if err := validate.Required("createdDate", "body", m.CreatedDate); err != nil {
		return err
	}

	return nil
}

func (m *Prospect) validateCustomer(formats strfmt.Registry) error {

	if swag.IsZero(m.Customer) { // not required
		return nil
	}

	if m.Customer != nil {
		if err := m.Customer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customer")
			}
			return err
		}
	}

	return nil
}

func (m *Prospect) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", string(m.Name), 255); err != nil {
		return err
	}

	return nil
}

func (m *Prospect) validateProject(formats strfmt.Registry) error {

	if swag.IsZero(m.Project) { // not required
		return nil
	}

	if m.Project != nil {
		if err := m.Project.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("project")
			}
			return err
		}
	}

	return nil
}

func (m *Prospect) validateProjectOffer(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectOffer) { // not required
		return nil
	}

	if m.ProjectOffer != nil {
		if err := m.ProjectOffer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("projectOffer")
			}
			return err
		}
	}

	return nil
}

func (m *Prospect) validateProspectType(formats strfmt.Registry) error {

	if swag.IsZero(m.ProspectType) { // not required
		return nil
	}

	if err := validate.MinimumInt("prospectType", "body", int64(m.ProspectType), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *Prospect) validateSalesEmployee(formats strfmt.Registry) error {

	if swag.IsZero(m.SalesEmployee) { // not required
		return nil
	}

	if m.SalesEmployee != nil {
		if err := m.SalesEmployee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("salesEmployee")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Prospect) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Prospect) UnmarshalBinary(b []byte) error {
	var res Prospect
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
