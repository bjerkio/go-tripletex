// Code generated by go-swagger; DO NOT EDIT.

package hourly_cost_and_rate

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new hourly cost and rate API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for hourly cost and rate API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	EmployeeHourlyCostAndRateGet(params *EmployeeHourlyCostAndRateGetParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeHourlyCostAndRateGetOK, error)

	EmployeeHourlyCostAndRatePost(params *EmployeeHourlyCostAndRatePostParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeHourlyCostAndRatePostCreated, error)

	EmployeeHourlyCostAndRatePut(params *EmployeeHourlyCostAndRatePutParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeHourlyCostAndRatePutOK, error)

	EmployeeHourlyCostAndRateSearch(params *EmployeeHourlyCostAndRateSearchParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeHourlyCostAndRateSearchOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  EmployeeHourlyCostAndRateGet bs e t a find hourly cost and rate by ID
*/
func (a *Client) EmployeeHourlyCostAndRateGet(params *EmployeeHourlyCostAndRateGetParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeHourlyCostAndRateGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeeHourlyCostAndRateGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeeHourlyCostAndRateGet",
		Method:             "GET",
		PathPattern:        "/employee/hourlyCostAndRate/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmployeeHourlyCostAndRateGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmployeeHourlyCostAndRateGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmployeeHourlyCostAndRateGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EmployeeHourlyCostAndRatePost bs e t a create hourly cost and rate
*/
func (a *Client) EmployeeHourlyCostAndRatePost(params *EmployeeHourlyCostAndRatePostParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeHourlyCostAndRatePostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeeHourlyCostAndRatePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeeHourlyCostAndRatePost",
		Method:             "POST",
		PathPattern:        "/employee/hourlyCostAndRate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmployeeHourlyCostAndRatePostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmployeeHourlyCostAndRatePostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmployeeHourlyCostAndRatePost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EmployeeHourlyCostAndRatePut bs e t a update hourly cost and rate
*/
func (a *Client) EmployeeHourlyCostAndRatePut(params *EmployeeHourlyCostAndRatePutParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeHourlyCostAndRatePutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeeHourlyCostAndRatePutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeeHourlyCostAndRatePut",
		Method:             "PUT",
		PathPattern:        "/employee/hourlyCostAndRate/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmployeeHourlyCostAndRatePutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmployeeHourlyCostAndRatePutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmployeeHourlyCostAndRatePut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EmployeeHourlyCostAndRateSearch finds all hourly cost and rates for employee
*/
func (a *Client) EmployeeHourlyCostAndRateSearch(params *EmployeeHourlyCostAndRateSearchParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeHourlyCostAndRateSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeeHourlyCostAndRateSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeeHourlyCostAndRateSearch",
		Method:             "GET",
		PathPattern:        "/employee/hourlyCostAndRate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmployeeHourlyCostAndRateSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmployeeHourlyCostAndRateSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmployeeHourlyCostAndRateSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
