// Copyright 2020 Bjerk AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BankReconciliationAdjustment bank reconciliation adjustment
//
// swagger:model BankReconciliationAdjustment
type BankReconciliationAdjustment struct {

	// amount
	// Minimum: 0
	Amount *float64 `json:"amount,omitempty"`

	// bank reconciliation match
	// Read Only: true
	BankReconciliationMatch *BankReconciliationMatch `json:"bankReconciliationMatch,omitempty"`

	// bank transactions
	BankTransactions []*BankTransaction `json:"bankTransactions"`

	// payment type
	// Required: true
	PaymentType *BankReconciliationPaymentType `json:"paymentType"`

	// posting date
	PostingDate string `json:"postingDate,omitempty"`

	// postings
	Postings []*Posting `json:"postings"`
}

// Validate validates this bank reconciliation adjustment
func (m *BankReconciliationAdjustment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBankReconciliationMatch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBankTransactions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BankReconciliationAdjustment) validateAmount(formats strfmt.Registry) error {

	if swag.IsZero(m.Amount) { // not required
		return nil
	}

	if err := validate.Minimum("amount", "body", float64(*m.Amount), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *BankReconciliationAdjustment) validateBankReconciliationMatch(formats strfmt.Registry) error {

	if swag.IsZero(m.BankReconciliationMatch) { // not required
		return nil
	}

	if m.BankReconciliationMatch != nil {
		if err := m.BankReconciliationMatch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bankReconciliationMatch")
			}
			return err
		}
	}

	return nil
}

func (m *BankReconciliationAdjustment) validateBankTransactions(formats strfmt.Registry) error {

	if swag.IsZero(m.BankTransactions) { // not required
		return nil
	}

	for i := 0; i < len(m.BankTransactions); i++ {
		if swag.IsZero(m.BankTransactions[i]) { // not required
			continue
		}

		if m.BankTransactions[i] != nil {
			if err := m.BankTransactions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bankTransactions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BankReconciliationAdjustment) validatePaymentType(formats strfmt.Registry) error {

	if err := validate.Required("paymentType", "body", m.PaymentType); err != nil {
		return err
	}

	if m.PaymentType != nil {
		if err := m.PaymentType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paymentType")
			}
			return err
		}
	}

	return nil
}

func (m *BankReconciliationAdjustment) validatePostings(formats strfmt.Registry) error {

	if swag.IsZero(m.Postings) { // not required
		return nil
	}

	for i := 0; i < len(m.Postings); i++ {
		if swag.IsZero(m.Postings[i]) { // not required
			continue
		}

		if m.Postings[i] != nil {
			if err := m.Postings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BankReconciliationAdjustment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BankReconciliationAdjustment) UnmarshalBinary(b []byte) error {
	var res BankReconciliationAdjustment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
