// Copyright 2020 Bjerk AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NextOfKin next of kin
//
// swagger:model NextOfKin
type NextOfKin struct {

	// address
	// Max Length: 255
	Address string `json:"address,omitempty"`

	// changes
	// Read Only: true
	Changes []*Change `json:"changes"`

	// employee
	Employee *Employee `json:"employee,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// name
	// Required: true
	// Max Length: 255
	Name *string `json:"name"`

	// phone number
	// Required: true
	// Max Length: 20
	PhoneNumber *string `json:"phoneNumber"`

	// Define the employee's next of kin relationtype.<br>SPOUSE<br>PARTNER<br>PARENT<br>CHILD<br>SIBLING
	// Enum: [SPOUSE PARTNER PARENT CHILD SIBLING]
	TypeOfRelationship string `json:"typeOfRelationship,omitempty"`

	// url
	// Read Only: true
	URL string `json:"url,omitempty"`

	// version
	Version int32 `json:"version,omitempty"`
}

// Validate validates this next of kin
func (m *NextOfKin) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmployee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeOfRelationship(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NextOfKin) validateAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if err := validate.MaxLength("address", "body", string(m.Address), 255); err != nil {
		return err
	}

	return nil
}

func (m *NextOfKin) validateChanges(formats strfmt.Registry) error {

	if swag.IsZero(m.Changes) { // not required
		return nil
	}

	for i := 0; i < len(m.Changes); i++ {
		if swag.IsZero(m.Changes[i]) { // not required
			continue
		}

		if m.Changes[i] != nil {
			if err := m.Changes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("changes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NextOfKin) validateEmployee(formats strfmt.Registry) error {

	if swag.IsZero(m.Employee) { // not required
		return nil
	}

	if m.Employee != nil {
		if err := m.Employee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("employee")
			}
			return err
		}
	}

	return nil
}

func (m *NextOfKin) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 255); err != nil {
		return err
	}

	return nil
}

func (m *NextOfKin) validatePhoneNumber(formats strfmt.Registry) error {

	if err := validate.Required("phoneNumber", "body", m.PhoneNumber); err != nil {
		return err
	}

	if err := validate.MaxLength("phoneNumber", "body", string(*m.PhoneNumber), 20); err != nil {
		return err
	}

	return nil
}

var nextOfKinTypeTypeOfRelationshipPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SPOUSE","PARTNER","PARENT","CHILD","SIBLING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nextOfKinTypeTypeOfRelationshipPropEnum = append(nextOfKinTypeTypeOfRelationshipPropEnum, v)
	}
}

const (

	// NextOfKinTypeOfRelationshipSPOUSE captures enum value "SPOUSE"
	NextOfKinTypeOfRelationshipSPOUSE string = "SPOUSE"

	// NextOfKinTypeOfRelationshipPARTNER captures enum value "PARTNER"
	NextOfKinTypeOfRelationshipPARTNER string = "PARTNER"

	// NextOfKinTypeOfRelationshipPARENT captures enum value "PARENT"
	NextOfKinTypeOfRelationshipPARENT string = "PARENT"

	// NextOfKinTypeOfRelationshipCHILD captures enum value "CHILD"
	NextOfKinTypeOfRelationshipCHILD string = "CHILD"

	// NextOfKinTypeOfRelationshipSIBLING captures enum value "SIBLING"
	NextOfKinTypeOfRelationshipSIBLING string = "SIBLING"
)

// prop value enum
func (m *NextOfKin) validateTypeOfRelationshipEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, nextOfKinTypeTypeOfRelationshipPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NextOfKin) validateTypeOfRelationship(formats strfmt.Registry) error {

	if swag.IsZero(m.TypeOfRelationship) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeOfRelationshipEnum("typeOfRelationship", "body", m.TypeOfRelationship); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NextOfKin) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NextOfKin) UnmarshalBinary(b []byte) error {
	var res NextOfKin
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
