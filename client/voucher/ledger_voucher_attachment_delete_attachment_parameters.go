// Code generated by go-swagger; DO NOT EDIT.

package voucher

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewLedgerVoucherAttachmentDeleteAttachmentParams creates a new LedgerVoucherAttachmentDeleteAttachmentParams object
// with the default values initialized.
func NewLedgerVoucherAttachmentDeleteAttachmentParams() *LedgerVoucherAttachmentDeleteAttachmentParams {
	var (
		sendToInboxDefault = bool(false)
		splitDefault       = bool(false)
	)
	return &LedgerVoucherAttachmentDeleteAttachmentParams{
		SendToInbox: &sendToInboxDefault,
		Split:       &splitDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewLedgerVoucherAttachmentDeleteAttachmentParamsWithTimeout creates a new LedgerVoucherAttachmentDeleteAttachmentParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewLedgerVoucherAttachmentDeleteAttachmentParamsWithTimeout(timeout time.Duration) *LedgerVoucherAttachmentDeleteAttachmentParams {
	var (
		sendToInboxDefault = bool(false)
		splitDefault       = bool(false)
	)
	return &LedgerVoucherAttachmentDeleteAttachmentParams{
		SendToInbox: &sendToInboxDefault,
		Split:       &splitDefault,

		timeout: timeout,
	}
}

// NewLedgerVoucherAttachmentDeleteAttachmentParamsWithContext creates a new LedgerVoucherAttachmentDeleteAttachmentParams object
// with the default values initialized, and the ability to set a context for a request
func NewLedgerVoucherAttachmentDeleteAttachmentParamsWithContext(ctx context.Context) *LedgerVoucherAttachmentDeleteAttachmentParams {
	var (
		sendToInboxDefault = bool(false)
		splitDefault       = bool(false)
	)
	return &LedgerVoucherAttachmentDeleteAttachmentParams{
		SendToInbox: &sendToInboxDefault,
		Split:       &splitDefault,

		Context: ctx,
	}
}

// NewLedgerVoucherAttachmentDeleteAttachmentParamsWithHTTPClient creates a new LedgerVoucherAttachmentDeleteAttachmentParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewLedgerVoucherAttachmentDeleteAttachmentParamsWithHTTPClient(client *http.Client) *LedgerVoucherAttachmentDeleteAttachmentParams {
	var (
		sendToInboxDefault = bool(false)
		splitDefault       = bool(false)
	)
	return &LedgerVoucherAttachmentDeleteAttachmentParams{
		SendToInbox: &sendToInboxDefault,
		Split:       &splitDefault,
		HTTPClient:  client,
	}
}

/*LedgerVoucherAttachmentDeleteAttachmentParams contains all the parameters to send to the API endpoint
for the ledger voucher attachment delete attachment operation typically these are written to a http.Request
*/
type LedgerVoucherAttachmentDeleteAttachmentParams struct {

	/*ID
	  ID of voucher containing the attachment to delete.

	*/
	ID int32
	/*SendToInbox
	  Should the attachment be sent to inbox rather than deleted?

	*/
	SendToInbox *bool
	/*Split
	  If sendToInbox is true, should the attachment be split into one voucher per page?

	*/
	Split *bool
	/*Version
	  Version of voucher containing the attachment to delete.

	*/
	Version *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the ledger voucher attachment delete attachment params
func (o *LedgerVoucherAttachmentDeleteAttachmentParams) WithTimeout(timeout time.Duration) *LedgerVoucherAttachmentDeleteAttachmentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the ledger voucher attachment delete attachment params
func (o *LedgerVoucherAttachmentDeleteAttachmentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the ledger voucher attachment delete attachment params
func (o *LedgerVoucherAttachmentDeleteAttachmentParams) WithContext(ctx context.Context) *LedgerVoucherAttachmentDeleteAttachmentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the ledger voucher attachment delete attachment params
func (o *LedgerVoucherAttachmentDeleteAttachmentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the ledger voucher attachment delete attachment params
func (o *LedgerVoucherAttachmentDeleteAttachmentParams) WithHTTPClient(client *http.Client) *LedgerVoucherAttachmentDeleteAttachmentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the ledger voucher attachment delete attachment params
func (o *LedgerVoucherAttachmentDeleteAttachmentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the ledger voucher attachment delete attachment params
func (o *LedgerVoucherAttachmentDeleteAttachmentParams) WithID(id int32) *LedgerVoucherAttachmentDeleteAttachmentParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the ledger voucher attachment delete attachment params
func (o *LedgerVoucherAttachmentDeleteAttachmentParams) SetID(id int32) {
	o.ID = id
}

// WithSendToInbox adds the sendToInbox to the ledger voucher attachment delete attachment params
func (o *LedgerVoucherAttachmentDeleteAttachmentParams) WithSendToInbox(sendToInbox *bool) *LedgerVoucherAttachmentDeleteAttachmentParams {
	o.SetSendToInbox(sendToInbox)
	return o
}

// SetSendToInbox adds the sendToInbox to the ledger voucher attachment delete attachment params
func (o *LedgerVoucherAttachmentDeleteAttachmentParams) SetSendToInbox(sendToInbox *bool) {
	o.SendToInbox = sendToInbox
}

// WithSplit adds the split to the ledger voucher attachment delete attachment params
func (o *LedgerVoucherAttachmentDeleteAttachmentParams) WithSplit(split *bool) *LedgerVoucherAttachmentDeleteAttachmentParams {
	o.SetSplit(split)
	return o
}

// SetSplit adds the split to the ledger voucher attachment delete attachment params
func (o *LedgerVoucherAttachmentDeleteAttachmentParams) SetSplit(split *bool) {
	o.Split = split
}

// WithVersion adds the version to the ledger voucher attachment delete attachment params
func (o *LedgerVoucherAttachmentDeleteAttachmentParams) WithVersion(version *int32) *LedgerVoucherAttachmentDeleteAttachmentParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the ledger voucher attachment delete attachment params
func (o *LedgerVoucherAttachmentDeleteAttachmentParams) SetVersion(version *int32) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *LedgerVoucherAttachmentDeleteAttachmentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt32(o.ID)); err != nil {
		return err
	}

	if o.SendToInbox != nil {

		// query param sendToInbox
		var qrSendToInbox bool
		if o.SendToInbox != nil {
			qrSendToInbox = *o.SendToInbox
		}
		qSendToInbox := swag.FormatBool(qrSendToInbox)
		if qSendToInbox != "" {
			if err := r.SetQueryParam("sendToInbox", qSendToInbox); err != nil {
				return err
			}
		}

	}

	if o.Split != nil {

		// query param split
		var qrSplit bool
		if o.Split != nil {
			qrSplit = *o.Split
		}
		qSplit := swag.FormatBool(qrSplit)
		if qSplit != "" {
			if err := r.SetQueryParam("split", qSplit); err != nil {
				return err
			}
		}

	}

	if o.Version != nil {

		// query param version
		var qrVersion int32
		if o.Version != nil {
			qrVersion = *o.Version
		}
		qVersion := swag.FormatInt32(qrVersion)
		if qVersion != "" {
			if err := r.SetQueryParam("version", qVersion); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
