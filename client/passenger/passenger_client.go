// Code generated by go-swagger; DO NOT EDIT.

package passenger

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new passenger API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for passenger API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	TravelExpensePassengerDelete(params *TravelExpensePassengerDeleteParams, authInfo runtime.ClientAuthInfoWriter) error

	TravelExpensePassengerGet(params *TravelExpensePassengerGetParams, authInfo runtime.ClientAuthInfoWriter) (*TravelExpensePassengerGetOK, error)

	TravelExpensePassengerPost(params *TravelExpensePassengerPostParams, authInfo runtime.ClientAuthInfoWriter) (*TravelExpensePassengerPostCreated, error)

	TravelExpensePassengerPut(params *TravelExpensePassengerPutParams, authInfo runtime.ClientAuthInfoWriter) (*TravelExpensePassengerPutOK, error)

	TravelExpensePassengerSearch(params *TravelExpensePassengerSearchParams, authInfo runtime.ClientAuthInfoWriter) (*TravelExpensePassengerSearchOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  TravelExpensePassengerDelete bs e t a delete passenger
*/
func (a *Client) TravelExpensePassengerDelete(params *TravelExpensePassengerDeleteParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTravelExpensePassengerDeleteParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TravelExpensePassenger_delete",
		Method:             "DELETE",
		PathPattern:        "/travelExpense/passenger/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TravelExpensePassengerDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  TravelExpensePassengerGet bs e t a get passenger by ID
*/
func (a *Client) TravelExpensePassengerGet(params *TravelExpensePassengerGetParams, authInfo runtime.ClientAuthInfoWriter) (*TravelExpensePassengerGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTravelExpensePassengerGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TravelExpensePassenger_get",
		Method:             "GET",
		PathPattern:        "/travelExpense/passenger/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TravelExpensePassengerGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TravelExpensePassengerGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TravelExpensePassenger_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TravelExpensePassengerPost bs e t a create passenger
*/
func (a *Client) TravelExpensePassengerPost(params *TravelExpensePassengerPostParams, authInfo runtime.ClientAuthInfoWriter) (*TravelExpensePassengerPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTravelExpensePassengerPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TravelExpensePassenger_post",
		Method:             "POST",
		PathPattern:        "/travelExpense/passenger",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TravelExpensePassengerPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TravelExpensePassengerPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TravelExpensePassenger_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TravelExpensePassengerPut bs e t a update passenger
*/
func (a *Client) TravelExpensePassengerPut(params *TravelExpensePassengerPutParams, authInfo runtime.ClientAuthInfoWriter) (*TravelExpensePassengerPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTravelExpensePassengerPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TravelExpensePassenger_put",
		Method:             "PUT",
		PathPattern:        "/travelExpense/passenger/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TravelExpensePassengerPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TravelExpensePassengerPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TravelExpensePassenger_put: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TravelExpensePassengerSearch bs e t a find passengers corresponding with sent data
*/
func (a *Client) TravelExpensePassengerSearch(params *TravelExpensePassengerSearchParams, authInfo runtime.ClientAuthInfoWriter) (*TravelExpensePassengerSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTravelExpensePassengerSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TravelExpensePassenger_search",
		Method:             "GET",
		PathPattern:        "/travelExpense/passenger",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TravelExpensePassengerSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TravelExpensePassengerSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TravelExpensePassenger_search: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
