// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Activity activity
//
// swagger:model Activity
type Activity struct {

	// PROJECT_SPECIFIC_ACTIVITY are made via project/projectactivity, as they must be part of a project.
	// Enum: [GENERAL_ACTIVITY PROJECT_GENERAL_ACTIVITY PROJECT_SPECIFIC_ACTIVITY TASK]
	ActivityType string `json:"activityType,omitempty"`

	// changes
	// Read Only: true
	Changes []*Change `json:"changes"`

	// description
	Description string `json:"description,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// is chargeable
	IsChargeable *bool `json:"isChargeable,omitempty"`

	// is disabled
	// Read Only: true
	IsDisabled *bool `json:"isDisabled,omitempty"`

	// Manipulate these with ActivityType
	// Read Only: true
	IsGeneral *bool `json:"isGeneral,omitempty"`

	// Manipulate these with ActivityType
	// Read Only: true
	IsProjectActivity *bool `json:"isProjectActivity,omitempty"`

	// Manipulate these with ActivityType
	// Read Only: true
	IsTask *bool `json:"isTask,omitempty"`

	// name
	// Max Length: 255
	Name string `json:"name,omitempty"`

	// number
	// Max Length: 100
	Number string `json:"number,omitempty"`

	// rate
	Rate float64 `json:"rate,omitempty"`

	// url
	// Read Only: true
	URL string `json:"url,omitempty"`

	// version
	Version int32 `json:"version,omitempty"`
}

// Validate validates this activity
func (m *Activity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActivityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var activityTypeActivityTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GENERAL_ACTIVITY","PROJECT_GENERAL_ACTIVITY","PROJECT_SPECIFIC_ACTIVITY","TASK"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		activityTypeActivityTypePropEnum = append(activityTypeActivityTypePropEnum, v)
	}
}

const (

	// ActivityActivityTypeGENERALACTIVITY captures enum value "GENERAL_ACTIVITY"
	ActivityActivityTypeGENERALACTIVITY string = "GENERAL_ACTIVITY"

	// ActivityActivityTypePROJECTGENERALACTIVITY captures enum value "PROJECT_GENERAL_ACTIVITY"
	ActivityActivityTypePROJECTGENERALACTIVITY string = "PROJECT_GENERAL_ACTIVITY"

	// ActivityActivityTypePROJECTSPECIFICACTIVITY captures enum value "PROJECT_SPECIFIC_ACTIVITY"
	ActivityActivityTypePROJECTSPECIFICACTIVITY string = "PROJECT_SPECIFIC_ACTIVITY"

	// ActivityActivityTypeTASK captures enum value "TASK"
	ActivityActivityTypeTASK string = "TASK"
)

// prop value enum
func (m *Activity) validateActivityTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, activityTypeActivityTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Activity) validateActivityType(formats strfmt.Registry) error {

	if swag.IsZero(m.ActivityType) { // not required
		return nil
	}

	// value enum
	if err := m.validateActivityTypeEnum("activityType", "body", m.ActivityType); err != nil {
		return err
	}

	return nil
}

func (m *Activity) validateChanges(formats strfmt.Registry) error {

	if swag.IsZero(m.Changes) { // not required
		return nil
	}

	for i := 0; i < len(m.Changes); i++ {
		if swag.IsZero(m.Changes[i]) { // not required
			continue
		}

		if m.Changes[i] != nil {
			if err := m.Changes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("changes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Activity) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", string(m.Name), 255); err != nil {
		return err
	}

	return nil
}

func (m *Activity) validateNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.Number) { // not required
		return nil
	}

	if err := validate.MaxLength("number", "body", string(m.Number), 100); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Activity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Activity) UnmarshalBinary(b []byte) error {
	var res Activity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
