// Code generated by go-swagger; DO NOT EDIT.

package invoice

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/bjerkio/tripletex-go/models"
)

// NewInvoicePostParams creates a new InvoicePostParams object
// with the default values initialized.
func NewInvoicePostParams() *InvoicePostParams {
	var (
		sendToCustomerDefault = bool(true)
	)
	return &InvoicePostParams{
		SendToCustomer: &sendToCustomerDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewInvoicePostParamsWithTimeout creates a new InvoicePostParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewInvoicePostParamsWithTimeout(timeout time.Duration) *InvoicePostParams {
	var (
		sendToCustomerDefault = bool(true)
	)
	return &InvoicePostParams{
		SendToCustomer: &sendToCustomerDefault,

		timeout: timeout,
	}
}

// NewInvoicePostParamsWithContext creates a new InvoicePostParams object
// with the default values initialized, and the ability to set a context for a request
func NewInvoicePostParamsWithContext(ctx context.Context) *InvoicePostParams {
	var (
		sendToCustomerDefault = bool(true)
	)
	return &InvoicePostParams{
		SendToCustomer: &sendToCustomerDefault,

		Context: ctx,
	}
}

// NewInvoicePostParamsWithHTTPClient creates a new InvoicePostParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewInvoicePostParamsWithHTTPClient(client *http.Client) *InvoicePostParams {
	var (
		sendToCustomerDefault = bool(true)
	)
	return &InvoicePostParams{
		SendToCustomer: &sendToCustomerDefault,
		HTTPClient:     client,
	}
}

/*InvoicePostParams contains all the parameters to send to the API endpoint
for the invoice post operation typically these are written to a http.Request
*/
type InvoicePostParams struct {

	/*Body
	  JSON representing the new object to be created. Should not have ID and version set.

	*/
	Body *models.Invoice
	/*PaidAmount
	  Paid amount to register prepayment of the invoice, in invoice currency. paymentTypeId and paidAmount are optional, but both must be provided if the invoice has already been paid.

	*/
	PaidAmount *float64
	/*PaymentTypeID
	  Payment type to register prepayment of the invoice. paymentTypeId and paidAmount are optional, but both must be provided if the invoice has already been paid.

	*/
	PaymentTypeID *int32
	/*SendToCustomer
	  Equals

	*/
	SendToCustomer *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the invoice post params
func (o *InvoicePostParams) WithTimeout(timeout time.Duration) *InvoicePostParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the invoice post params
func (o *InvoicePostParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the invoice post params
func (o *InvoicePostParams) WithContext(ctx context.Context) *InvoicePostParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the invoice post params
func (o *InvoicePostParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the invoice post params
func (o *InvoicePostParams) WithHTTPClient(client *http.Client) *InvoicePostParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the invoice post params
func (o *InvoicePostParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the invoice post params
func (o *InvoicePostParams) WithBody(body *models.Invoice) *InvoicePostParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the invoice post params
func (o *InvoicePostParams) SetBody(body *models.Invoice) {
	o.Body = body
}

// WithPaidAmount adds the paidAmount to the invoice post params
func (o *InvoicePostParams) WithPaidAmount(paidAmount *float64) *InvoicePostParams {
	o.SetPaidAmount(paidAmount)
	return o
}

// SetPaidAmount adds the paidAmount to the invoice post params
func (o *InvoicePostParams) SetPaidAmount(paidAmount *float64) {
	o.PaidAmount = paidAmount
}

// WithPaymentTypeID adds the paymentTypeID to the invoice post params
func (o *InvoicePostParams) WithPaymentTypeID(paymentTypeID *int32) *InvoicePostParams {
	o.SetPaymentTypeID(paymentTypeID)
	return o
}

// SetPaymentTypeID adds the paymentTypeId to the invoice post params
func (o *InvoicePostParams) SetPaymentTypeID(paymentTypeID *int32) {
	o.PaymentTypeID = paymentTypeID
}

// WithSendToCustomer adds the sendToCustomer to the invoice post params
func (o *InvoicePostParams) WithSendToCustomer(sendToCustomer *bool) *InvoicePostParams {
	o.SetSendToCustomer(sendToCustomer)
	return o
}

// SetSendToCustomer adds the sendToCustomer to the invoice post params
func (o *InvoicePostParams) SetSendToCustomer(sendToCustomer *bool) {
	o.SendToCustomer = sendToCustomer
}

// WriteToRequest writes these params to a swagger request
func (o *InvoicePostParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.PaidAmount != nil {

		// query param paidAmount
		var qrPaidAmount float64
		if o.PaidAmount != nil {
			qrPaidAmount = *o.PaidAmount
		}
		qPaidAmount := swag.FormatFloat64(qrPaidAmount)
		if qPaidAmount != "" {
			if err := r.SetQueryParam("paidAmount", qPaidAmount); err != nil {
				return err
			}
		}

	}

	if o.PaymentTypeID != nil {

		// query param paymentTypeId
		var qrPaymentTypeID int32
		if o.PaymentTypeID != nil {
			qrPaymentTypeID = *o.PaymentTypeID
		}
		qPaymentTypeID := swag.FormatInt32(qrPaymentTypeID)
		if qPaymentTypeID != "" {
			if err := r.SetQueryParam("paymentTypeId", qPaymentTypeID); err != nil {
				return err
			}
		}

	}

	if o.SendToCustomer != nil {

		// query param sendToCustomer
		var qrSendToCustomer bool
		if o.SendToCustomer != nil {
			qrSendToCustomer = *o.SendToCustomer
		}
		qSendToCustomer := swag.FormatBool(qrSendToCustomer)
		if qSendToCustomer != "" {
			if err := r.SetQueryParam("sendToCustomer", qSendToCustomer); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
