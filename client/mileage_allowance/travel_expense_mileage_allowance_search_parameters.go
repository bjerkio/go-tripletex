// Copyright 2020 Bjerk AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package mileage_allowance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewTravelExpenseMileageAllowanceSearchParams creates a new TravelExpenseMileageAllowanceSearchParams object
// with the default values initialized.
func NewTravelExpenseMileageAllowanceSearchParams() *TravelExpenseMileageAllowanceSearchParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &TravelExpenseMileageAllowanceSearchParams{
		Count: &countDefault,
		From:  &fromDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewTravelExpenseMileageAllowanceSearchParamsWithTimeout creates a new TravelExpenseMileageAllowanceSearchParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTravelExpenseMileageAllowanceSearchParamsWithTimeout(timeout time.Duration) *TravelExpenseMileageAllowanceSearchParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &TravelExpenseMileageAllowanceSearchParams{
		Count: &countDefault,
		From:  &fromDefault,

		timeout: timeout,
	}
}

// NewTravelExpenseMileageAllowanceSearchParamsWithContext creates a new TravelExpenseMileageAllowanceSearchParams object
// with the default values initialized, and the ability to set a context for a request
func NewTravelExpenseMileageAllowanceSearchParamsWithContext(ctx context.Context) *TravelExpenseMileageAllowanceSearchParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &TravelExpenseMileageAllowanceSearchParams{
		Count: &countDefault,
		From:  &fromDefault,

		Context: ctx,
	}
}

// NewTravelExpenseMileageAllowanceSearchParamsWithHTTPClient creates a new TravelExpenseMileageAllowanceSearchParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTravelExpenseMileageAllowanceSearchParamsWithHTTPClient(client *http.Client) *TravelExpenseMileageAllowanceSearchParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &TravelExpenseMileageAllowanceSearchParams{
		Count:      &countDefault,
		From:       &fromDefault,
		HTTPClient: client,
	}
}

/*TravelExpenseMileageAllowanceSearchParams contains all the parameters to send to the API endpoint
for the travel expense mileage allowance search operation typically these are written to a http.Request
*/
type TravelExpenseMileageAllowanceSearchParams struct {

	/*AmountFrom
	  From and including

	*/
	AmountFrom *float64
	/*AmountTo
	  To and excluding

	*/
	AmountTo *float64
	/*Count
	  Number of elements to return

	*/
	Count *int64
	/*DateFrom
	  From and including

	*/
	DateFrom *string
	/*DateTo
	  To and excluding

	*/
	DateTo *string
	/*DepartureLocation
	  Containing

	*/
	DepartureLocation *string
	/*Destination
	  Containing

	*/
	Destination *string
	/*Fields
	  Fields filter pattern

	*/
	Fields *string
	/*From
	  From index

	*/
	From *int64
	/*IsCompanyCar
	  Equals

	*/
	IsCompanyCar *bool
	/*KmFrom
	  From and including

	*/
	KmFrom *float64
	/*KmTo
	  To and excluding

	*/
	KmTo *float64
	/*RateCategoryID
	  Equals

	*/
	RateCategoryID *string
	/*RateFrom
	  From and including

	*/
	RateFrom *float64
	/*RateTo
	  To and excluding

	*/
	RateTo *float64
	/*RateTypeID
	  Equals

	*/
	RateTypeID *string
	/*Sorting
	  Sorting pattern

	*/
	Sorting *string
	/*TravelExpenseID
	  Equals

	*/
	TravelExpenseID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the travel expense mileage allowance search params
func (o *TravelExpenseMileageAllowanceSearchParams) WithTimeout(timeout time.Duration) *TravelExpenseMileageAllowanceSearchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the travel expense mileage allowance search params
func (o *TravelExpenseMileageAllowanceSearchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the travel expense mileage allowance search params
func (o *TravelExpenseMileageAllowanceSearchParams) WithContext(ctx context.Context) *TravelExpenseMileageAllowanceSearchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the travel expense mileage allowance search params
func (o *TravelExpenseMileageAllowanceSearchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the travel expense mileage allowance search params
func (o *TravelExpenseMileageAllowanceSearchParams) WithHTTPClient(client *http.Client) *TravelExpenseMileageAllowanceSearchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the travel expense mileage allowance search params
func (o *TravelExpenseMileageAllowanceSearchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAmountFrom adds the amountFrom to the travel expense mileage allowance search params
func (o *TravelExpenseMileageAllowanceSearchParams) WithAmountFrom(amountFrom *float64) *TravelExpenseMileageAllowanceSearchParams {
	o.SetAmountFrom(amountFrom)
	return o
}

// SetAmountFrom adds the amountFrom to the travel expense mileage allowance search params
func (o *TravelExpenseMileageAllowanceSearchParams) SetAmountFrom(amountFrom *float64) {
	o.AmountFrom = amountFrom
}

// WithAmountTo adds the amountTo to the travel expense mileage allowance search params
func (o *TravelExpenseMileageAllowanceSearchParams) WithAmountTo(amountTo *float64) *TravelExpenseMileageAllowanceSearchParams {
	o.SetAmountTo(amountTo)
	return o
}

// SetAmountTo adds the amountTo to the travel expense mileage allowance search params
func (o *TravelExpenseMileageAllowanceSearchParams) SetAmountTo(amountTo *float64) {
	o.AmountTo = amountTo
}

// WithCount adds the count to the travel expense mileage allowance search params
func (o *TravelExpenseMileageAllowanceSearchParams) WithCount(count *int64) *TravelExpenseMileageAllowanceSearchParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the travel expense mileage allowance search params
func (o *TravelExpenseMileageAllowanceSearchParams) SetCount(count *int64) {
	o.Count = count
}

// WithDateFrom adds the dateFrom to the travel expense mileage allowance search params
func (o *TravelExpenseMileageAllowanceSearchParams) WithDateFrom(dateFrom *string) *TravelExpenseMileageAllowanceSearchParams {
	o.SetDateFrom(dateFrom)
	return o
}

// SetDateFrom adds the dateFrom to the travel expense mileage allowance search params
func (o *TravelExpenseMileageAllowanceSearchParams) SetDateFrom(dateFrom *string) {
	o.DateFrom = dateFrom
}

// WithDateTo adds the dateTo to the travel expense mileage allowance search params
func (o *TravelExpenseMileageAllowanceSearchParams) WithDateTo(dateTo *string) *TravelExpenseMileageAllowanceSearchParams {
	o.SetDateTo(dateTo)
	return o
}

// SetDateTo adds the dateTo to the travel expense mileage allowance search params
func (o *TravelExpenseMileageAllowanceSearchParams) SetDateTo(dateTo *string) {
	o.DateTo = dateTo
}

// WithDepartureLocation adds the departureLocation to the travel expense mileage allowance search params
func (o *TravelExpenseMileageAllowanceSearchParams) WithDepartureLocation(departureLocation *string) *TravelExpenseMileageAllowanceSearchParams {
	o.SetDepartureLocation(departureLocation)
	return o
}

// SetDepartureLocation adds the departureLocation to the travel expense mileage allowance search params
func (o *TravelExpenseMileageAllowanceSearchParams) SetDepartureLocation(departureLocation *string) {
	o.DepartureLocation = departureLocation
}

// WithDestination adds the destination to the travel expense mileage allowance search params
func (o *TravelExpenseMileageAllowanceSearchParams) WithDestination(destination *string) *TravelExpenseMileageAllowanceSearchParams {
	o.SetDestination(destination)
	return o
}

// SetDestination adds the destination to the travel expense mileage allowance search params
func (o *TravelExpenseMileageAllowanceSearchParams) SetDestination(destination *string) {
	o.Destination = destination
}

// WithFields adds the fields to the travel expense mileage allowance search params
func (o *TravelExpenseMileageAllowanceSearchParams) WithFields(fields *string) *TravelExpenseMileageAllowanceSearchParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the travel expense mileage allowance search params
func (o *TravelExpenseMileageAllowanceSearchParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithFrom adds the from to the travel expense mileage allowance search params
func (o *TravelExpenseMileageAllowanceSearchParams) WithFrom(from *int64) *TravelExpenseMileageAllowanceSearchParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the travel expense mileage allowance search params
func (o *TravelExpenseMileageAllowanceSearchParams) SetFrom(from *int64) {
	o.From = from
}

// WithIsCompanyCar adds the isCompanyCar to the travel expense mileage allowance search params
func (o *TravelExpenseMileageAllowanceSearchParams) WithIsCompanyCar(isCompanyCar *bool) *TravelExpenseMileageAllowanceSearchParams {
	o.SetIsCompanyCar(isCompanyCar)
	return o
}

// SetIsCompanyCar adds the isCompanyCar to the travel expense mileage allowance search params
func (o *TravelExpenseMileageAllowanceSearchParams) SetIsCompanyCar(isCompanyCar *bool) {
	o.IsCompanyCar = isCompanyCar
}

// WithKmFrom adds the kmFrom to the travel expense mileage allowance search params
func (o *TravelExpenseMileageAllowanceSearchParams) WithKmFrom(kmFrom *float64) *TravelExpenseMileageAllowanceSearchParams {
	o.SetKmFrom(kmFrom)
	return o
}

// SetKmFrom adds the kmFrom to the travel expense mileage allowance search params
func (o *TravelExpenseMileageAllowanceSearchParams) SetKmFrom(kmFrom *float64) {
	o.KmFrom = kmFrom
}

// WithKmTo adds the kmTo to the travel expense mileage allowance search params
func (o *TravelExpenseMileageAllowanceSearchParams) WithKmTo(kmTo *float64) *TravelExpenseMileageAllowanceSearchParams {
	o.SetKmTo(kmTo)
	return o
}

// SetKmTo adds the kmTo to the travel expense mileage allowance search params
func (o *TravelExpenseMileageAllowanceSearchParams) SetKmTo(kmTo *float64) {
	o.KmTo = kmTo
}

// WithRateCategoryID adds the rateCategoryID to the travel expense mileage allowance search params
func (o *TravelExpenseMileageAllowanceSearchParams) WithRateCategoryID(rateCategoryID *string) *TravelExpenseMileageAllowanceSearchParams {
	o.SetRateCategoryID(rateCategoryID)
	return o
}

// SetRateCategoryID adds the rateCategoryId to the travel expense mileage allowance search params
func (o *TravelExpenseMileageAllowanceSearchParams) SetRateCategoryID(rateCategoryID *string) {
	o.RateCategoryID = rateCategoryID
}

// WithRateFrom adds the rateFrom to the travel expense mileage allowance search params
func (o *TravelExpenseMileageAllowanceSearchParams) WithRateFrom(rateFrom *float64) *TravelExpenseMileageAllowanceSearchParams {
	o.SetRateFrom(rateFrom)
	return o
}

// SetRateFrom adds the rateFrom to the travel expense mileage allowance search params
func (o *TravelExpenseMileageAllowanceSearchParams) SetRateFrom(rateFrom *float64) {
	o.RateFrom = rateFrom
}

// WithRateTo adds the rateTo to the travel expense mileage allowance search params
func (o *TravelExpenseMileageAllowanceSearchParams) WithRateTo(rateTo *float64) *TravelExpenseMileageAllowanceSearchParams {
	o.SetRateTo(rateTo)
	return o
}

// SetRateTo adds the rateTo to the travel expense mileage allowance search params
func (o *TravelExpenseMileageAllowanceSearchParams) SetRateTo(rateTo *float64) {
	o.RateTo = rateTo
}

// WithRateTypeID adds the rateTypeID to the travel expense mileage allowance search params
func (o *TravelExpenseMileageAllowanceSearchParams) WithRateTypeID(rateTypeID *string) *TravelExpenseMileageAllowanceSearchParams {
	o.SetRateTypeID(rateTypeID)
	return o
}

// SetRateTypeID adds the rateTypeId to the travel expense mileage allowance search params
func (o *TravelExpenseMileageAllowanceSearchParams) SetRateTypeID(rateTypeID *string) {
	o.RateTypeID = rateTypeID
}

// WithSorting adds the sorting to the travel expense mileage allowance search params
func (o *TravelExpenseMileageAllowanceSearchParams) WithSorting(sorting *string) *TravelExpenseMileageAllowanceSearchParams {
	o.SetSorting(sorting)
	return o
}

// SetSorting adds the sorting to the travel expense mileage allowance search params
func (o *TravelExpenseMileageAllowanceSearchParams) SetSorting(sorting *string) {
	o.Sorting = sorting
}

// WithTravelExpenseID adds the travelExpenseID to the travel expense mileage allowance search params
func (o *TravelExpenseMileageAllowanceSearchParams) WithTravelExpenseID(travelExpenseID *string) *TravelExpenseMileageAllowanceSearchParams {
	o.SetTravelExpenseID(travelExpenseID)
	return o
}

// SetTravelExpenseID adds the travelExpenseId to the travel expense mileage allowance search params
func (o *TravelExpenseMileageAllowanceSearchParams) SetTravelExpenseID(travelExpenseID *string) {
	o.TravelExpenseID = travelExpenseID
}

// WriteToRequest writes these params to a swagger request
func (o *TravelExpenseMileageAllowanceSearchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AmountFrom != nil {

		// query param amountFrom
		var qrAmountFrom float64
		if o.AmountFrom != nil {
			qrAmountFrom = *o.AmountFrom
		}
		qAmountFrom := swag.FormatFloat64(qrAmountFrom)
		if qAmountFrom != "" {
			if err := r.SetQueryParam("amountFrom", qAmountFrom); err != nil {
				return err
			}
		}

	}

	if o.AmountTo != nil {

		// query param amountTo
		var qrAmountTo float64
		if o.AmountTo != nil {
			qrAmountTo = *o.AmountTo
		}
		qAmountTo := swag.FormatFloat64(qrAmountTo)
		if qAmountTo != "" {
			if err := r.SetQueryParam("amountTo", qAmountTo); err != nil {
				return err
			}
		}

	}

	if o.Count != nil {

		// query param count
		var qrCount int64
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt64(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	if o.DateFrom != nil {

		// query param dateFrom
		var qrDateFrom string
		if o.DateFrom != nil {
			qrDateFrom = *o.DateFrom
		}
		qDateFrom := qrDateFrom
		if qDateFrom != "" {
			if err := r.SetQueryParam("dateFrom", qDateFrom); err != nil {
				return err
			}
		}

	}

	if o.DateTo != nil {

		// query param dateTo
		var qrDateTo string
		if o.DateTo != nil {
			qrDateTo = *o.DateTo
		}
		qDateTo := qrDateTo
		if qDateTo != "" {
			if err := r.SetQueryParam("dateTo", qDateTo); err != nil {
				return err
			}
		}

	}

	if o.DepartureLocation != nil {

		// query param departureLocation
		var qrDepartureLocation string
		if o.DepartureLocation != nil {
			qrDepartureLocation = *o.DepartureLocation
		}
		qDepartureLocation := qrDepartureLocation
		if qDepartureLocation != "" {
			if err := r.SetQueryParam("departureLocation", qDepartureLocation); err != nil {
				return err
			}
		}

	}

	if o.Destination != nil {

		// query param destination
		var qrDestination string
		if o.Destination != nil {
			qrDestination = *o.Destination
		}
		qDestination := qrDestination
		if qDestination != "" {
			if err := r.SetQueryParam("destination", qDestination); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.From != nil {

		// query param from
		var qrFrom int64
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := swag.FormatInt64(qrFrom)
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	if o.IsCompanyCar != nil {

		// query param isCompanyCar
		var qrIsCompanyCar bool
		if o.IsCompanyCar != nil {
			qrIsCompanyCar = *o.IsCompanyCar
		}
		qIsCompanyCar := swag.FormatBool(qrIsCompanyCar)
		if qIsCompanyCar != "" {
			if err := r.SetQueryParam("isCompanyCar", qIsCompanyCar); err != nil {
				return err
			}
		}

	}

	if o.KmFrom != nil {

		// query param kmFrom
		var qrKmFrom float64
		if o.KmFrom != nil {
			qrKmFrom = *o.KmFrom
		}
		qKmFrom := swag.FormatFloat64(qrKmFrom)
		if qKmFrom != "" {
			if err := r.SetQueryParam("kmFrom", qKmFrom); err != nil {
				return err
			}
		}

	}

	if o.KmTo != nil {

		// query param kmTo
		var qrKmTo float64
		if o.KmTo != nil {
			qrKmTo = *o.KmTo
		}
		qKmTo := swag.FormatFloat64(qrKmTo)
		if qKmTo != "" {
			if err := r.SetQueryParam("kmTo", qKmTo); err != nil {
				return err
			}
		}

	}

	if o.RateCategoryID != nil {

		// query param rateCategoryId
		var qrRateCategoryID string
		if o.RateCategoryID != nil {
			qrRateCategoryID = *o.RateCategoryID
		}
		qRateCategoryID := qrRateCategoryID
		if qRateCategoryID != "" {
			if err := r.SetQueryParam("rateCategoryId", qRateCategoryID); err != nil {
				return err
			}
		}

	}

	if o.RateFrom != nil {

		// query param rateFrom
		var qrRateFrom float64
		if o.RateFrom != nil {
			qrRateFrom = *o.RateFrom
		}
		qRateFrom := swag.FormatFloat64(qrRateFrom)
		if qRateFrom != "" {
			if err := r.SetQueryParam("rateFrom", qRateFrom); err != nil {
				return err
			}
		}

	}

	if o.RateTo != nil {

		// query param rateTo
		var qrRateTo float64
		if o.RateTo != nil {
			qrRateTo = *o.RateTo
		}
		qRateTo := swag.FormatFloat64(qrRateTo)
		if qRateTo != "" {
			if err := r.SetQueryParam("rateTo", qRateTo); err != nil {
				return err
			}
		}

	}

	if o.RateTypeID != nil {

		// query param rateTypeId
		var qrRateTypeID string
		if o.RateTypeID != nil {
			qrRateTypeID = *o.RateTypeID
		}
		qRateTypeID := qrRateTypeID
		if qRateTypeID != "" {
			if err := r.SetQueryParam("rateTypeId", qRateTypeID); err != nil {
				return err
			}
		}

	}

	if o.Sorting != nil {

		// query param sorting
		var qrSorting string
		if o.Sorting != nil {
			qrSorting = *o.Sorting
		}
		qSorting := qrSorting
		if qSorting != "" {
			if err := r.SetQueryParam("sorting", qSorting); err != nil {
				return err
			}
		}

	}

	if o.TravelExpenseID != nil {

		// query param travelExpenseId
		var qrTravelExpenseID string
		if o.TravelExpenseID != nil {
			qrTravelExpenseID = *o.TravelExpenseID
		}
		qTravelExpenseID := qrTravelExpenseID
		if qTravelExpenseID != "" {
			if err := r.SetQueryParam("travelExpenseId", qTravelExpenseID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
