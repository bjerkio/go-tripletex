// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Contact contact
//
// swagger:model Contact
type Contact struct {

	// changes
	// Read Only: true
	Changes []*Change `json:"changes"`

	// customer
	Customer *Customer `json:"customer,omitempty"`

	// email
	// Max Length: 100
	// Min Length: 0
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// first name
	// Max Length: 100
	// Min Length: 0
	FirstName *string `json:"firstName,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// last name
	// Max Length: 100
	// Min Length: 0
	LastName *string `json:"lastName,omitempty"`

	// phone number mobile
	// Max Length: 100
	PhoneNumberMobile string `json:"phoneNumberMobile,omitempty"`

	// The country of the mobile phone number. If not set, the country is derived as best as possible from phoneNumberMobile. NB! 8 digit numbers are assumed to be Norwegian.
	PhoneNumberMobileCountry *Country `json:"phoneNumberMobileCountry,omitempty"`

	// url
	// Read Only: true
	URL string `json:"url,omitempty"`

	// version
	Version int32 `json:"version,omitempty"`
}

// Validate validates this contact
func (m *Contact) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneNumberMobile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneNumberMobileCountry(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Contact) validateChanges(formats strfmt.Registry) error {

	if swag.IsZero(m.Changes) { // not required
		return nil
	}

	for i := 0; i < len(m.Changes); i++ {
		if swag.IsZero(m.Changes[i]) { // not required
			continue
		}

		if m.Changes[i] != nil {
			if err := m.Changes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("changes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Contact) validateCustomer(formats strfmt.Registry) error {

	if swag.IsZero(m.Customer) { // not required
		return nil
	}

	if m.Customer != nil {
		if err := m.Customer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customer")
			}
			return err
		}
	}

	return nil
}

func (m *Contact) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.MinLength("email", "body", string(m.Email), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("email", "body", string(m.Email), 100); err != nil {
		return err
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Contact) validateFirstName(formats strfmt.Registry) error {

	if swag.IsZero(m.FirstName) { // not required
		return nil
	}

	if err := validate.MinLength("firstName", "body", string(*m.FirstName), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("firstName", "body", string(*m.FirstName), 100); err != nil {
		return err
	}

	return nil
}

func (m *Contact) validateLastName(formats strfmt.Registry) error {

	if swag.IsZero(m.LastName) { // not required
		return nil
	}

	if err := validate.MinLength("lastName", "body", string(*m.LastName), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("lastName", "body", string(*m.LastName), 100); err != nil {
		return err
	}

	return nil
}

func (m *Contact) validatePhoneNumberMobile(formats strfmt.Registry) error {

	if swag.IsZero(m.PhoneNumberMobile) { // not required
		return nil
	}

	if err := validate.MaxLength("phoneNumberMobile", "body", string(m.PhoneNumberMobile), 100); err != nil {
		return err
	}

	return nil
}

func (m *Contact) validatePhoneNumberMobileCountry(formats strfmt.Registry) error {

	if swag.IsZero(m.PhoneNumberMobileCountry) { // not required
		return nil
	}

	if m.PhoneNumberMobileCountry != nil {
		if err := m.PhoneNumberMobileCountry.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phoneNumberMobileCountry")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Contact) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Contact) UnmarshalBinary(b []byte) error {
	var res Contact
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
