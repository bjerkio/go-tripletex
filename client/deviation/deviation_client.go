// Copyright 2020 Bjerk AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package deviation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new deviation API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for deviation API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	PurchaseOrderDeviationApproveApprove(params *PurchaseOrderDeviationApproveApproveParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderDeviationApproveApproveOK, error)

	PurchaseOrderDeviationDelete(params *PurchaseOrderDeviationDeleteParams, authInfo runtime.ClientAuthInfoWriter) error

	PurchaseOrderDeviationDeliverDeliver(params *PurchaseOrderDeviationDeliverDeliverParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderDeviationDeliverDeliverOK, error)

	PurchaseOrderDeviationGet(params *PurchaseOrderDeviationGetParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderDeviationGetOK, error)

	PurchaseOrderDeviationListPostList(params *PurchaseOrderDeviationListPostListParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderDeviationListPostListCreated, error)

	PurchaseOrderDeviationListPutList(params *PurchaseOrderDeviationListPutListParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderDeviationListPutListOK, error)

	PurchaseOrderDeviationPost(params *PurchaseOrderDeviationPostParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderDeviationPostCreated, error)

	PurchaseOrderDeviationPut(params *PurchaseOrderDeviationPutParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderDeviationPutOK, error)

	PurchaseOrderDeviationSearch(params *PurchaseOrderDeviationSearchParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderDeviationSearchOK, error)

	PurchaseOrderDeviationUndeliverUndeliver(params *PurchaseOrderDeviationUndeliverUndeliverParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderDeviationUndeliverUndeliverOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  PurchaseOrderDeviationApproveApprove bs e t a approve deviations only available for users that have activated the logistics plus beta program in our customer account
*/
func (a *Client) PurchaseOrderDeviationApproveApprove(params *PurchaseOrderDeviationApproveApproveParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderDeviationApproveApproveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPurchaseOrderDeviationApproveApproveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PurchaseOrderDeviationApproveApprove",
		Method:             "PUT",
		PathPattern:        "/purchaseOrder/deviation/{id}/:approve",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PurchaseOrderDeviationApproveApproveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PurchaseOrderDeviationApproveApproveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PurchaseOrderDeviationApproveApprove: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PurchaseOrderDeviationDelete bs e t a delete goods receipt by purchase order ID only available for users that have activated the logistics plus beta program in our customer account
*/
func (a *Client) PurchaseOrderDeviationDelete(params *PurchaseOrderDeviationDeleteParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPurchaseOrderDeviationDeleteParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PurchaseOrderDeviationDelete",
		Method:             "DELETE",
		PathPattern:        "/purchaseOrder/deviation/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PurchaseOrderDeviationDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  PurchaseOrderDeviationDeliverDeliver bs e t a send deviations to approval only available for users that have activated the logistics plus beta program in our customer account
*/
func (a *Client) PurchaseOrderDeviationDeliverDeliver(params *PurchaseOrderDeviationDeliverDeliverParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderDeviationDeliverDeliverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPurchaseOrderDeviationDeliverDeliverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PurchaseOrderDeviationDeliverDeliver",
		Method:             "PUT",
		PathPattern:        "/purchaseOrder/deviation/{id}/:deliver",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PurchaseOrderDeviationDeliverDeliverReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PurchaseOrderDeviationDeliverDeliverOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PurchaseOrderDeviationDeliverDeliver: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PurchaseOrderDeviationGet bs e t a get deviation by order line ID only available for users that have activated the logistics plus beta program in our customer account
*/
func (a *Client) PurchaseOrderDeviationGet(params *PurchaseOrderDeviationGetParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderDeviationGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPurchaseOrderDeviationGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PurchaseOrderDeviationGet",
		Method:             "GET",
		PathPattern:        "/purchaseOrder/deviation/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PurchaseOrderDeviationGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PurchaseOrderDeviationGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PurchaseOrderDeviationGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PurchaseOrderDeviationListPostList bs e t a register multiple deviations only available for users that have activated the logistics plus beta program in our customer account
*/
func (a *Client) PurchaseOrderDeviationListPostList(params *PurchaseOrderDeviationListPostListParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderDeviationListPostListCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPurchaseOrderDeviationListPostListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PurchaseOrderDeviationListPostList",
		Method:             "POST",
		PathPattern:        "/purchaseOrder/deviation/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PurchaseOrderDeviationListPostListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PurchaseOrderDeviationListPostListCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PurchaseOrderDeviationListPostList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PurchaseOrderDeviationListPutList bs e t a update multiple deviations only available for users that have activated the logistics plus beta program in our customer account
*/
func (a *Client) PurchaseOrderDeviationListPutList(params *PurchaseOrderDeviationListPutListParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderDeviationListPutListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPurchaseOrderDeviationListPutListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PurchaseOrderDeviationListPutList",
		Method:             "PUT",
		PathPattern:        "/purchaseOrder/deviation/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PurchaseOrderDeviationListPutListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PurchaseOrderDeviationListPutListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PurchaseOrderDeviationListPutList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PurchaseOrderDeviationPost bs e t a register deviation on goods receipt only available for users that have activated the logistics plus beta program in our customer account
*/
func (a *Client) PurchaseOrderDeviationPost(params *PurchaseOrderDeviationPostParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderDeviationPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPurchaseOrderDeviationPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PurchaseOrderDeviationPost",
		Method:             "POST",
		PathPattern:        "/purchaseOrder/deviation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PurchaseOrderDeviationPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PurchaseOrderDeviationPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PurchaseOrderDeviationPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PurchaseOrderDeviationPut updates deviation only available for users that have activated the logistics plus beta program in our customer account
*/
func (a *Client) PurchaseOrderDeviationPut(params *PurchaseOrderDeviationPutParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderDeviationPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPurchaseOrderDeviationPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PurchaseOrderDeviationPut",
		Method:             "PUT",
		PathPattern:        "/purchaseOrder/deviation/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PurchaseOrderDeviationPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PurchaseOrderDeviationPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PurchaseOrderDeviationPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PurchaseOrderDeviationSearch bs e t a find handled deviations for purchase order only available for users that have activated the logistics plus beta program in our customer account
*/
func (a *Client) PurchaseOrderDeviationSearch(params *PurchaseOrderDeviationSearchParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderDeviationSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPurchaseOrderDeviationSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PurchaseOrderDeviationSearch",
		Method:             "GET",
		PathPattern:        "/purchaseOrder/deviation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PurchaseOrderDeviationSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PurchaseOrderDeviationSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PurchaseOrderDeviationSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PurchaseOrderDeviationUndeliverUndeliver bs e t a undeliver the deviations only available for users that have activated the logistics plus beta program in our customer account
*/
func (a *Client) PurchaseOrderDeviationUndeliverUndeliver(params *PurchaseOrderDeviationUndeliverUndeliverParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderDeviationUndeliverUndeliverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPurchaseOrderDeviationUndeliverUndeliverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PurchaseOrderDeviationUndeliverUndeliver",
		Method:             "PUT",
		PathPattern:        "/purchaseOrder/deviation/{id}/:undeliver",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PurchaseOrderDeviationUndeliverUndeliverReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PurchaseOrderDeviationUndeliverUndeliverOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PurchaseOrderDeviationUndeliverUndeliver: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
