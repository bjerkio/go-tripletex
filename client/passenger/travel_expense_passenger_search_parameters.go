// Copyright 2020 Bjerk AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package passenger

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewTravelExpensePassengerSearchParams creates a new TravelExpensePassengerSearchParams object
// with the default values initialized.
func NewTravelExpensePassengerSearchParams() *TravelExpensePassengerSearchParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &TravelExpensePassengerSearchParams{
		Count: &countDefault,
		From:  &fromDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewTravelExpensePassengerSearchParamsWithTimeout creates a new TravelExpensePassengerSearchParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTravelExpensePassengerSearchParamsWithTimeout(timeout time.Duration) *TravelExpensePassengerSearchParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &TravelExpensePassengerSearchParams{
		Count: &countDefault,
		From:  &fromDefault,

		timeout: timeout,
	}
}

// NewTravelExpensePassengerSearchParamsWithContext creates a new TravelExpensePassengerSearchParams object
// with the default values initialized, and the ability to set a context for a request
func NewTravelExpensePassengerSearchParamsWithContext(ctx context.Context) *TravelExpensePassengerSearchParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &TravelExpensePassengerSearchParams{
		Count: &countDefault,
		From:  &fromDefault,

		Context: ctx,
	}
}

// NewTravelExpensePassengerSearchParamsWithHTTPClient creates a new TravelExpensePassengerSearchParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTravelExpensePassengerSearchParamsWithHTTPClient(client *http.Client) *TravelExpensePassengerSearchParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &TravelExpensePassengerSearchParams{
		Count:      &countDefault,
		From:       &fromDefault,
		HTTPClient: client,
	}
}

/*TravelExpensePassengerSearchParams contains all the parameters to send to the API endpoint
for the travel expense passenger search operation typically these are written to a http.Request
*/
type TravelExpensePassengerSearchParams struct {

	/*Count
	  Number of elements to return

	*/
	Count *int64
	/*Fields
	  Fields filter pattern

	*/
	Fields *string
	/*From
	  From index

	*/
	From *int64
	/*MileageAllowance
	  Equals

	*/
	MileageAllowance *string
	/*Name
	  Containing

	*/
	Name *string
	/*Sorting
	  Sorting pattern

	*/
	Sorting *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the travel expense passenger search params
func (o *TravelExpensePassengerSearchParams) WithTimeout(timeout time.Duration) *TravelExpensePassengerSearchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the travel expense passenger search params
func (o *TravelExpensePassengerSearchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the travel expense passenger search params
func (o *TravelExpensePassengerSearchParams) WithContext(ctx context.Context) *TravelExpensePassengerSearchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the travel expense passenger search params
func (o *TravelExpensePassengerSearchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the travel expense passenger search params
func (o *TravelExpensePassengerSearchParams) WithHTTPClient(client *http.Client) *TravelExpensePassengerSearchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the travel expense passenger search params
func (o *TravelExpensePassengerSearchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCount adds the count to the travel expense passenger search params
func (o *TravelExpensePassengerSearchParams) WithCount(count *int64) *TravelExpensePassengerSearchParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the travel expense passenger search params
func (o *TravelExpensePassengerSearchParams) SetCount(count *int64) {
	o.Count = count
}

// WithFields adds the fields to the travel expense passenger search params
func (o *TravelExpensePassengerSearchParams) WithFields(fields *string) *TravelExpensePassengerSearchParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the travel expense passenger search params
func (o *TravelExpensePassengerSearchParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithFrom adds the from to the travel expense passenger search params
func (o *TravelExpensePassengerSearchParams) WithFrom(from *int64) *TravelExpensePassengerSearchParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the travel expense passenger search params
func (o *TravelExpensePassengerSearchParams) SetFrom(from *int64) {
	o.From = from
}

// WithMileageAllowance adds the mileageAllowance to the travel expense passenger search params
func (o *TravelExpensePassengerSearchParams) WithMileageAllowance(mileageAllowance *string) *TravelExpensePassengerSearchParams {
	o.SetMileageAllowance(mileageAllowance)
	return o
}

// SetMileageAllowance adds the mileageAllowance to the travel expense passenger search params
func (o *TravelExpensePassengerSearchParams) SetMileageAllowance(mileageAllowance *string) {
	o.MileageAllowance = mileageAllowance
}

// WithName adds the name to the travel expense passenger search params
func (o *TravelExpensePassengerSearchParams) WithName(name *string) *TravelExpensePassengerSearchParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the travel expense passenger search params
func (o *TravelExpensePassengerSearchParams) SetName(name *string) {
	o.Name = name
}

// WithSorting adds the sorting to the travel expense passenger search params
func (o *TravelExpensePassengerSearchParams) WithSorting(sorting *string) *TravelExpensePassengerSearchParams {
	o.SetSorting(sorting)
	return o
}

// SetSorting adds the sorting to the travel expense passenger search params
func (o *TravelExpensePassengerSearchParams) SetSorting(sorting *string) {
	o.Sorting = sorting
}

// WriteToRequest writes these params to a swagger request
func (o *TravelExpensePassengerSearchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Count != nil {

		// query param count
		var qrCount int64
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt64(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.From != nil {

		// query param from
		var qrFrom int64
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := swag.FormatInt64(qrFrom)
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	if o.MileageAllowance != nil {

		// query param mileageAllowance
		var qrMileageAllowance string
		if o.MileageAllowance != nil {
			qrMileageAllowance = *o.MileageAllowance
		}
		qMileageAllowance := qrMileageAllowance
		if qMileageAllowance != "" {
			if err := r.SetQueryParam("mileageAllowance", qMileageAllowance); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.Sorting != nil {

		// query param sorting
		var qrSorting string
		if o.Sorting != nil {
			qrSorting = *o.Sorting
		}
		qSorting := qrSorting
		if qSorting != "" {
			if err := r.SetQueryParam("sorting", qSorting); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
