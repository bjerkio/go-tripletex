// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProjectInvoiceDetails project invoice details
//
// swagger:model ProjectInvoiceDetails
type ProjectInvoiceDetails struct {

	// The amount of chargeable manual order lines and vendor invoices on the project invoice.
	// Read Only: true
	AmountOrderLinesAndReinvoicing float64 `json:"amountOrderLinesAndReinvoicing,omitempty"`

	// The amount of chargeable manual order lines and vendor invoices on the project invoice, in the invoice currency.
	// Read Only: true
	AmountOrderLinesAndReinvoicingCurrency float64 `json:"amountOrderLinesAndReinvoicingCurrency,omitempty"`

	// The amount of travel costs and expenses on the project invoice.
	// Read Only: true
	AmountTravelReportsAndExpenses float64 `json:"amountTravelReportsAndExpenses,omitempty"`

	// The amount of travel costs and expenses on the project invoice, in the invoice currency.
	// Read Only: true
	AmountTravelReportsAndExpensesCurrency float64 `json:"amountTravelReportsAndExpensesCurrency,omitempty"`

	// changes
	// Read Only: true
	Changes []*Change `json:"changes"`

	// Fee amount of the project. For example: 100 NOK.
	// Read Only: true
	FeeAmount float64 `json:"feeAmount,omitempty"`

	// Fee amount of the project in the invoice currency.
	// Read Only: true
	FeeAmountCurrency float64 `json:"feeAmountCurrency,omitempty"`

	// The fee comment on the project invoice.
	// Read Only: true
	FeeInvoiceText string `json:"feeInvoiceText,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// Determines if hours should be included on the project invoice.
	// Read Only: true
	IncludeHours *bool `json:"includeHours,omitempty"`

	// Determines if akonto should be included on the project invoice.
	// Read Only: true
	IncludeOnAccountBalance *bool `json:"includeOnAccountBalance,omitempty"`

	// Determines if extra costs should be included on the project invoice.
	// Read Only: true
	IncludeOrderLinesAndReinvoicing *bool `json:"includeOrderLinesAndReinvoicing,omitempty"`

	// invoice
	// Read Only: true
	Invoice *Invoice `json:"invoice,omitempty"`

	// The comment on the project invoice.
	// Read Only: true
	InvoiceText string `json:"invoiceText,omitempty"`

	// The amount value of mark-up of amountFee on the project invoice. For example: 10 NOK.
	// Read Only: true
	MarkupAmount float64 `json:"markupAmount,omitempty"`

	// The amount value of mark-up of amountFee on the project invoice, in the invoice currency.
	// Read Only: true
	MarkupAmountCurrency float64 `json:"markupAmountCurrency,omitempty"`

	// The percentage value of mark-up of amountFee. For example: 10%.
	// Read Only: true
	MarkupPercent float64 `json:"markupPercent,omitempty"`

	// The akonto amount on the project invoice.
	// Read Only: true
	OnAccountBalanceAmount float64 `json:"onAccountBalanceAmount,omitempty"`

	// The akonto amount on the project invoice in the invoice currency.
	// Read Only: true
	OnAccountBalanceAmountCurrency float64 `json:"onAccountBalanceAmountCurrency,omitempty"`

	// The Project related to the Invoice and ProjectInvoiceAdditionalInfo.
	// Read Only: true
	Project *Project `json:"project,omitempty"`

	// url
	// Read Only: true
	URL string `json:"url,omitempty"`

	// The VAT type of the project invoice.
	// Read Only: true
	VatType *VatType `json:"vatType,omitempty"`

	// version
	Version int32 `json:"version,omitempty"`
}

// Validate validates this project invoice details
func (m *ProjectInvoiceDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvoice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVatType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectInvoiceDetails) validateChanges(formats strfmt.Registry) error {

	if swag.IsZero(m.Changes) { // not required
		return nil
	}

	for i := 0; i < len(m.Changes); i++ {
		if swag.IsZero(m.Changes[i]) { // not required
			continue
		}

		if m.Changes[i] != nil {
			if err := m.Changes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("changes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectInvoiceDetails) validateInvoice(formats strfmt.Registry) error {

	if swag.IsZero(m.Invoice) { // not required
		return nil
	}

	if m.Invoice != nil {
		if err := m.Invoice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("invoice")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectInvoiceDetails) validateProject(formats strfmt.Registry) error {

	if swag.IsZero(m.Project) { // not required
		return nil
	}

	if m.Project != nil {
		if err := m.Project.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("project")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectInvoiceDetails) validateVatType(formats strfmt.Registry) error {

	if swag.IsZero(m.VatType) { // not required
		return nil
	}

	if m.VatType != nil {
		if err := m.VatType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vatType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectInvoiceDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectInvoiceDetails) UnmarshalBinary(b []byte) error {
	var res ProjectInvoiceDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
