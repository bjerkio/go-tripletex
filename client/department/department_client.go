// Code generated by go-swagger; DO NOT EDIT.

package department

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new department API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for department API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DepartmentDelete(params *DepartmentDeleteParams, authInfo runtime.ClientAuthInfoWriter) error

	DepartmentGet(params *DepartmentGetParams, authInfo runtime.ClientAuthInfoWriter) (*DepartmentGetOK, error)

	DepartmentListPostList(params *DepartmentListPostListParams, authInfo runtime.ClientAuthInfoWriter) (*DepartmentListPostListCreated, error)

	DepartmentListPutList(params *DepartmentListPutListParams, authInfo runtime.ClientAuthInfoWriter) (*DepartmentListPutListOK, error)

	DepartmentPost(params *DepartmentPostParams, authInfo runtime.ClientAuthInfoWriter) (*DepartmentPostCreated, error)

	DepartmentPut(params *DepartmentPutParams, authInfo runtime.ClientAuthInfoWriter) (*DepartmentPutOK, error)

	DepartmentSearch(params *DepartmentSearchParams, authInfo runtime.ClientAuthInfoWriter) (*DepartmentSearchOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DepartmentDelete deletes department by ID
*/
func (a *Client) DepartmentDelete(params *DepartmentDeleteParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDepartmentDeleteParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DepartmentDelete",
		Method:             "DELETE",
		PathPattern:        "/department/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DepartmentDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  DepartmentGet gets department by ID
*/
func (a *Client) DepartmentGet(params *DepartmentGetParams, authInfo runtime.ClientAuthInfoWriter) (*DepartmentGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDepartmentGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DepartmentGet",
		Method:             "GET",
		PathPattern:        "/department/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DepartmentGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DepartmentGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DepartmentGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DepartmentListPostList bs e t a register new departments
*/
func (a *Client) DepartmentListPostList(params *DepartmentListPostListParams, authInfo runtime.ClientAuthInfoWriter) (*DepartmentListPostListCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDepartmentListPostListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DepartmentListPostList",
		Method:             "POST",
		PathPattern:        "/department/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DepartmentListPostListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DepartmentListPostListCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DepartmentListPostList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DepartmentListPutList bs e t a update multiple departments
*/
func (a *Client) DepartmentListPutList(params *DepartmentListPutListParams, authInfo runtime.ClientAuthInfoWriter) (*DepartmentListPutListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDepartmentListPutListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DepartmentListPutList",
		Method:             "PUT",
		PathPattern:        "/department/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DepartmentListPutListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DepartmentListPutListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DepartmentListPutList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DepartmentPost bs e t a add new department
*/
func (a *Client) DepartmentPost(params *DepartmentPostParams, authInfo runtime.ClientAuthInfoWriter) (*DepartmentPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDepartmentPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DepartmentPost",
		Method:             "POST",
		PathPattern:        "/department",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DepartmentPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DepartmentPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DepartmentPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DepartmentPut bs e t a update department
*/
func (a *Client) DepartmentPut(params *DepartmentPutParams, authInfo runtime.ClientAuthInfoWriter) (*DepartmentPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDepartmentPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DepartmentPut",
		Method:             "PUT",
		PathPattern:        "/department/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DepartmentPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DepartmentPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DepartmentPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DepartmentSearch finds department corresponding with sent data
*/
func (a *Client) DepartmentSearch(params *DepartmentSearchParams, authInfo runtime.ClientAuthInfoWriter) (*DepartmentSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDepartmentSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DepartmentSearch",
		Method:             "GET",
		PathPattern:        "/department",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DepartmentSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DepartmentSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DepartmentSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
