// Copyright 2020 Bjerk AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package orderline

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new orderline API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for orderline API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	OrderOrderlineDelete(params *OrderOrderlineDeleteParams, authInfo runtime.ClientAuthInfoWriter) error

	OrderOrderlineGet(params *OrderOrderlineGetParams, authInfo runtime.ClientAuthInfoWriter) (*OrderOrderlineGetOK, error)

	OrderOrderlineListPostList(params *OrderOrderlineListPostListParams, authInfo runtime.ClientAuthInfoWriter) (*OrderOrderlineListPostListCreated, error)

	OrderOrderlinePost(params *OrderOrderlinePostParams, authInfo runtime.ClientAuthInfoWriter) (*OrderOrderlinePostCreated, error)

	ProjectOrderlineDelete(params *ProjectOrderlineDeleteParams, authInfo runtime.ClientAuthInfoWriter) error

	ProjectOrderlineGet(params *ProjectOrderlineGetParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectOrderlineGetOK, error)

	ProjectOrderlineListPostList(params *ProjectOrderlineListPostListParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectOrderlineListPostListCreated, error)

	ProjectOrderlinePost(params *ProjectOrderlinePostParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectOrderlinePostCreated, error)

	ProjectOrderlinePut(params *ProjectOrderlinePutParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectOrderlinePutOK, error)

	ProjectOrderlineSearch(params *ProjectOrderlineSearchParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectOrderlineSearchOK, error)

	PurchaseOrderOrderlineDelete(params *PurchaseOrderOrderlineDeleteParams, authInfo runtime.ClientAuthInfoWriter) error

	PurchaseOrderOrderlineGet(params *PurchaseOrderOrderlineGetParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderOrderlineGetOK, error)

	PurchaseOrderOrderlinePost(params *PurchaseOrderOrderlinePostParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderOrderlinePostCreated, error)

	PurchaseOrderOrderlinePut(params *PurchaseOrderOrderlinePutParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderOrderlinePutOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  OrderOrderlineDelete bs e t a delete order line by ID
*/
func (a *Client) OrderOrderlineDelete(params *OrderOrderlineDeleteParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrderOrderlineDeleteParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OrderOrderlineDelete",
		Method:             "DELETE",
		PathPattern:        "/order/orderline/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrderOrderlineDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  OrderOrderlineGet gets order line by ID
*/
func (a *Client) OrderOrderlineGet(params *OrderOrderlineGetParams, authInfo runtime.ClientAuthInfoWriter) (*OrderOrderlineGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrderOrderlineGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OrderOrderlineGet",
		Method:             "GET",
		PathPattern:        "/order/orderline/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrderOrderlineGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrderOrderlineGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OrderOrderlineGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OrderOrderlineListPostList creates multiple order lines
*/
func (a *Client) OrderOrderlineListPostList(params *OrderOrderlineListPostListParams, authInfo runtime.ClientAuthInfoWriter) (*OrderOrderlineListPostListCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrderOrderlineListPostListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OrderOrderlineListPostList",
		Method:             "POST",
		PathPattern:        "/order/orderline/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrderOrderlineListPostListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrderOrderlineListPostListCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OrderOrderlineListPostList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OrderOrderlinePost creates order line when creating several order lines use list for better performance
*/
func (a *Client) OrderOrderlinePost(params *OrderOrderlinePostParams, authInfo runtime.ClientAuthInfoWriter) (*OrderOrderlinePostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrderOrderlinePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OrderOrderlinePost",
		Method:             "POST",
		PathPattern:        "/order/orderline",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrderOrderlinePostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrderOrderlinePostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OrderOrderlinePost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectOrderlineDelete deletes order line by ID
*/
func (a *Client) ProjectOrderlineDelete(params *ProjectOrderlineDeleteParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectOrderlineDeleteParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectOrderlineDelete",
		Method:             "DELETE",
		PathPattern:        "/project/orderline/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectOrderlineDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  ProjectOrderlineGet bs e t a get order line by ID
*/
func (a *Client) ProjectOrderlineGet(params *ProjectOrderlineGetParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectOrderlineGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectOrderlineGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectOrderlineGet",
		Method:             "GET",
		PathPattern:        "/project/orderline/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectOrderlineGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectOrderlineGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProjectOrderlineGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectOrderlineListPostList bs e t a create multiple order lines
*/
func (a *Client) ProjectOrderlineListPostList(params *ProjectOrderlineListPostListParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectOrderlineListPostListCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectOrderlineListPostListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectOrderlineListPostList",
		Method:             "POST",
		PathPattern:        "/project/orderline/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectOrderlineListPostListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectOrderlineListPostListCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProjectOrderlineListPostList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectOrderlinePost bs e t a create order line when creating several order lines use list for better performance
*/
func (a *Client) ProjectOrderlinePost(params *ProjectOrderlinePostParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectOrderlinePostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectOrderlinePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectOrderlinePost",
		Method:             "POST",
		PathPattern:        "/project/orderline",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectOrderlinePostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectOrderlinePostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProjectOrderlinePost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectOrderlinePut bs e t a update project orderline
*/
func (a *Client) ProjectOrderlinePut(params *ProjectOrderlinePutParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectOrderlinePutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectOrderlinePutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectOrderlinePut",
		Method:             "PUT",
		PathPattern:        "/project/orderline/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectOrderlinePutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectOrderlinePutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProjectOrderlinePut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectOrderlineSearch bs e t a find all order lines for project
*/
func (a *Client) ProjectOrderlineSearch(params *ProjectOrderlineSearchParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectOrderlineSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectOrderlineSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectOrderlineSearch",
		Method:             "GET",
		PathPattern:        "/project/orderline",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectOrderlineSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectOrderlineSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProjectOrderlineSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PurchaseOrderOrderlineDelete bs e t a delete purchase order line
*/
func (a *Client) PurchaseOrderOrderlineDelete(params *PurchaseOrderOrderlineDeleteParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPurchaseOrderOrderlineDeleteParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PurchaseOrderOrderlineDelete",
		Method:             "DELETE",
		PathPattern:        "/purchaseOrder/orderline/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PurchaseOrderOrderlineDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  PurchaseOrderOrderlineGet bs e t a find purchase order line by ID
*/
func (a *Client) PurchaseOrderOrderlineGet(params *PurchaseOrderOrderlineGetParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderOrderlineGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPurchaseOrderOrderlineGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PurchaseOrderOrderlineGet",
		Method:             "GET",
		PathPattern:        "/purchaseOrder/orderline/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PurchaseOrderOrderlineGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PurchaseOrderOrderlineGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PurchaseOrderOrderlineGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PurchaseOrderOrderlinePost bs e t a creates purchase order line
*/
func (a *Client) PurchaseOrderOrderlinePost(params *PurchaseOrderOrderlinePostParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderOrderlinePostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPurchaseOrderOrderlinePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PurchaseOrderOrderlinePost",
		Method:             "POST",
		PathPattern:        "/purchaseOrder/orderline",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PurchaseOrderOrderlinePostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PurchaseOrderOrderlinePostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PurchaseOrderOrderlinePost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PurchaseOrderOrderlinePut bs e t a updates purchase order line
*/
func (a *Client) PurchaseOrderOrderlinePut(params *PurchaseOrderOrderlinePutParams, authInfo runtime.ClientAuthInfoWriter) (*PurchaseOrderOrderlinePutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPurchaseOrderOrderlinePutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PurchaseOrderOrderlinePut",
		Method:             "PUT",
		PathPattern:        "/purchaseOrder/orderline/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PurchaseOrderOrderlinePutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PurchaseOrderOrderlinePutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PurchaseOrderOrderlinePut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
