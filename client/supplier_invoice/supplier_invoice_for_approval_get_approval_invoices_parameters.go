// Code generated by go-swagger; DO NOT EDIT.

package supplier_invoice

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSupplierInvoiceForApprovalGetApprovalInvoicesParams creates a new SupplierInvoiceForApprovalGetApprovalInvoicesParams object
// with the default values initialized.
func NewSupplierInvoiceForApprovalGetApprovalInvoicesParams() *SupplierInvoiceForApprovalGetApprovalInvoicesParams {
	var (
		countDefault   = int64(1000)
		fromDefault    = int64(0)
		showAllDefault = bool(false)
	)
	return &SupplierInvoiceForApprovalGetApprovalInvoicesParams{
		Count:   &countDefault,
		From:    &fromDefault,
		ShowAll: &showAllDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewSupplierInvoiceForApprovalGetApprovalInvoicesParamsWithTimeout creates a new SupplierInvoiceForApprovalGetApprovalInvoicesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSupplierInvoiceForApprovalGetApprovalInvoicesParamsWithTimeout(timeout time.Duration) *SupplierInvoiceForApprovalGetApprovalInvoicesParams {
	var (
		countDefault   = int64(1000)
		fromDefault    = int64(0)
		showAllDefault = bool(false)
	)
	return &SupplierInvoiceForApprovalGetApprovalInvoicesParams{
		Count:   &countDefault,
		From:    &fromDefault,
		ShowAll: &showAllDefault,

		timeout: timeout,
	}
}

// NewSupplierInvoiceForApprovalGetApprovalInvoicesParamsWithContext creates a new SupplierInvoiceForApprovalGetApprovalInvoicesParams object
// with the default values initialized, and the ability to set a context for a request
func NewSupplierInvoiceForApprovalGetApprovalInvoicesParamsWithContext(ctx context.Context) *SupplierInvoiceForApprovalGetApprovalInvoicesParams {
	var (
		countDefault   = int64(1000)
		fromDefault    = int64(0)
		showAllDefault = bool(false)
	)
	return &SupplierInvoiceForApprovalGetApprovalInvoicesParams{
		Count:   &countDefault,
		From:    &fromDefault,
		ShowAll: &showAllDefault,

		Context: ctx,
	}
}

// NewSupplierInvoiceForApprovalGetApprovalInvoicesParamsWithHTTPClient creates a new SupplierInvoiceForApprovalGetApprovalInvoicesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSupplierInvoiceForApprovalGetApprovalInvoicesParamsWithHTTPClient(client *http.Client) *SupplierInvoiceForApprovalGetApprovalInvoicesParams {
	var (
		countDefault   = int64(1000)
		fromDefault    = int64(0)
		showAllDefault = bool(false)
	)
	return &SupplierInvoiceForApprovalGetApprovalInvoicesParams{
		Count:      &countDefault,
		From:       &fromDefault,
		ShowAll:    &showAllDefault,
		HTTPClient: client,
	}
}

/*SupplierInvoiceForApprovalGetApprovalInvoicesParams contains all the parameters to send to the API endpoint
for the supplier invoice for approval get approval invoices operation typically these are written to a http.Request
*/
type SupplierInvoiceForApprovalGetApprovalInvoicesParams struct {

	/*Count
	  Number of elements to return

	*/
	Count *int64
	/*EmployeeID
	  Default is logged in employee

	*/
	EmployeeID *int32
	/*Fields
	  Fields filter pattern

	*/
	Fields *string
	/*From
	  From index

	*/
	From *int64
	/*SearchText
	  Search for department, employee, project and more

	*/
	SearchText *string
	/*ShowAll
	  Show all or just your own

	*/
	ShowAll *bool
	/*Sorting
	  Sorting pattern

	*/
	Sorting *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the supplier invoice for approval get approval invoices params
func (o *SupplierInvoiceForApprovalGetApprovalInvoicesParams) WithTimeout(timeout time.Duration) *SupplierInvoiceForApprovalGetApprovalInvoicesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the supplier invoice for approval get approval invoices params
func (o *SupplierInvoiceForApprovalGetApprovalInvoicesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the supplier invoice for approval get approval invoices params
func (o *SupplierInvoiceForApprovalGetApprovalInvoicesParams) WithContext(ctx context.Context) *SupplierInvoiceForApprovalGetApprovalInvoicesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the supplier invoice for approval get approval invoices params
func (o *SupplierInvoiceForApprovalGetApprovalInvoicesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the supplier invoice for approval get approval invoices params
func (o *SupplierInvoiceForApprovalGetApprovalInvoicesParams) WithHTTPClient(client *http.Client) *SupplierInvoiceForApprovalGetApprovalInvoicesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the supplier invoice for approval get approval invoices params
func (o *SupplierInvoiceForApprovalGetApprovalInvoicesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCount adds the count to the supplier invoice for approval get approval invoices params
func (o *SupplierInvoiceForApprovalGetApprovalInvoicesParams) WithCount(count *int64) *SupplierInvoiceForApprovalGetApprovalInvoicesParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the supplier invoice for approval get approval invoices params
func (o *SupplierInvoiceForApprovalGetApprovalInvoicesParams) SetCount(count *int64) {
	o.Count = count
}

// WithEmployeeID adds the employeeID to the supplier invoice for approval get approval invoices params
func (o *SupplierInvoiceForApprovalGetApprovalInvoicesParams) WithEmployeeID(employeeID *int32) *SupplierInvoiceForApprovalGetApprovalInvoicesParams {
	o.SetEmployeeID(employeeID)
	return o
}

// SetEmployeeID adds the employeeId to the supplier invoice for approval get approval invoices params
func (o *SupplierInvoiceForApprovalGetApprovalInvoicesParams) SetEmployeeID(employeeID *int32) {
	o.EmployeeID = employeeID
}

// WithFields adds the fields to the supplier invoice for approval get approval invoices params
func (o *SupplierInvoiceForApprovalGetApprovalInvoicesParams) WithFields(fields *string) *SupplierInvoiceForApprovalGetApprovalInvoicesParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the supplier invoice for approval get approval invoices params
func (o *SupplierInvoiceForApprovalGetApprovalInvoicesParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithFrom adds the from to the supplier invoice for approval get approval invoices params
func (o *SupplierInvoiceForApprovalGetApprovalInvoicesParams) WithFrom(from *int64) *SupplierInvoiceForApprovalGetApprovalInvoicesParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the supplier invoice for approval get approval invoices params
func (o *SupplierInvoiceForApprovalGetApprovalInvoicesParams) SetFrom(from *int64) {
	o.From = from
}

// WithSearchText adds the searchText to the supplier invoice for approval get approval invoices params
func (o *SupplierInvoiceForApprovalGetApprovalInvoicesParams) WithSearchText(searchText *string) *SupplierInvoiceForApprovalGetApprovalInvoicesParams {
	o.SetSearchText(searchText)
	return o
}

// SetSearchText adds the searchText to the supplier invoice for approval get approval invoices params
func (o *SupplierInvoiceForApprovalGetApprovalInvoicesParams) SetSearchText(searchText *string) {
	o.SearchText = searchText
}

// WithShowAll adds the showAll to the supplier invoice for approval get approval invoices params
func (o *SupplierInvoiceForApprovalGetApprovalInvoicesParams) WithShowAll(showAll *bool) *SupplierInvoiceForApprovalGetApprovalInvoicesParams {
	o.SetShowAll(showAll)
	return o
}

// SetShowAll adds the showAll to the supplier invoice for approval get approval invoices params
func (o *SupplierInvoiceForApprovalGetApprovalInvoicesParams) SetShowAll(showAll *bool) {
	o.ShowAll = showAll
}

// WithSorting adds the sorting to the supplier invoice for approval get approval invoices params
func (o *SupplierInvoiceForApprovalGetApprovalInvoicesParams) WithSorting(sorting *string) *SupplierInvoiceForApprovalGetApprovalInvoicesParams {
	o.SetSorting(sorting)
	return o
}

// SetSorting adds the sorting to the supplier invoice for approval get approval invoices params
func (o *SupplierInvoiceForApprovalGetApprovalInvoicesParams) SetSorting(sorting *string) {
	o.Sorting = sorting
}

// WriteToRequest writes these params to a swagger request
func (o *SupplierInvoiceForApprovalGetApprovalInvoicesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Count != nil {

		// query param count
		var qrCount int64
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt64(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	if o.EmployeeID != nil {

		// query param employeeId
		var qrEmployeeID int32
		if o.EmployeeID != nil {
			qrEmployeeID = *o.EmployeeID
		}
		qEmployeeID := swag.FormatInt32(qrEmployeeID)
		if qEmployeeID != "" {
			if err := r.SetQueryParam("employeeId", qEmployeeID); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.From != nil {

		// query param from
		var qrFrom int64
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := swag.FormatInt64(qrFrom)
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	if o.SearchText != nil {

		// query param searchText
		var qrSearchText string
		if o.SearchText != nil {
			qrSearchText = *o.SearchText
		}
		qSearchText := qrSearchText
		if qSearchText != "" {
			if err := r.SetQueryParam("searchText", qSearchText); err != nil {
				return err
			}
		}

	}

	if o.ShowAll != nil {

		// query param showAll
		var qrShowAll bool
		if o.ShowAll != nil {
			qrShowAll = *o.ShowAll
		}
		qShowAll := swag.FormatBool(qrShowAll)
		if qShowAll != "" {
			if err := r.SetQueryParam("showAll", qShowAll); err != nil {
				return err
			}
		}

	}

	if o.Sorting != nil {

		// query param sorting
		var qrSorting string
		if o.Sorting != nil {
			qrSorting = *o.Sorting
		}
		qSorting := qrSorting
		if qSorting != "" {
			if err := r.SetQueryParam("sorting", qSorting); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
