// Code generated by go-swagger; DO NOT EDIT.

package hourly_cost_and_rate

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/bjerkio/tripletex-go/models"
)

// EmployeeHourlyCostAndRatePostReader is a Reader for the EmployeeHourlyCostAndRatePost structure.
type EmployeeHourlyCostAndRatePostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EmployeeHourlyCostAndRatePostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewEmployeeHourlyCostAndRatePostCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewEmployeeHourlyCostAndRatePostCreated creates a EmployeeHourlyCostAndRatePostCreated with default headers values
func NewEmployeeHourlyCostAndRatePostCreated() *EmployeeHourlyCostAndRatePostCreated {
	return &EmployeeHourlyCostAndRatePostCreated{}
}

/*EmployeeHourlyCostAndRatePostCreated handles this case with default header values.

successfully created
*/
type EmployeeHourlyCostAndRatePostCreated struct {
	Payload *models.ResponseWrapperHourlyCostAndRate
}

func (o *EmployeeHourlyCostAndRatePostCreated) Error() string {
	return fmt.Sprintf("[POST /employee/hourlyCostAndRate][%d] employeeHourlyCostAndRatePostCreated  %+v", 201, o.Payload)
}

func (o *EmployeeHourlyCostAndRatePostCreated) GetPayload() *models.ResponseWrapperHourlyCostAndRate {
	return o.Payload
}

func (o *EmployeeHourlyCostAndRatePostCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperHourlyCostAndRate)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
