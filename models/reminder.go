// Copyright 2020 Bjerk AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Reminder reminder
//
// swagger:model Reminder
type Reminder struct {

	// bank
	// Max Length: 255
	Bank string `json:"bank,omitempty"`

	// bank account i b a n
	// Max Length: 255
	BankAccountIBAN string `json:"bankAccountIBAN,omitempty"`

	// bank account number
	// Max Length: 255
	BankAccountNumber string `json:"bankAccountNumber,omitempty"`

	// bank account s w i f t
	// Max Length: 255
	BankAccountSWIFT string `json:"bankAccountSWIFT,omitempty"`

	// changes
	// Read Only: true
	Changes []*Change `json:"changes"`

	// The fee part of the reminder, in the company's currency.
	// Read Only: true
	Charge float64 `json:"charge,omitempty"`

	// The fee part of the reminder, in the invoice currency.
	// Read Only: true
	ChargeCurrency float64 `json:"chargeCurrency,omitempty"`

	// comment
	Comment string `json:"comment,omitempty"`

	// The reminder currency.
	// Read Only: true
	Currency *Currency `json:"currency,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// The reminder interest rate.
	// Read Only: true
	InterestRate float64 `json:"interestRate,omitempty"`

	// The interests part of the reminder.
	// Read Only: true
	Interests float64 `json:"interests,omitempty"`

	// KID - Kundeidentifikasjonsnummer.
	// Max Length: 25
	Kid string `json:"kid,omitempty"`

	// Creation date of the invoice reminder.
	// Read Only: true
	ReminderDate string `json:"reminderDate,omitempty"`

	// The reminder term of payment date.
	// Required: true
	TermOfPayment *string `json:"termOfPayment"`

	// The total amount to pay in reminder's currency.
	// Read Only: true
	TotalAmountCurrency float64 `json:"totalAmountCurrency,omitempty"`

	// The total fee part of all reminders, in the company's currency.
	// Read Only: true
	TotalCharge float64 `json:"totalCharge,omitempty"`

	// The total fee part of all reminders, in the invoice currency.
	// Read Only: true
	TotalChargeCurrency float64 `json:"totalChargeCurrency,omitempty"`

	// type
	// Required: true
	// Enum: [SOFT_REMINDER REMINDER NOTICE_OF_DEBT_COLLECTION DEBT_COLLECTION]
	Type *string `json:"type"`

	// url
	// Read Only: true
	URL string `json:"url,omitempty"`

	// version
	Version int32 `json:"version,omitempty"`
}

// Validate validates this reminder
func (m *Reminder) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBank(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBankAccountIBAN(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBankAccountNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBankAccountSWIFT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTermOfPayment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Reminder) validateBank(formats strfmt.Registry) error {

	if swag.IsZero(m.Bank) { // not required
		return nil
	}

	if err := validate.MaxLength("bank", "body", string(m.Bank), 255); err != nil {
		return err
	}

	return nil
}

func (m *Reminder) validateBankAccountIBAN(formats strfmt.Registry) error {

	if swag.IsZero(m.BankAccountIBAN) { // not required
		return nil
	}

	if err := validate.MaxLength("bankAccountIBAN", "body", string(m.BankAccountIBAN), 255); err != nil {
		return err
	}

	return nil
}

func (m *Reminder) validateBankAccountNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.BankAccountNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("bankAccountNumber", "body", string(m.BankAccountNumber), 255); err != nil {
		return err
	}

	return nil
}

func (m *Reminder) validateBankAccountSWIFT(formats strfmt.Registry) error {

	if swag.IsZero(m.BankAccountSWIFT) { // not required
		return nil
	}

	if err := validate.MaxLength("bankAccountSWIFT", "body", string(m.BankAccountSWIFT), 255); err != nil {
		return err
	}

	return nil
}

func (m *Reminder) validateChanges(formats strfmt.Registry) error {

	if swag.IsZero(m.Changes) { // not required
		return nil
	}

	for i := 0; i < len(m.Changes); i++ {
		if swag.IsZero(m.Changes[i]) { // not required
			continue
		}

		if m.Changes[i] != nil {
			if err := m.Changes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("changes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Reminder) validateCurrency(formats strfmt.Registry) error {

	if swag.IsZero(m.Currency) { // not required
		return nil
	}

	if m.Currency != nil {
		if err := m.Currency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currency")
			}
			return err
		}
	}

	return nil
}

func (m *Reminder) validateKid(formats strfmt.Registry) error {

	if swag.IsZero(m.Kid) { // not required
		return nil
	}

	if err := validate.MaxLength("kid", "body", string(m.Kid), 25); err != nil {
		return err
	}

	return nil
}

func (m *Reminder) validateTermOfPayment(formats strfmt.Registry) error {

	if err := validate.Required("termOfPayment", "body", m.TermOfPayment); err != nil {
		return err
	}

	return nil
}

var reminderTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SOFT_REMINDER","REMINDER","NOTICE_OF_DEBT_COLLECTION","DEBT_COLLECTION"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		reminderTypeTypePropEnum = append(reminderTypeTypePropEnum, v)
	}
}

const (

	// ReminderTypeSOFTREMINDER captures enum value "SOFT_REMINDER"
	ReminderTypeSOFTREMINDER string = "SOFT_REMINDER"

	// ReminderTypeREMINDER captures enum value "REMINDER"
	ReminderTypeREMINDER string = "REMINDER"

	// ReminderTypeNOTICEOFDEBTCOLLECTION captures enum value "NOTICE_OF_DEBT_COLLECTION"
	ReminderTypeNOTICEOFDEBTCOLLECTION string = "NOTICE_OF_DEBT_COLLECTION"

	// ReminderTypeDEBTCOLLECTION captures enum value "DEBT_COLLECTION"
	ReminderTypeDEBTCOLLECTION string = "DEBT_COLLECTION"
)

// prop value enum
func (m *Reminder) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, reminderTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Reminder) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Reminder) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Reminder) UnmarshalBinary(b []byte) error {
	var res Reminder
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
