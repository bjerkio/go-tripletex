// Code generated by go-swagger; DO NOT EDIT.

package voucher

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new voucher API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for voucher API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	LedgerVoucherAttachmentDeleteAttachment(params *LedgerVoucherAttachmentDeleteAttachmentParams, authInfo runtime.ClientAuthInfoWriter) error

	LedgerVoucherAttachmentUploadAttachment(params *LedgerVoucherAttachmentUploadAttachmentParams, authInfo runtime.ClientAuthInfoWriter) error

	LedgerVoucherImportDocumentImportDocument(params *LedgerVoucherImportDocumentImportDocumentParams, authInfo runtime.ClientAuthInfoWriter) (*LedgerVoucherImportDocumentImportDocumentCreated, error)

	LedgerVoucherImportGbat10ImportGbat10(params *LedgerVoucherImportGbat10ImportGbat10Params, authInfo runtime.ClientAuthInfoWriter) error

	LedgerVoucherListPutList(params *LedgerVoucherListPutListParams, authInfo runtime.ClientAuthInfoWriter) (*LedgerVoucherListPutListOK, error)

	LedgerVoucherNonPostedNonPosted(params *LedgerVoucherNonPostedNonPostedParams, authInfo runtime.ClientAuthInfoWriter) (*LedgerVoucherNonPostedNonPostedOK, error)

	LedgerVoucherOptionsOptions(params *LedgerVoucherOptionsOptionsParams, authInfo runtime.ClientAuthInfoWriter) (*LedgerVoucherOptionsOptionsOK, error)

	LedgerVoucherPdfDownloadPdf(params *LedgerVoucherPdfDownloadPdfParams, authInfo runtime.ClientAuthInfoWriter) (*LedgerVoucherPdfDownloadPdfOK, error)

	LedgerVoucherPdfUploadPdf(params *LedgerVoucherPdfUploadPdfParams, authInfo runtime.ClientAuthInfoWriter) error

	LedgerVoucherReverseReverse(params *LedgerVoucherReverseReverseParams, authInfo runtime.ClientAuthInfoWriter) (*LedgerVoucherReverseReverseOK, error)

	LedgerVoucherSendToInboxSendToInbox(params *LedgerVoucherSendToInboxSendToInboxParams, authInfo runtime.ClientAuthInfoWriter) (*LedgerVoucherSendToInboxSendToInboxOK, error)

	LedgerVoucherSendToLedgerSendToLedger(params *LedgerVoucherSendToLedgerSendToLedgerParams, authInfo runtime.ClientAuthInfoWriter) (*LedgerVoucherSendToLedgerSendToLedgerOK, error)

	LedgerVoucherDelete(params *LedgerVoucherDeleteParams, authInfo runtime.ClientAuthInfoWriter) error

	LedgerVoucherGet(params *LedgerVoucherGetParams, authInfo runtime.ClientAuthInfoWriter) (*LedgerVoucherGetOK, error)

	LedgerVoucherPost(params *LedgerVoucherPostParams, authInfo runtime.ClientAuthInfoWriter) (*LedgerVoucherPostCreated, error)

	LedgerVoucherPut(params *LedgerVoucherPutParams, authInfo runtime.ClientAuthInfoWriter) (*LedgerVoucherPutOK, error)

	LedgerVoucherSearch(params *LedgerVoucherSearchParams, authInfo runtime.ClientAuthInfoWriter) (*LedgerVoucherSearchOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  LedgerVoucherAttachmentDeleteAttachment bs e t a delete attachment
*/
func (a *Client) LedgerVoucherAttachmentDeleteAttachment(params *LedgerVoucherAttachmentDeleteAttachmentParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLedgerVoucherAttachmentDeleteAttachmentParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LedgerVoucherAttachment_deleteAttachment",
		Method:             "DELETE",
		PathPattern:        "/ledger/voucher/{id}/attachment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LedgerVoucherAttachmentDeleteAttachmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  LedgerVoucherAttachmentUploadAttachment uploads attachment to voucher if the voucher already has an attachment the content will be appended to the existing attachment as new p d f page s valid document formats are p d f p n g j p e g and t i f f non p d f formats will be converted to p d f send as multipart form
*/
func (a *Client) LedgerVoucherAttachmentUploadAttachment(params *LedgerVoucherAttachmentUploadAttachmentParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLedgerVoucherAttachmentUploadAttachmentParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LedgerVoucherAttachment_uploadAttachment",
		Method:             "POST",
		PathPattern:        "/ledger/voucher/{voucherId}/attachment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LedgerVoucherAttachmentUploadAttachmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  LedgerVoucherImportDocumentImportDocument bs e t a upload a document to create one or more vouchers valid document formats are p d f p n g j p e g t i f f and e h f send as multipart form
*/
func (a *Client) LedgerVoucherImportDocumentImportDocument(params *LedgerVoucherImportDocumentImportDocumentParams, authInfo runtime.ClientAuthInfoWriter) (*LedgerVoucherImportDocumentImportDocumentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLedgerVoucherImportDocumentImportDocumentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LedgerVoucherImportDocument_importDocument",
		Method:             "POST",
		PathPattern:        "/ledger/voucher/importDocument",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LedgerVoucherImportDocumentImportDocumentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LedgerVoucherImportDocumentImportDocumentCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LedgerVoucherImportDocument_importDocument: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LedgerVoucherImportGbat10ImportGbat10 imports g b a t10 send as multipart form
*/
func (a *Client) LedgerVoucherImportGbat10ImportGbat10(params *LedgerVoucherImportGbat10ImportGbat10Params, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLedgerVoucherImportGbat10ImportGbat10Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LedgerVoucherImportGbat10_importGbat10",
		Method:             "POST",
		PathPattern:        "/ledger/voucher/importGbat10",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LedgerVoucherImportGbat10ImportGbat10Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  LedgerVoucherListPutList bs e t a update multiple vouchers postings with gui row 0 will be deleted and regenerated
*/
func (a *Client) LedgerVoucherListPutList(params *LedgerVoucherListPutListParams, authInfo runtime.ClientAuthInfoWriter) (*LedgerVoucherListPutListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLedgerVoucherListPutListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LedgerVoucherList_putList",
		Method:             "PUT",
		PathPattern:        "/ledger/voucher/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LedgerVoucherListPutListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LedgerVoucherListPutListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LedgerVoucherList_putList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LedgerVoucherNonPostedNonPosted bs e t a find non posted vouchers
*/
func (a *Client) LedgerVoucherNonPostedNonPosted(params *LedgerVoucherNonPostedNonPostedParams, authInfo runtime.ClientAuthInfoWriter) (*LedgerVoucherNonPostedNonPostedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLedgerVoucherNonPostedNonPostedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LedgerVoucherNonPosted_nonPosted",
		Method:             "GET",
		PathPattern:        "/ledger/voucher/>nonPosted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LedgerVoucherNonPostedNonPostedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LedgerVoucherNonPostedNonPostedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LedgerVoucherNonPosted_nonPosted: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LedgerVoucherOptionsOptions bs e t a returns a data structure containing meta information about operations that are available for this voucher currently only implemented for d e l e t e it is possible to check if the voucher is deletable
*/
func (a *Client) LedgerVoucherOptionsOptions(params *LedgerVoucherOptionsOptionsParams, authInfo runtime.ClientAuthInfoWriter) (*LedgerVoucherOptionsOptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLedgerVoucherOptionsOptionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LedgerVoucherOptions_options",
		Method:             "GET",
		PathPattern:        "/ledger/voucher/{id}/options",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LedgerVoucherOptionsOptionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LedgerVoucherOptionsOptionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LedgerVoucherOptions_options: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LedgerVoucherPdfDownloadPdf gets p d f representation of voucher by ID
*/
func (a *Client) LedgerVoucherPdfDownloadPdf(params *LedgerVoucherPdfDownloadPdfParams, authInfo runtime.ClientAuthInfoWriter) (*LedgerVoucherPdfDownloadPdfOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLedgerVoucherPdfDownloadPdfParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LedgerVoucherPdf_downloadPdf",
		Method:             "GET",
		PathPattern:        "/ledger/voucher/{voucherId}/pdf",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LedgerVoucherPdfDownloadPdfReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LedgerVoucherPdfDownloadPdfOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LedgerVoucherPdf_downloadPdf: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LedgerVoucherPdfUploadPdf ds e p r e c a t e d use p o s t ledger voucher voucher Id attachment instead
*/
func (a *Client) LedgerVoucherPdfUploadPdf(params *LedgerVoucherPdfUploadPdfParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLedgerVoucherPdfUploadPdfParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LedgerVoucherPdf_uploadPdf",
		Method:             "POST",
		PathPattern:        "/ledger/voucher/{voucherId}/pdf/{fileName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LedgerVoucherPdfUploadPdfReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  LedgerVoucherReverseReverse reverses the voucher and returns the reversed voucher supports reversing most voucher types except salary transactions
*/
func (a *Client) LedgerVoucherReverseReverse(params *LedgerVoucherReverseReverseParams, authInfo runtime.ClientAuthInfoWriter) (*LedgerVoucherReverseReverseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLedgerVoucherReverseReverseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LedgerVoucherReverse_reverse",
		Method:             "PUT",
		PathPattern:        "/ledger/voucher/{id}/:reverse",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LedgerVoucherReverseReverseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LedgerVoucherReverseReverseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LedgerVoucherReverse_reverse: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LedgerVoucherSendToInboxSendToInbox bs e t a send voucher to inbox
*/
func (a *Client) LedgerVoucherSendToInboxSendToInbox(params *LedgerVoucherSendToInboxSendToInboxParams, authInfo runtime.ClientAuthInfoWriter) (*LedgerVoucherSendToInboxSendToInboxOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLedgerVoucherSendToInboxSendToInboxParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LedgerVoucherSendToInbox_sendToInbox",
		Method:             "PUT",
		PathPattern:        "/ledger/voucher/{id}/:sendToInbox",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LedgerVoucherSendToInboxSendToInboxReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LedgerVoucherSendToInboxSendToInboxOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LedgerVoucherSendToInbox_sendToInbox: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LedgerVoucherSendToLedgerSendToLedger bs e t a send voucher to ledger
*/
func (a *Client) LedgerVoucherSendToLedgerSendToLedger(params *LedgerVoucherSendToLedgerSendToLedgerParams, authInfo runtime.ClientAuthInfoWriter) (*LedgerVoucherSendToLedgerSendToLedgerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLedgerVoucherSendToLedgerSendToLedgerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LedgerVoucherSendToLedger_sendToLedger",
		Method:             "PUT",
		PathPattern:        "/ledger/voucher/{id}/:sendToLedger",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LedgerVoucherSendToLedgerSendToLedgerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LedgerVoucherSendToLedgerSendToLedgerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LedgerVoucherSendToLedger_sendToLedger: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LedgerVoucherDelete bs e t a delete voucher by ID
*/
func (a *Client) LedgerVoucherDelete(params *LedgerVoucherDeleteParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLedgerVoucherDeleteParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LedgerVoucher_delete",
		Method:             "DELETE",
		PathPattern:        "/ledger/voucher/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LedgerVoucherDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  LedgerVoucherGet gets voucher by ID
*/
func (a *Client) LedgerVoucherGet(params *LedgerVoucherGetParams, authInfo runtime.ClientAuthInfoWriter) (*LedgerVoucherGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLedgerVoucherGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LedgerVoucher_get",
		Method:             "GET",
		PathPattern:        "/ledger/voucher/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LedgerVoucherGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LedgerVoucherGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LedgerVoucher_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LedgerVoucherPost adds new voucher i m p o r t a n t also creates postings only the gross amounts will be used
*/
func (a *Client) LedgerVoucherPost(params *LedgerVoucherPostParams, authInfo runtime.ClientAuthInfoWriter) (*LedgerVoucherPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLedgerVoucherPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LedgerVoucher_post",
		Method:             "POST",
		PathPattern:        "/ledger/voucher",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LedgerVoucherPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LedgerVoucherPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LedgerVoucher_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LedgerVoucherPut bs e t a update voucher postings with gui row 0 will be deleted and regenerated
*/
func (a *Client) LedgerVoucherPut(params *LedgerVoucherPutParams, authInfo runtime.ClientAuthInfoWriter) (*LedgerVoucherPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLedgerVoucherPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LedgerVoucher_put",
		Method:             "PUT",
		PathPattern:        "/ledger/voucher/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LedgerVoucherPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LedgerVoucherPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LedgerVoucher_put: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LedgerVoucherSearch finds vouchers corresponding with sent data
*/
func (a *Client) LedgerVoucherSearch(params *LedgerVoucherSearchParams, authInfo runtime.ClientAuthInfoWriter) (*LedgerVoucherSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLedgerVoucherSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LedgerVoucher_search",
		Method:             "GET",
		PathPattern:        "/ledger/voucher",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LedgerVoucherSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LedgerVoucherSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LedgerVoucher_search: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
