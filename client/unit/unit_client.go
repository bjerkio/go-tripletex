// Code generated by go-swagger; DO NOT EDIT.

package unit

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new unit API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for unit API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ProductUnitListPostList(params *ProductUnitListPostListParams, authInfo runtime.ClientAuthInfoWriter) (*ProductUnitListPostListCreated, error)

	ProductUnitListPutList(params *ProductUnitListPutListParams, authInfo runtime.ClientAuthInfoWriter) (*ProductUnitListPutListOK, error)

	ProductUnitDelete(params *ProductUnitDeleteParams, authInfo runtime.ClientAuthInfoWriter) error

	ProductUnitGet(params *ProductUnitGetParams, authInfo runtime.ClientAuthInfoWriter) (*ProductUnitGetOK, error)

	ProductUnitPost(params *ProductUnitPostParams, authInfo runtime.ClientAuthInfoWriter) (*ProductUnitPostCreated, error)

	ProductUnitPut(params *ProductUnitPutParams, authInfo runtime.ClientAuthInfoWriter) (*ProductUnitPutOK, error)

	ProductUnitSearch(params *ProductUnitSearchParams, authInfo runtime.ClientAuthInfoWriter) (*ProductUnitSearchOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ProductUnitListPostList bs e t a create multiple product units
*/
func (a *Client) ProductUnitListPostList(params *ProductUnitListPostListParams, authInfo runtime.ClientAuthInfoWriter) (*ProductUnitListPostListCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProductUnitListPostListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProductUnitList_postList",
		Method:             "POST",
		PathPattern:        "/product/unit/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProductUnitListPostListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProductUnitListPostListCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProductUnitList_postList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProductUnitListPutList bs e t a update list of product units
*/
func (a *Client) ProductUnitListPutList(params *ProductUnitListPutListParams, authInfo runtime.ClientAuthInfoWriter) (*ProductUnitListPutListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProductUnitListPutListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProductUnitList_putList",
		Method:             "PUT",
		PathPattern:        "/product/unit/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProductUnitListPutListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProductUnitListPutListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProductUnitList_putList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProductUnitDelete bs e t a delete product unit by ID
*/
func (a *Client) ProductUnitDelete(params *ProductUnitDeleteParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProductUnitDeleteParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProductUnit_delete",
		Method:             "DELETE",
		PathPattern:        "/product/unit/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProductUnitDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  ProductUnitGet gets product unit by ID
*/
func (a *Client) ProductUnitGet(params *ProductUnitGetParams, authInfo runtime.ClientAuthInfoWriter) (*ProductUnitGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProductUnitGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProductUnit_get",
		Method:             "GET",
		PathPattern:        "/product/unit/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProductUnitGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProductUnitGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProductUnit_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProductUnitPost bs e t a create new product unit
*/
func (a *Client) ProductUnitPost(params *ProductUnitPostParams, authInfo runtime.ClientAuthInfoWriter) (*ProductUnitPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProductUnitPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProductUnit_post",
		Method:             "POST",
		PathPattern:        "/product/unit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProductUnitPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProductUnitPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProductUnit_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProductUnitPut bs e t a update product unit
*/
func (a *Client) ProductUnitPut(params *ProductUnitPutParams, authInfo runtime.ClientAuthInfoWriter) (*ProductUnitPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProductUnitPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProductUnit_put",
		Method:             "PUT",
		PathPattern:        "/product/unit/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProductUnitPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProductUnitPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProductUnit_put: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProductUnitSearch finds product units corresponding with sent data
*/
func (a *Client) ProductUnitSearch(params *ProductUnitSearchParams, authInfo runtime.ClientAuthInfoWriter) (*ProductUnitSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProductUnitSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProductUnit_search",
		Method:             "GET",
		PathPattern:        "/product/unit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProductUnitSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProductUnitSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProductUnit_search: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
