// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BankAgreementCreationDTO bank agreement creation d t o
//
// swagger:model BankAgreementCreationDTO
type BankAgreementCreationDTO struct {

	// Customer number in bank
	AccountInBankID string `json:"accountInBankId,omitempty"`

	// JSON representing a list of new object to be created. Should not have ID and version set.
	// Required: true
	BankAccounts []*Account `json:"bankAccounts"`

	// Bank ID
	// Required: true
	BankID *int32 `json:"bankId"`

	// Customer Id from Bank
	CcmAgreementID string `json:"ccmAgreementId,omitempty"`

	// Division (DNB only)
	Division string `json:"division,omitempty"`

	// Electronic agreement creation initiated.
	ElectronicCreation *bool `json:"electronicCreation,omitempty"`

	// Organization number
	OrganizationNumber string `json:"organizationNumber,omitempty"`
}

// Validate validates this bank agreement creation d t o
func (m *BankAgreementCreationDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBankAccounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBankID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BankAgreementCreationDTO) validateBankAccounts(formats strfmt.Registry) error {

	if err := validate.Required("bankAccounts", "body", m.BankAccounts); err != nil {
		return err
	}

	for i := 0; i < len(m.BankAccounts); i++ {
		if swag.IsZero(m.BankAccounts[i]) { // not required
			continue
		}

		if m.BankAccounts[i] != nil {
			if err := m.BankAccounts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bankAccounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BankAgreementCreationDTO) validateBankID(formats strfmt.Registry) error {

	if err := validate.Required("bankId", "body", m.BankID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BankAgreementCreationDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BankAgreementCreationDTO) UnmarshalBinary(b []byte) error {
	var res BankAgreementCreationDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
