// Code generated by go-swagger; DO NOT EDIT.

package order_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new order group API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for order group API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	OrderOrderGroupDelete(params *OrderOrderGroupDeleteParams, authInfo runtime.ClientAuthInfoWriter) error

	OrderOrderGroupGet(params *OrderOrderGroupGetParams, authInfo runtime.ClientAuthInfoWriter) (*OrderOrderGroupGetOK, error)

	OrderOrderGroupPost(params *OrderOrderGroupPostParams, authInfo runtime.ClientAuthInfoWriter) (*OrderOrderGroupPostCreated, error)

	OrderOrderGroupPut(params *OrderOrderGroupPutParams, authInfo runtime.ClientAuthInfoWriter) (*OrderOrderGroupPutOK, error)

	OrderOrderGroupSearch(params *OrderOrderGroupSearchParams, authInfo runtime.ClientAuthInfoWriter) (*OrderOrderGroupSearchOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  OrderOrderGroupDelete beta delete order group by ID
*/
func (a *Client) OrderOrderGroupDelete(params *OrderOrderGroupDeleteParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrderOrderGroupDeleteParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OrderOrderGroup_delete",
		Method:             "DELETE",
		PathPattern:        "/order/orderGroup/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrderOrderGroupDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  OrderOrderGroupGet beta get order group by ID a order group is a way to group order lines and add comments and subtotals
*/
func (a *Client) OrderOrderGroupGet(params *OrderOrderGroupGetParams, authInfo runtime.ClientAuthInfoWriter) (*OrderOrderGroupGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrderOrderGroupGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OrderOrderGroup_get",
		Method:             "GET",
		PathPattern:        "/order/orderGroup/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrderOrderGroupGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrderOrderGroupGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OrderOrderGroup_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OrderOrderGroupPost beta post order group
*/
func (a *Client) OrderOrderGroupPost(params *OrderOrderGroupPostParams, authInfo runtime.ClientAuthInfoWriter) (*OrderOrderGroupPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrderOrderGroupPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OrderOrderGroup_post",
		Method:             "POST",
		PathPattern:        "/order/orderGroup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrderOrderGroupPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrderOrderGroupPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OrderOrderGroup_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OrderOrderGroupPut beta put order group
*/
func (a *Client) OrderOrderGroupPut(params *OrderOrderGroupPutParams, authInfo runtime.ClientAuthInfoWriter) (*OrderOrderGroupPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrderOrderGroupPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OrderOrderGroup_put",
		Method:             "PUT",
		PathPattern:        "/order/orderGroup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrderOrderGroupPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrderOrderGroupPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OrderOrderGroup_put: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OrderOrderGroupSearch bs e t a find order groups corresponding with sent data
*/
func (a *Client) OrderOrderGroupSearch(params *OrderOrderGroupSearchParams, authInfo runtime.ClientAuthInfoWriter) (*OrderOrderGroupSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrderOrderGroupSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OrderOrderGroup_search",
		Method:             "GET",
		PathPattern:        "/order/orderGroup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrderOrderGroupSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrderOrderGroupSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OrderOrderGroup_search: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
