// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GoodsReceipt goods receipt
//
// swagger:model GoodsReceipt
type GoodsReceipt struct {

	// changes
	// Read Only: true
	Changes []*Change `json:"changes"`

	// Purchase Order lines tied to the goods receipt
	// Required: true
	GoodsReceiptLines []*GoodsReceiptLine `json:"goodsReceiptLines"`

	// id
	ID int32 `json:"id,omitempty"`

	// purchase order
	PurchaseOrder *PurchaseOrder `json:"purchaseOrder,omitempty"`

	// received by
	// Read Only: true
	ReceivedBy *Employee `json:"receivedBy,omitempty"`

	// registration date
	// Required: true
	RegistrationDate *string `json:"registrationDate"`

	// status
	// Read Only: true
	// Enum: [STATUS_OPEN STATUS_CONFIRMED]
	Status string `json:"status,omitempty"`

	// url
	// Read Only: true
	URL string `json:"url,omitempty"`

	// version
	Version int32 `json:"version,omitempty"`
}

// Validate validates this goods receipt
func (m *GoodsReceipt) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGoodsReceiptLines(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePurchaseOrder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceivedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistrationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GoodsReceipt) validateChanges(formats strfmt.Registry) error {

	if swag.IsZero(m.Changes) { // not required
		return nil
	}

	for i := 0; i < len(m.Changes); i++ {
		if swag.IsZero(m.Changes[i]) { // not required
			continue
		}

		if m.Changes[i] != nil {
			if err := m.Changes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("changes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GoodsReceipt) validateGoodsReceiptLines(formats strfmt.Registry) error {

	if err := validate.Required("goodsReceiptLines", "body", m.GoodsReceiptLines); err != nil {
		return err
	}

	for i := 0; i < len(m.GoodsReceiptLines); i++ {
		if swag.IsZero(m.GoodsReceiptLines[i]) { // not required
			continue
		}

		if m.GoodsReceiptLines[i] != nil {
			if err := m.GoodsReceiptLines[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("goodsReceiptLines" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GoodsReceipt) validatePurchaseOrder(formats strfmt.Registry) error {

	if swag.IsZero(m.PurchaseOrder) { // not required
		return nil
	}

	if m.PurchaseOrder != nil {
		if err := m.PurchaseOrder.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("purchaseOrder")
			}
			return err
		}
	}

	return nil
}

func (m *GoodsReceipt) validateReceivedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.ReceivedBy) { // not required
		return nil
	}

	if m.ReceivedBy != nil {
		if err := m.ReceivedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("receivedBy")
			}
			return err
		}
	}

	return nil
}

func (m *GoodsReceipt) validateRegistrationDate(formats strfmt.Registry) error {

	if err := validate.Required("registrationDate", "body", m.RegistrationDate); err != nil {
		return err
	}

	return nil
}

var goodsReceiptTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["STATUS_OPEN","STATUS_CONFIRMED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		goodsReceiptTypeStatusPropEnum = append(goodsReceiptTypeStatusPropEnum, v)
	}
}

const (

	// GoodsReceiptStatusSTATUSOPEN captures enum value "STATUS_OPEN"
	GoodsReceiptStatusSTATUSOPEN string = "STATUS_OPEN"

	// GoodsReceiptStatusSTATUSCONFIRMED captures enum value "STATUS_CONFIRMED"
	GoodsReceiptStatusSTATUSCONFIRMED string = "STATUS_CONFIRMED"
)

// prop value enum
func (m *GoodsReceipt) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, goodsReceiptTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GoodsReceipt) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GoodsReceipt) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GoodsReceipt) UnmarshalBinary(b []byte) error {
	var res GoodsReceipt
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
