// Copyright 2020 Bjerk AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package stocktaking

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new stocktaking API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for stocktaking API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	InventoryStocktakingDelete(params *InventoryStocktakingDeleteParams, authInfo runtime.ClientAuthInfoWriter) error

	InventoryStocktakingGet(params *InventoryStocktakingGetParams, authInfo runtime.ClientAuthInfoWriter) (*InventoryStocktakingGetOK, error)

	InventoryStocktakingPost(params *InventoryStocktakingPostParams, authInfo runtime.ClientAuthInfoWriter) (*InventoryStocktakingPostCreated, error)

	InventoryStocktakingPut(params *InventoryStocktakingPutParams, authInfo runtime.ClientAuthInfoWriter) (*InventoryStocktakingPutOK, error)

	InventoryStocktakingSearch(params *InventoryStocktakingSearchParams, authInfo runtime.ClientAuthInfoWriter) (*InventoryStocktakingSearchOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  InventoryStocktakingDelete bs e t a delete stocktaking
*/
func (a *Client) InventoryStocktakingDelete(params *InventoryStocktakingDeleteParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventoryStocktakingDeleteParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "InventoryStocktakingDelete",
		Method:             "DELETE",
		PathPattern:        "/inventory/stocktaking/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventoryStocktakingDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  InventoryStocktakingGet bs e t a get stocktaking by ID
*/
func (a *Client) InventoryStocktakingGet(params *InventoryStocktakingGetParams, authInfo runtime.ClientAuthInfoWriter) (*InventoryStocktakingGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventoryStocktakingGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "InventoryStocktakingGet",
		Method:             "GET",
		PathPattern:        "/inventory/stocktaking/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventoryStocktakingGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventoryStocktakingGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InventoryStocktakingGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InventoryStocktakingPost bs e t a create new stocktaking
*/
func (a *Client) InventoryStocktakingPost(params *InventoryStocktakingPostParams, authInfo runtime.ClientAuthInfoWriter) (*InventoryStocktakingPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventoryStocktakingPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "InventoryStocktakingPost",
		Method:             "POST",
		PathPattern:        "/inventory/stocktaking",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventoryStocktakingPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventoryStocktakingPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InventoryStocktakingPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InventoryStocktakingPut bs e t a update stocktaking
*/
func (a *Client) InventoryStocktakingPut(params *InventoryStocktakingPutParams, authInfo runtime.ClientAuthInfoWriter) (*InventoryStocktakingPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventoryStocktakingPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "InventoryStocktakingPut",
		Method:             "PUT",
		PathPattern:        "/inventory/stocktaking/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventoryStocktakingPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventoryStocktakingPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InventoryStocktakingPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InventoryStocktakingSearch bs e t a find stocktaking corresponding with sent data
*/
func (a *Client) InventoryStocktakingSearch(params *InventoryStocktakingSearchParams, authInfo runtime.ClientAuthInfoWriter) (*InventoryStocktakingSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventoryStocktakingSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "InventoryStocktakingSearch",
		Method:             "GET",
		PathPattern:        "/inventory/stocktaking",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InventoryStocktakingSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventoryStocktakingSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InventoryStocktakingSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
