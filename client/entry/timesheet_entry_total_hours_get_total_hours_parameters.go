// Copyright 2020 Bjerk AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package entry

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewTimesheetEntryTotalHoursGetTotalHoursParams creates a new TimesheetEntryTotalHoursGetTotalHoursParams object
// with the default values initialized.
func NewTimesheetEntryTotalHoursGetTotalHoursParams() *TimesheetEntryTotalHoursGetTotalHoursParams {
	var ()
	return &TimesheetEntryTotalHoursGetTotalHoursParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTimesheetEntryTotalHoursGetTotalHoursParamsWithTimeout creates a new TimesheetEntryTotalHoursGetTotalHoursParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTimesheetEntryTotalHoursGetTotalHoursParamsWithTimeout(timeout time.Duration) *TimesheetEntryTotalHoursGetTotalHoursParams {
	var ()
	return &TimesheetEntryTotalHoursGetTotalHoursParams{

		timeout: timeout,
	}
}

// NewTimesheetEntryTotalHoursGetTotalHoursParamsWithContext creates a new TimesheetEntryTotalHoursGetTotalHoursParams object
// with the default values initialized, and the ability to set a context for a request
func NewTimesheetEntryTotalHoursGetTotalHoursParamsWithContext(ctx context.Context) *TimesheetEntryTotalHoursGetTotalHoursParams {
	var ()
	return &TimesheetEntryTotalHoursGetTotalHoursParams{

		Context: ctx,
	}
}

// NewTimesheetEntryTotalHoursGetTotalHoursParamsWithHTTPClient creates a new TimesheetEntryTotalHoursGetTotalHoursParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTimesheetEntryTotalHoursGetTotalHoursParamsWithHTTPClient(client *http.Client) *TimesheetEntryTotalHoursGetTotalHoursParams {
	var ()
	return &TimesheetEntryTotalHoursGetTotalHoursParams{
		HTTPClient: client,
	}
}

/*TimesheetEntryTotalHoursGetTotalHoursParams contains all the parameters to send to the API endpoint
for the timesheet entry total hours get total hours operation typically these are written to a http.Request
*/
type TimesheetEntryTotalHoursGetTotalHoursParams struct {

	/*EmployeeID
	  ID of employee to find hours for. Defaults to ID of token owner.

	*/
	EmployeeID *int32
	/*EndDate
	  Format is yyyy-MM-dd (to and excl.). Defaults to tomorrow.

	*/
	EndDate *string
	/*Fields
	  Fields filter pattern

	*/
	Fields *string
	/*StartDate
	  Format is yyyy-MM-dd (from and incl.). Defaults to today.

	*/
	StartDate *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the timesheet entry total hours get total hours params
func (o *TimesheetEntryTotalHoursGetTotalHoursParams) WithTimeout(timeout time.Duration) *TimesheetEntryTotalHoursGetTotalHoursParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the timesheet entry total hours get total hours params
func (o *TimesheetEntryTotalHoursGetTotalHoursParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the timesheet entry total hours get total hours params
func (o *TimesheetEntryTotalHoursGetTotalHoursParams) WithContext(ctx context.Context) *TimesheetEntryTotalHoursGetTotalHoursParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the timesheet entry total hours get total hours params
func (o *TimesheetEntryTotalHoursGetTotalHoursParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the timesheet entry total hours get total hours params
func (o *TimesheetEntryTotalHoursGetTotalHoursParams) WithHTTPClient(client *http.Client) *TimesheetEntryTotalHoursGetTotalHoursParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the timesheet entry total hours get total hours params
func (o *TimesheetEntryTotalHoursGetTotalHoursParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEmployeeID adds the employeeID to the timesheet entry total hours get total hours params
func (o *TimesheetEntryTotalHoursGetTotalHoursParams) WithEmployeeID(employeeID *int32) *TimesheetEntryTotalHoursGetTotalHoursParams {
	o.SetEmployeeID(employeeID)
	return o
}

// SetEmployeeID adds the employeeId to the timesheet entry total hours get total hours params
func (o *TimesheetEntryTotalHoursGetTotalHoursParams) SetEmployeeID(employeeID *int32) {
	o.EmployeeID = employeeID
}

// WithEndDate adds the endDate to the timesheet entry total hours get total hours params
func (o *TimesheetEntryTotalHoursGetTotalHoursParams) WithEndDate(endDate *string) *TimesheetEntryTotalHoursGetTotalHoursParams {
	o.SetEndDate(endDate)
	return o
}

// SetEndDate adds the endDate to the timesheet entry total hours get total hours params
func (o *TimesheetEntryTotalHoursGetTotalHoursParams) SetEndDate(endDate *string) {
	o.EndDate = endDate
}

// WithFields adds the fields to the timesheet entry total hours get total hours params
func (o *TimesheetEntryTotalHoursGetTotalHoursParams) WithFields(fields *string) *TimesheetEntryTotalHoursGetTotalHoursParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the timesheet entry total hours get total hours params
func (o *TimesheetEntryTotalHoursGetTotalHoursParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithStartDate adds the startDate to the timesheet entry total hours get total hours params
func (o *TimesheetEntryTotalHoursGetTotalHoursParams) WithStartDate(startDate *string) *TimesheetEntryTotalHoursGetTotalHoursParams {
	o.SetStartDate(startDate)
	return o
}

// SetStartDate adds the startDate to the timesheet entry total hours get total hours params
func (o *TimesheetEntryTotalHoursGetTotalHoursParams) SetStartDate(startDate *string) {
	o.StartDate = startDate
}

// WriteToRequest writes these params to a swagger request
func (o *TimesheetEntryTotalHoursGetTotalHoursParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EmployeeID != nil {

		// query param employeeId
		var qrEmployeeID int32
		if o.EmployeeID != nil {
			qrEmployeeID = *o.EmployeeID
		}
		qEmployeeID := swag.FormatInt32(qrEmployeeID)
		if qEmployeeID != "" {
			if err := r.SetQueryParam("employeeId", qEmployeeID); err != nil {
				return err
			}
		}

	}

	if o.EndDate != nil {

		// query param endDate
		var qrEndDate string
		if o.EndDate != nil {
			qrEndDate = *o.EndDate
		}
		qEndDate := qrEndDate
		if qEndDate != "" {
			if err := r.SetQueryParam("endDate", qEndDate); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.StartDate != nil {

		// query param startDate
		var qrStartDate string
		if o.StartDate != nil {
			qrStartDate = *o.StartDate
		}
		qStartDate := qrStartDate
		if qStartDate != "" {
			if err := r.SetQueryParam("startDate", qStartDate); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
