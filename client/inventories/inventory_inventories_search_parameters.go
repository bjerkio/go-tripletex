// Code generated by go-swagger; DO NOT EDIT.

package inventories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewInventoryInventoriesSearchParams creates a new InventoryInventoriesSearchParams object
// with the default values initialized.
func NewInventoryInventoriesSearchParams() *InventoryInventoriesSearchParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &InventoryInventoriesSearchParams{
		Count: &countDefault,
		From:  &fromDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewInventoryInventoriesSearchParamsWithTimeout creates a new InventoryInventoriesSearchParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewInventoryInventoriesSearchParamsWithTimeout(timeout time.Duration) *InventoryInventoriesSearchParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &InventoryInventoriesSearchParams{
		Count: &countDefault,
		From:  &fromDefault,

		timeout: timeout,
	}
}

// NewInventoryInventoriesSearchParamsWithContext creates a new InventoryInventoriesSearchParams object
// with the default values initialized, and the ability to set a context for a request
func NewInventoryInventoriesSearchParamsWithContext(ctx context.Context) *InventoryInventoriesSearchParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &InventoryInventoriesSearchParams{
		Count: &countDefault,
		From:  &fromDefault,

		Context: ctx,
	}
}

// NewInventoryInventoriesSearchParamsWithHTTPClient creates a new InventoryInventoriesSearchParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewInventoryInventoriesSearchParamsWithHTTPClient(client *http.Client) *InventoryInventoriesSearchParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &InventoryInventoriesSearchParams{
		Count:      &countDefault,
		From:       &fromDefault,
		HTTPClient: client,
	}
}

/*InventoryInventoriesSearchParams contains all the parameters to send to the API endpoint
for the inventory inventories search operation typically these are written to a http.Request
*/
type InventoryInventoriesSearchParams struct {

	/*Count
	  Number of elements to return

	*/
	Count *int64
	/*DateFrom
	  Format is yyyy-MM-dd (from and incl.).

	*/
	DateFrom string
	/*DateTo
	  Format is yyyy-MM-dd (to and incl.).

	*/
	DateTo string
	/*Fields
	  Fields filter pattern

	*/
	Fields *string
	/*From
	  From index

	*/
	From *int64
	/*ProductID
	  Element ID

	*/
	ProductID *int32
	/*Sorting
	  Sorting pattern

	*/
	Sorting *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the inventory inventories search params
func (o *InventoryInventoriesSearchParams) WithTimeout(timeout time.Duration) *InventoryInventoriesSearchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the inventory inventories search params
func (o *InventoryInventoriesSearchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the inventory inventories search params
func (o *InventoryInventoriesSearchParams) WithContext(ctx context.Context) *InventoryInventoriesSearchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the inventory inventories search params
func (o *InventoryInventoriesSearchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the inventory inventories search params
func (o *InventoryInventoriesSearchParams) WithHTTPClient(client *http.Client) *InventoryInventoriesSearchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the inventory inventories search params
func (o *InventoryInventoriesSearchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCount adds the count to the inventory inventories search params
func (o *InventoryInventoriesSearchParams) WithCount(count *int64) *InventoryInventoriesSearchParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the inventory inventories search params
func (o *InventoryInventoriesSearchParams) SetCount(count *int64) {
	o.Count = count
}

// WithDateFrom adds the dateFrom to the inventory inventories search params
func (o *InventoryInventoriesSearchParams) WithDateFrom(dateFrom string) *InventoryInventoriesSearchParams {
	o.SetDateFrom(dateFrom)
	return o
}

// SetDateFrom adds the dateFrom to the inventory inventories search params
func (o *InventoryInventoriesSearchParams) SetDateFrom(dateFrom string) {
	o.DateFrom = dateFrom
}

// WithDateTo adds the dateTo to the inventory inventories search params
func (o *InventoryInventoriesSearchParams) WithDateTo(dateTo string) *InventoryInventoriesSearchParams {
	o.SetDateTo(dateTo)
	return o
}

// SetDateTo adds the dateTo to the inventory inventories search params
func (o *InventoryInventoriesSearchParams) SetDateTo(dateTo string) {
	o.DateTo = dateTo
}

// WithFields adds the fields to the inventory inventories search params
func (o *InventoryInventoriesSearchParams) WithFields(fields *string) *InventoryInventoriesSearchParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the inventory inventories search params
func (o *InventoryInventoriesSearchParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithFrom adds the from to the inventory inventories search params
func (o *InventoryInventoriesSearchParams) WithFrom(from *int64) *InventoryInventoriesSearchParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the inventory inventories search params
func (o *InventoryInventoriesSearchParams) SetFrom(from *int64) {
	o.From = from
}

// WithProductID adds the productID to the inventory inventories search params
func (o *InventoryInventoriesSearchParams) WithProductID(productID *int32) *InventoryInventoriesSearchParams {
	o.SetProductID(productID)
	return o
}

// SetProductID adds the productId to the inventory inventories search params
func (o *InventoryInventoriesSearchParams) SetProductID(productID *int32) {
	o.ProductID = productID
}

// WithSorting adds the sorting to the inventory inventories search params
func (o *InventoryInventoriesSearchParams) WithSorting(sorting *string) *InventoryInventoriesSearchParams {
	o.SetSorting(sorting)
	return o
}

// SetSorting adds the sorting to the inventory inventories search params
func (o *InventoryInventoriesSearchParams) SetSorting(sorting *string) {
	o.Sorting = sorting
}

// WriteToRequest writes these params to a swagger request
func (o *InventoryInventoriesSearchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Count != nil {

		// query param count
		var qrCount int64
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt64(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	// query param dateFrom
	qrDateFrom := o.DateFrom
	qDateFrom := qrDateFrom
	if qDateFrom != "" {
		if err := r.SetQueryParam("dateFrom", qDateFrom); err != nil {
			return err
		}
	}

	// query param dateTo
	qrDateTo := o.DateTo
	qDateTo := qrDateTo
	if qDateTo != "" {
		if err := r.SetQueryParam("dateTo", qDateTo); err != nil {
			return err
		}
	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.From != nil {

		// query param from
		var qrFrom int64
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := swag.FormatInt64(qrFrom)
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	if o.ProductID != nil {

		// query param productId
		var qrProductID int32
		if o.ProductID != nil {
			qrProductID = *o.ProductID
		}
		qProductID := swag.FormatInt32(qrProductID)
		if qProductID != "" {
			if err := r.SetQueryParam("productId", qProductID); err != nil {
				return err
			}
		}

	}

	if o.Sorting != nil {

		// query param sorting
		var qrSorting string
		if o.Sorting != nil {
			qrSorting = *o.Sorting
		}
		qSorting := qrSorting
		if qSorting != "" {
			if err := r.SetQueryParam("sorting", qSorting); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
