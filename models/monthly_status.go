// Copyright 2020 Bjerk AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MonthlyStatus monthly status
//
// swagger:model MonthlyStatus
type MonthlyStatus struct {

	// approved
	// Read Only: true
	Approved *bool `json:"approved,omitempty"`

	// approved by
	// Read Only: true
	ApprovedBy *Employee `json:"approvedBy,omitempty"`

	// approved date
	// Read Only: true
	ApprovedDate string `json:"approvedDate,omitempty"`

	// approved until date
	// Read Only: true
	ApprovedUntilDate string `json:"approvedUntilDate,omitempty"`

	// changes
	// Read Only: true
	Changes []*Change `json:"changes"`

	// completed
	// Read Only: true
	Completed *bool `json:"completed,omitempty"`

	// employee
	// Read Only: true
	Employee *Employee `json:"employee,omitempty"`

	// flex summary
	// Read Only: true
	FlexSummary *FlexSummary `json:"flexSummary,omitempty"`

	// hour summary
	// Read Only: true
	HourSummary *HourSummary `json:"hourSummary,omitempty"`

	// hours payout
	HoursPayout float64 `json:"hoursPayout,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// month year
	// Read Only: true
	MonthYear string `json:"monthYear,omitempty"`

	// timesheet entries
	// Read Only: true
	TimesheetEntries []*TimesheetEntry `json:"timesheetEntries"`

	// url
	// Read Only: true
	URL string `json:"url,omitempty"`

	// vacation payout
	VacationPayout float64 `json:"vacationPayout,omitempty"`

	// vacation summary
	// Read Only: true
	VacationSummary *EmployeePeriod `json:"vacationSummary,omitempty"`

	// version
	Version int32 `json:"version,omitempty"`
}

// Validate validates this monthly status
func (m *MonthlyStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApprovedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmployee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlexSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHourSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimesheetEntries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVacationSummary(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MonthlyStatus) validateApprovedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.ApprovedBy) { // not required
		return nil
	}

	if m.ApprovedBy != nil {
		if err := m.ApprovedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("approvedBy")
			}
			return err
		}
	}

	return nil
}

func (m *MonthlyStatus) validateChanges(formats strfmt.Registry) error {

	if swag.IsZero(m.Changes) { // not required
		return nil
	}

	for i := 0; i < len(m.Changes); i++ {
		if swag.IsZero(m.Changes[i]) { // not required
			continue
		}

		if m.Changes[i] != nil {
			if err := m.Changes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("changes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MonthlyStatus) validateEmployee(formats strfmt.Registry) error {

	if swag.IsZero(m.Employee) { // not required
		return nil
	}

	if m.Employee != nil {
		if err := m.Employee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("employee")
			}
			return err
		}
	}

	return nil
}

func (m *MonthlyStatus) validateFlexSummary(formats strfmt.Registry) error {

	if swag.IsZero(m.FlexSummary) { // not required
		return nil
	}

	if m.FlexSummary != nil {
		if err := m.FlexSummary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flexSummary")
			}
			return err
		}
	}

	return nil
}

func (m *MonthlyStatus) validateHourSummary(formats strfmt.Registry) error {

	if swag.IsZero(m.HourSummary) { // not required
		return nil
	}

	if m.HourSummary != nil {
		if err := m.HourSummary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hourSummary")
			}
			return err
		}
	}

	return nil
}

func (m *MonthlyStatus) validateTimesheetEntries(formats strfmt.Registry) error {

	if swag.IsZero(m.TimesheetEntries) { // not required
		return nil
	}

	for i := 0; i < len(m.TimesheetEntries); i++ {
		if swag.IsZero(m.TimesheetEntries[i]) { // not required
			continue
		}

		if m.TimesheetEntries[i] != nil {
			if err := m.TimesheetEntries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("timesheetEntries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MonthlyStatus) validateVacationSummary(formats strfmt.Registry) error {

	if swag.IsZero(m.VacationSummary) { // not required
		return nil
	}

	if m.VacationSummary != nil {
		if err := m.VacationSummary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vacationSummary")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MonthlyStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MonthlyStatus) UnmarshalBinary(b []byte) error {
	var res MonthlyStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
