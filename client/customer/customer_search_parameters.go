// Copyright 2020 Bjerk AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCustomerSearchParams creates a new CustomerSearchParams object
// with the default values initialized.
func NewCustomerSearchParams() *CustomerSearchParams {
	var (
		countDefault      = int64(1000)
		fromDefault       = int64(0)
		isInactiveDefault = bool(false)
	)
	return &CustomerSearchParams{
		Count:      &countDefault,
		From:       &fromDefault,
		IsInactive: &isInactiveDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewCustomerSearchParamsWithTimeout creates a new CustomerSearchParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCustomerSearchParamsWithTimeout(timeout time.Duration) *CustomerSearchParams {
	var (
		countDefault      = int64(1000)
		fromDefault       = int64(0)
		isInactiveDefault = bool(false)
	)
	return &CustomerSearchParams{
		Count:      &countDefault,
		From:       &fromDefault,
		IsInactive: &isInactiveDefault,

		timeout: timeout,
	}
}

// NewCustomerSearchParamsWithContext creates a new CustomerSearchParams object
// with the default values initialized, and the ability to set a context for a request
func NewCustomerSearchParamsWithContext(ctx context.Context) *CustomerSearchParams {
	var (
		countDefault      = int64(1000)
		fromDefault       = int64(0)
		isInactiveDefault = bool(false)
	)
	return &CustomerSearchParams{
		Count:      &countDefault,
		From:       &fromDefault,
		IsInactive: &isInactiveDefault,

		Context: ctx,
	}
}

// NewCustomerSearchParamsWithHTTPClient creates a new CustomerSearchParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCustomerSearchParamsWithHTTPClient(client *http.Client) *CustomerSearchParams {
	var (
		countDefault      = int64(1000)
		fromDefault       = int64(0)
		isInactiveDefault = bool(false)
	)
	return &CustomerSearchParams{
		Count:      &countDefault,
		From:       &fromDefault,
		IsInactive: &isInactiveDefault,
		HTTPClient: client,
	}
}

/*CustomerSearchParams contains all the parameters to send to the API endpoint
for the customer search operation typically these are written to a http.Request
*/
type CustomerSearchParams struct {

	/*AccountManagerID
	  List of IDs

	*/
	AccountManagerID *string
	/*Count
	  Number of elements to return

	*/
	Count *int64
	/*CustomerAccountNumber
	  List of IDs

	*/
	CustomerAccountNumber *string
	/*Email
	  Equals

	*/
	Email *string
	/*Fields
	  Fields filter pattern

	*/
	Fields *string
	/*From
	  From index

	*/
	From *int64
	/*ID
	  List of IDs

	*/
	ID *string
	/*InvoiceEmail
	  Equals

	*/
	InvoiceEmail *string
	/*IsInactive
	  Equals

	*/
	IsInactive *bool
	/*OrganizationNumber
	  Equals

	*/
	OrganizationNumber *string
	/*Sorting
	  Sorting pattern

	*/
	Sorting *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the customer search params
func (o *CustomerSearchParams) WithTimeout(timeout time.Duration) *CustomerSearchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the customer search params
func (o *CustomerSearchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the customer search params
func (o *CustomerSearchParams) WithContext(ctx context.Context) *CustomerSearchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the customer search params
func (o *CustomerSearchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the customer search params
func (o *CustomerSearchParams) WithHTTPClient(client *http.Client) *CustomerSearchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the customer search params
func (o *CustomerSearchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountManagerID adds the accountManagerID to the customer search params
func (o *CustomerSearchParams) WithAccountManagerID(accountManagerID *string) *CustomerSearchParams {
	o.SetAccountManagerID(accountManagerID)
	return o
}

// SetAccountManagerID adds the accountManagerId to the customer search params
func (o *CustomerSearchParams) SetAccountManagerID(accountManagerID *string) {
	o.AccountManagerID = accountManagerID
}

// WithCount adds the count to the customer search params
func (o *CustomerSearchParams) WithCount(count *int64) *CustomerSearchParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the customer search params
func (o *CustomerSearchParams) SetCount(count *int64) {
	o.Count = count
}

// WithCustomerAccountNumber adds the customerAccountNumber to the customer search params
func (o *CustomerSearchParams) WithCustomerAccountNumber(customerAccountNumber *string) *CustomerSearchParams {
	o.SetCustomerAccountNumber(customerAccountNumber)
	return o
}

// SetCustomerAccountNumber adds the customerAccountNumber to the customer search params
func (o *CustomerSearchParams) SetCustomerAccountNumber(customerAccountNumber *string) {
	o.CustomerAccountNumber = customerAccountNumber
}

// WithEmail adds the email to the customer search params
func (o *CustomerSearchParams) WithEmail(email *string) *CustomerSearchParams {
	o.SetEmail(email)
	return o
}

// SetEmail adds the email to the customer search params
func (o *CustomerSearchParams) SetEmail(email *string) {
	o.Email = email
}

// WithFields adds the fields to the customer search params
func (o *CustomerSearchParams) WithFields(fields *string) *CustomerSearchParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the customer search params
func (o *CustomerSearchParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithFrom adds the from to the customer search params
func (o *CustomerSearchParams) WithFrom(from *int64) *CustomerSearchParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the customer search params
func (o *CustomerSearchParams) SetFrom(from *int64) {
	o.From = from
}

// WithID adds the id to the customer search params
func (o *CustomerSearchParams) WithID(id *string) *CustomerSearchParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the customer search params
func (o *CustomerSearchParams) SetID(id *string) {
	o.ID = id
}

// WithInvoiceEmail adds the invoiceEmail to the customer search params
func (o *CustomerSearchParams) WithInvoiceEmail(invoiceEmail *string) *CustomerSearchParams {
	o.SetInvoiceEmail(invoiceEmail)
	return o
}

// SetInvoiceEmail adds the invoiceEmail to the customer search params
func (o *CustomerSearchParams) SetInvoiceEmail(invoiceEmail *string) {
	o.InvoiceEmail = invoiceEmail
}

// WithIsInactive adds the isInactive to the customer search params
func (o *CustomerSearchParams) WithIsInactive(isInactive *bool) *CustomerSearchParams {
	o.SetIsInactive(isInactive)
	return o
}

// SetIsInactive adds the isInactive to the customer search params
func (o *CustomerSearchParams) SetIsInactive(isInactive *bool) {
	o.IsInactive = isInactive
}

// WithOrganizationNumber adds the organizationNumber to the customer search params
func (o *CustomerSearchParams) WithOrganizationNumber(organizationNumber *string) *CustomerSearchParams {
	o.SetOrganizationNumber(organizationNumber)
	return o
}

// SetOrganizationNumber adds the organizationNumber to the customer search params
func (o *CustomerSearchParams) SetOrganizationNumber(organizationNumber *string) {
	o.OrganizationNumber = organizationNumber
}

// WithSorting adds the sorting to the customer search params
func (o *CustomerSearchParams) WithSorting(sorting *string) *CustomerSearchParams {
	o.SetSorting(sorting)
	return o
}

// SetSorting adds the sorting to the customer search params
func (o *CustomerSearchParams) SetSorting(sorting *string) {
	o.Sorting = sorting
}

// WriteToRequest writes these params to a swagger request
func (o *CustomerSearchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccountManagerID != nil {

		// query param accountManagerId
		var qrAccountManagerID string
		if o.AccountManagerID != nil {
			qrAccountManagerID = *o.AccountManagerID
		}
		qAccountManagerID := qrAccountManagerID
		if qAccountManagerID != "" {
			if err := r.SetQueryParam("accountManagerId", qAccountManagerID); err != nil {
				return err
			}
		}

	}

	if o.Count != nil {

		// query param count
		var qrCount int64
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt64(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	if o.CustomerAccountNumber != nil {

		// query param customerAccountNumber
		var qrCustomerAccountNumber string
		if o.CustomerAccountNumber != nil {
			qrCustomerAccountNumber = *o.CustomerAccountNumber
		}
		qCustomerAccountNumber := qrCustomerAccountNumber
		if qCustomerAccountNumber != "" {
			if err := r.SetQueryParam("customerAccountNumber", qCustomerAccountNumber); err != nil {
				return err
			}
		}

	}

	if o.Email != nil {

		// query param email
		var qrEmail string
		if o.Email != nil {
			qrEmail = *o.Email
		}
		qEmail := qrEmail
		if qEmail != "" {
			if err := r.SetQueryParam("email", qEmail); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.From != nil {

		// query param from
		var qrFrom int64
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := swag.FormatInt64(qrFrom)
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	if o.ID != nil {

		// query param id
		var qrID string
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.InvoiceEmail != nil {

		// query param invoiceEmail
		var qrInvoiceEmail string
		if o.InvoiceEmail != nil {
			qrInvoiceEmail = *o.InvoiceEmail
		}
		qInvoiceEmail := qrInvoiceEmail
		if qInvoiceEmail != "" {
			if err := r.SetQueryParam("invoiceEmail", qInvoiceEmail); err != nil {
				return err
			}
		}

	}

	if o.IsInactive != nil {

		// query param isInactive
		var qrIsInactive bool
		if o.IsInactive != nil {
			qrIsInactive = *o.IsInactive
		}
		qIsInactive := swag.FormatBool(qrIsInactive)
		if qIsInactive != "" {
			if err := r.SetQueryParam("isInactive", qIsInactive); err != nil {
				return err
			}
		}

	}

	if o.OrganizationNumber != nil {

		// query param organizationNumber
		var qrOrganizationNumber string
		if o.OrganizationNumber != nil {
			qrOrganizationNumber = *o.OrganizationNumber
		}
		qOrganizationNumber := qrOrganizationNumber
		if qOrganizationNumber != "" {
			if err := r.SetQueryParam("organizationNumber", qOrganizationNumber); err != nil {
				return err
			}
		}

	}

	if o.Sorting != nil {

		// query param sorting
		var qrSorting string
		if o.Sorting != nil {
			qrSorting = *o.Sorting
		}
		qSorting := qrSorting
		if qSorting != "" {
			if err := r.SetQueryParam("sorting", qSorting); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
