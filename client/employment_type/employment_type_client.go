// Code generated by go-swagger; DO NOT EDIT.

package employment_type

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new employment type API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for employment type API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	EmployeeEmploymentEmploymentTypeEmploymentEndReasonTypeGetEmploymentEndReasonType(params *EmployeeEmploymentEmploymentTypeEmploymentEndReasonTypeGetEmploymentEndReasonTypeParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeEmploymentEmploymentTypeEmploymentEndReasonTypeGetEmploymentEndReasonTypeOK, error)

	EmployeeEmploymentEmploymentTypeEmploymentFormTypeGetEmploymentFormType(params *EmployeeEmploymentEmploymentTypeEmploymentFormTypeGetEmploymentFormTypeParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeEmploymentEmploymentTypeEmploymentFormTypeGetEmploymentFormTypeOK, error)

	EmployeeEmploymentEmploymentTypeMaritimeEmploymentTypeGetMaritimeEmploymentType(params *EmployeeEmploymentEmploymentTypeMaritimeEmploymentTypeGetMaritimeEmploymentTypeParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeEmploymentEmploymentTypeMaritimeEmploymentTypeGetMaritimeEmploymentTypeOK, error)

	EmployeeEmploymentEmploymentTypeSalaryTypeGetSalaryType(params *EmployeeEmploymentEmploymentTypeSalaryTypeGetSalaryTypeParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeEmploymentEmploymentTypeSalaryTypeGetSalaryTypeOK, error)

	EmployeeEmploymentEmploymentTypeScheduleTypeGetScheduleType(params *EmployeeEmploymentEmploymentTypeScheduleTypeGetScheduleTypeParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeEmploymentEmploymentTypeScheduleTypeGetScheduleTypeOK, error)

	EmployeeEmploymentEmploymentTypeSearch(params *EmployeeEmploymentEmploymentTypeSearchParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeEmploymentEmploymentTypeSearchOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  EmployeeEmploymentEmploymentTypeEmploymentEndReasonTypeGetEmploymentEndReasonType bs e t a find all employment end reason type i ds
*/
func (a *Client) EmployeeEmploymentEmploymentTypeEmploymentEndReasonTypeGetEmploymentEndReasonType(params *EmployeeEmploymentEmploymentTypeEmploymentEndReasonTypeGetEmploymentEndReasonTypeParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeEmploymentEmploymentTypeEmploymentEndReasonTypeGetEmploymentEndReasonTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeeEmploymentEmploymentTypeEmploymentEndReasonTypeGetEmploymentEndReasonTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeeEmploymentEmploymentTypeEmploymentEndReasonType_getEmploymentEndReasonType",
		Method:             "GET",
		PathPattern:        "/employee/employment/employmentType/employmentEndReasonType",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmployeeEmploymentEmploymentTypeEmploymentEndReasonTypeGetEmploymentEndReasonTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmployeeEmploymentEmploymentTypeEmploymentEndReasonTypeGetEmploymentEndReasonTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmployeeEmploymentEmploymentTypeEmploymentEndReasonType_getEmploymentEndReasonType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EmployeeEmploymentEmploymentTypeEmploymentFormTypeGetEmploymentFormType bs e t a find all employment form type i ds
*/
func (a *Client) EmployeeEmploymentEmploymentTypeEmploymentFormTypeGetEmploymentFormType(params *EmployeeEmploymentEmploymentTypeEmploymentFormTypeGetEmploymentFormTypeParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeEmploymentEmploymentTypeEmploymentFormTypeGetEmploymentFormTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeeEmploymentEmploymentTypeEmploymentFormTypeGetEmploymentFormTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeeEmploymentEmploymentTypeEmploymentFormType_getEmploymentFormType",
		Method:             "GET",
		PathPattern:        "/employee/employment/employmentType/employmentFormType",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmployeeEmploymentEmploymentTypeEmploymentFormTypeGetEmploymentFormTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmployeeEmploymentEmploymentTypeEmploymentFormTypeGetEmploymentFormTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmployeeEmploymentEmploymentTypeEmploymentFormType_getEmploymentFormType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EmployeeEmploymentEmploymentTypeMaritimeEmploymentTypeGetMaritimeEmploymentType bs e t a find all maritime employment type i ds
*/
func (a *Client) EmployeeEmploymentEmploymentTypeMaritimeEmploymentTypeGetMaritimeEmploymentType(params *EmployeeEmploymentEmploymentTypeMaritimeEmploymentTypeGetMaritimeEmploymentTypeParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeEmploymentEmploymentTypeMaritimeEmploymentTypeGetMaritimeEmploymentTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeeEmploymentEmploymentTypeMaritimeEmploymentTypeGetMaritimeEmploymentTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeeEmploymentEmploymentTypeMaritimeEmploymentType_getMaritimeEmploymentType",
		Method:             "GET",
		PathPattern:        "/employee/employment/employmentType/maritimeEmploymentType",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmployeeEmploymentEmploymentTypeMaritimeEmploymentTypeGetMaritimeEmploymentTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmployeeEmploymentEmploymentTypeMaritimeEmploymentTypeGetMaritimeEmploymentTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmployeeEmploymentEmploymentTypeMaritimeEmploymentType_getMaritimeEmploymentType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EmployeeEmploymentEmploymentTypeSalaryTypeGetSalaryType bs e t a find all salary type i ds
*/
func (a *Client) EmployeeEmploymentEmploymentTypeSalaryTypeGetSalaryType(params *EmployeeEmploymentEmploymentTypeSalaryTypeGetSalaryTypeParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeEmploymentEmploymentTypeSalaryTypeGetSalaryTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeeEmploymentEmploymentTypeSalaryTypeGetSalaryTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeeEmploymentEmploymentTypeSalaryType_getSalaryType",
		Method:             "GET",
		PathPattern:        "/employee/employment/employmentType/salaryType",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmployeeEmploymentEmploymentTypeSalaryTypeGetSalaryTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmployeeEmploymentEmploymentTypeSalaryTypeGetSalaryTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmployeeEmploymentEmploymentTypeSalaryType_getSalaryType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EmployeeEmploymentEmploymentTypeScheduleTypeGetScheduleType bs e t a find all schedule type i ds
*/
func (a *Client) EmployeeEmploymentEmploymentTypeScheduleTypeGetScheduleType(params *EmployeeEmploymentEmploymentTypeScheduleTypeGetScheduleTypeParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeEmploymentEmploymentTypeScheduleTypeGetScheduleTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeeEmploymentEmploymentTypeScheduleTypeGetScheduleTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeeEmploymentEmploymentTypeScheduleType_getScheduleType",
		Method:             "GET",
		PathPattern:        "/employee/employment/employmentType/scheduleType",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmployeeEmploymentEmploymentTypeScheduleTypeGetScheduleTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmployeeEmploymentEmploymentTypeScheduleTypeGetScheduleTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmployeeEmploymentEmploymentTypeScheduleType_getScheduleType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EmployeeEmploymentEmploymentTypeSearch bs e t a find all employment type i ds
*/
func (a *Client) EmployeeEmploymentEmploymentTypeSearch(params *EmployeeEmploymentEmploymentTypeSearchParams, authInfo runtime.ClientAuthInfoWriter) (*EmployeeEmploymentEmploymentTypeSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmployeeEmploymentEmploymentTypeSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmployeeEmploymentEmploymentType_search",
		Method:             "GET",
		PathPattern:        "/employee/employment/employmentType",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmployeeEmploymentEmploymentTypeSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmployeeEmploymentEmploymentTypeSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmployeeEmploymentEmploymentType_search: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
