// Code generated by go-swagger; DO NOT EDIT.

package activity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new activity API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for activity API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ActivityForTimeSheetGetForTimeSheet(params *ActivityForTimeSheetGetForTimeSheetParams, authInfo runtime.ClientAuthInfoWriter) (*ActivityForTimeSheetGetForTimeSheetOK, error)

	ActivityListPostList(params *ActivityListPostListParams, authInfo runtime.ClientAuthInfoWriter) (*ActivityListPostListCreated, error)

	ActivityGet(params *ActivityGetParams, authInfo runtime.ClientAuthInfoWriter) (*ActivityGetOK, error)

	ActivityPost(params *ActivityPostParams, authInfo runtime.ClientAuthInfoWriter) (*ActivityPostCreated, error)

	ActivitySearch(params *ActivitySearchParams, authInfo runtime.ClientAuthInfoWriter) (*ActivitySearchOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ActivityForTimeSheetGetForTimeSheet finds applicable time sheet activities for an employee on a specific day
*/
func (a *Client) ActivityForTimeSheetGetForTimeSheet(params *ActivityForTimeSheetGetForTimeSheetParams, authInfo runtime.ClientAuthInfoWriter) (*ActivityForTimeSheetGetForTimeSheetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActivityForTimeSheetGetForTimeSheetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ActivityForTimeSheet_getForTimeSheet",
		Method:             "GET",
		PathPattern:        "/activity/>forTimeSheet",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActivityForTimeSheetGetForTimeSheetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActivityForTimeSheetGetForTimeSheetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ActivityForTimeSheet_getForTimeSheet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ActivityListPostList adds multiple activities
*/
func (a *Client) ActivityListPostList(params *ActivityListPostListParams, authInfo runtime.ClientAuthInfoWriter) (*ActivityListPostListCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActivityListPostListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ActivityList_postList",
		Method:             "POST",
		PathPattern:        "/activity/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActivityListPostListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActivityListPostListCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ActivityList_postList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ActivityGet finds activity by ID
*/
func (a *Client) ActivityGet(params *ActivityGetParams, authInfo runtime.ClientAuthInfoWriter) (*ActivityGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActivityGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Activity_get",
		Method:             "GET",
		PathPattern:        "/activity/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActivityGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActivityGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Activity_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ActivityPost adds activity
*/
func (a *Client) ActivityPost(params *ActivityPostParams, authInfo runtime.ClientAuthInfoWriter) (*ActivityPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActivityPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Activity_post",
		Method:             "POST",
		PathPattern:        "/activity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActivityPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActivityPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Activity_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ActivitySearch finds activities corresponding with sent data
*/
func (a *Client) ActivitySearch(params *ActivitySearchParams, authInfo runtime.ClientAuthInfoWriter) (*ActivitySearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActivitySearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Activity_search",
		Method:             "GET",
		PathPattern:        "/activity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActivitySearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActivitySearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Activity_search: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
