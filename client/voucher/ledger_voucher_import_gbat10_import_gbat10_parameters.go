// Code generated by go-swagger; DO NOT EDIT.

package voucher

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewLedgerVoucherImportGbat10ImportGbat10Params creates a new LedgerVoucherImportGbat10ImportGbat10Params object
// with the default values initialized.
func NewLedgerVoucherImportGbat10ImportGbat10Params() *LedgerVoucherImportGbat10ImportGbat10Params {
	var (
		encodingDefault = string("utf-8")
	)
	return &LedgerVoucherImportGbat10ImportGbat10Params{
		Encoding: &encodingDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewLedgerVoucherImportGbat10ImportGbat10ParamsWithTimeout creates a new LedgerVoucherImportGbat10ImportGbat10Params object
// with the default values initialized, and the ability to set a timeout on a request
func NewLedgerVoucherImportGbat10ImportGbat10ParamsWithTimeout(timeout time.Duration) *LedgerVoucherImportGbat10ImportGbat10Params {
	var (
		encodingDefault = string("utf-8")
	)
	return &LedgerVoucherImportGbat10ImportGbat10Params{
		Encoding: &encodingDefault,

		timeout: timeout,
	}
}

// NewLedgerVoucherImportGbat10ImportGbat10ParamsWithContext creates a new LedgerVoucherImportGbat10ImportGbat10Params object
// with the default values initialized, and the ability to set a context for a request
func NewLedgerVoucherImportGbat10ImportGbat10ParamsWithContext(ctx context.Context) *LedgerVoucherImportGbat10ImportGbat10Params {
	var (
		encodingDefault = string("utf-8")
	)
	return &LedgerVoucherImportGbat10ImportGbat10Params{
		Encoding: &encodingDefault,

		Context: ctx,
	}
}

// NewLedgerVoucherImportGbat10ImportGbat10ParamsWithHTTPClient creates a new LedgerVoucherImportGbat10ImportGbat10Params object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewLedgerVoucherImportGbat10ImportGbat10ParamsWithHTTPClient(client *http.Client) *LedgerVoucherImportGbat10ImportGbat10Params {
	var (
		encodingDefault = string("utf-8")
	)
	return &LedgerVoucherImportGbat10ImportGbat10Params{
		Encoding:   &encodingDefault,
		HTTPClient: client,
	}
}

/*LedgerVoucherImportGbat10ImportGbat10Params contains all the parameters to send to the API endpoint
for the ledger voucher import gbat10 import gbat10 operation typically these are written to a http.Request
*/
type LedgerVoucherImportGbat10ImportGbat10Params struct {

	/*Encoding
	  The file encoding

	*/
	Encoding *string
	/*File
	  The file

	*/
	File runtime.NamedReadCloser
	/*GenerateVatPostings
	  If the import should generate VAT postings

	*/
	GenerateVatPostings bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the ledger voucher import gbat10 import gbat10 params
func (o *LedgerVoucherImportGbat10ImportGbat10Params) WithTimeout(timeout time.Duration) *LedgerVoucherImportGbat10ImportGbat10Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the ledger voucher import gbat10 import gbat10 params
func (o *LedgerVoucherImportGbat10ImportGbat10Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the ledger voucher import gbat10 import gbat10 params
func (o *LedgerVoucherImportGbat10ImportGbat10Params) WithContext(ctx context.Context) *LedgerVoucherImportGbat10ImportGbat10Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the ledger voucher import gbat10 import gbat10 params
func (o *LedgerVoucherImportGbat10ImportGbat10Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the ledger voucher import gbat10 import gbat10 params
func (o *LedgerVoucherImportGbat10ImportGbat10Params) WithHTTPClient(client *http.Client) *LedgerVoucherImportGbat10ImportGbat10Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the ledger voucher import gbat10 import gbat10 params
func (o *LedgerVoucherImportGbat10ImportGbat10Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEncoding adds the encoding to the ledger voucher import gbat10 import gbat10 params
func (o *LedgerVoucherImportGbat10ImportGbat10Params) WithEncoding(encoding *string) *LedgerVoucherImportGbat10ImportGbat10Params {
	o.SetEncoding(encoding)
	return o
}

// SetEncoding adds the encoding to the ledger voucher import gbat10 import gbat10 params
func (o *LedgerVoucherImportGbat10ImportGbat10Params) SetEncoding(encoding *string) {
	o.Encoding = encoding
}

// WithFile adds the file to the ledger voucher import gbat10 import gbat10 params
func (o *LedgerVoucherImportGbat10ImportGbat10Params) WithFile(file runtime.NamedReadCloser) *LedgerVoucherImportGbat10ImportGbat10Params {
	o.SetFile(file)
	return o
}

// SetFile adds the file to the ledger voucher import gbat10 import gbat10 params
func (o *LedgerVoucherImportGbat10ImportGbat10Params) SetFile(file runtime.NamedReadCloser) {
	o.File = file
}

// WithGenerateVatPostings adds the generateVatPostings to the ledger voucher import gbat10 import gbat10 params
func (o *LedgerVoucherImportGbat10ImportGbat10Params) WithGenerateVatPostings(generateVatPostings bool) *LedgerVoucherImportGbat10ImportGbat10Params {
	o.SetGenerateVatPostings(generateVatPostings)
	return o
}

// SetGenerateVatPostings adds the generateVatPostings to the ledger voucher import gbat10 import gbat10 params
func (o *LedgerVoucherImportGbat10ImportGbat10Params) SetGenerateVatPostings(generateVatPostings bool) {
	o.GenerateVatPostings = generateVatPostings
}

// WriteToRequest writes these params to a swagger request
func (o *LedgerVoucherImportGbat10ImportGbat10Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Encoding != nil {

		// form param encoding
		var frEncoding string
		if o.Encoding != nil {
			frEncoding = *o.Encoding
		}
		fEncoding := frEncoding
		if fEncoding != "" {
			if err := r.SetFormParam("encoding", fEncoding); err != nil {
				return err
			}
		}

	}

	// form file param file
	if err := r.SetFileParam("file", o.File); err != nil {
		return err
	}

	// form param generateVatPostings
	frGenerateVatPostings := o.GenerateVatPostings
	fGenerateVatPostings := swag.FormatBool(frGenerateVatPostings)
	if fGenerateVatPostings != "" {
		if err := r.SetFormParam("generateVatPostings", fGenerateVatPostings); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
