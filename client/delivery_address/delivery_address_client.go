// Code generated by go-swagger; DO NOT EDIT.

package delivery_address

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new delivery address API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for delivery address API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeliveryAddressGet(params *DeliveryAddressGetParams, authInfo runtime.ClientAuthInfoWriter) (*DeliveryAddressGetOK, error)

	DeliveryAddressPut(params *DeliveryAddressPutParams, authInfo runtime.ClientAuthInfoWriter) (*DeliveryAddressPutOK, error)

	DeliveryAddressSearch(params *DeliveryAddressSearchParams, authInfo runtime.ClientAuthInfoWriter) (*DeliveryAddressSearchOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeliveryAddressGet gets address by ID
*/
func (a *Client) DeliveryAddressGet(params *DeliveryAddressGetParams, authInfo runtime.ClientAuthInfoWriter) (*DeliveryAddressGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeliveryAddressGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeliveryAddressGet",
		Method:             "GET",
		PathPattern:        "/deliveryAddress/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeliveryAddressGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeliveryAddressGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeliveryAddressGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeliveryAddressPut updates address
*/
func (a *Client) DeliveryAddressPut(params *DeliveryAddressPutParams, authInfo runtime.ClientAuthInfoWriter) (*DeliveryAddressPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeliveryAddressPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeliveryAddressPut",
		Method:             "PUT",
		PathPattern:        "/deliveryAddress/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeliveryAddressPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeliveryAddressPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeliveryAddressPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeliveryAddressSearch finds addresses corresponding with sent data
*/
func (a *Client) DeliveryAddressSearch(params *DeliveryAddressSearchParams, authInfo runtime.ClientAuthInfoWriter) (*DeliveryAddressSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeliveryAddressSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeliveryAddressSearch",
		Method:             "GET",
		PathPattern:        "/deliveryAddress",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeliveryAddressSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeliveryAddressSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeliveryAddressSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
