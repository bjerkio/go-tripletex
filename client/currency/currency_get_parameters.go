// Code generated by go-swagger; DO NOT EDIT.

package currency

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCurrencyGetParams creates a new CurrencyGetParams object
// with the default values initialized.
func NewCurrencyGetParams() *CurrencyGetParams {
	var ()
	return &CurrencyGetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCurrencyGetParamsWithTimeout creates a new CurrencyGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCurrencyGetParamsWithTimeout(timeout time.Duration) *CurrencyGetParams {
	var ()
	return &CurrencyGetParams{

		timeout: timeout,
	}
}

// NewCurrencyGetParamsWithContext creates a new CurrencyGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewCurrencyGetParamsWithContext(ctx context.Context) *CurrencyGetParams {
	var ()
	return &CurrencyGetParams{

		Context: ctx,
	}
}

// NewCurrencyGetParamsWithHTTPClient creates a new CurrencyGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCurrencyGetParamsWithHTTPClient(client *http.Client) *CurrencyGetParams {
	var ()
	return &CurrencyGetParams{
		HTTPClient: client,
	}
}

/*CurrencyGetParams contains all the parameters to send to the API endpoint
for the currency get operation typically these are written to a http.Request
*/
type CurrencyGetParams struct {

	/*Fields
	  Fields filter pattern

	*/
	Fields *string
	/*ID
	  Element ID

	*/
	ID int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the currency get params
func (o *CurrencyGetParams) WithTimeout(timeout time.Duration) *CurrencyGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the currency get params
func (o *CurrencyGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the currency get params
func (o *CurrencyGetParams) WithContext(ctx context.Context) *CurrencyGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the currency get params
func (o *CurrencyGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the currency get params
func (o *CurrencyGetParams) WithHTTPClient(client *http.Client) *CurrencyGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the currency get params
func (o *CurrencyGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFields adds the fields to the currency get params
func (o *CurrencyGetParams) WithFields(fields *string) *CurrencyGetParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the currency get params
func (o *CurrencyGetParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithID adds the id to the currency get params
func (o *CurrencyGetParams) WithID(id int32) *CurrencyGetParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the currency get params
func (o *CurrencyGetParams) SetID(id int32) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *CurrencyGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt32(o.ID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
