// Code generated by go-swagger; DO NOT EDIT.

package prospect

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCrmProspectSearchParams creates a new CrmProspectSearchParams object
// with the default values initialized.
func NewCrmProspectSearchParams() *CrmProspectSearchParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &CrmProspectSearchParams{
		Count: &countDefault,
		From:  &fromDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewCrmProspectSearchParamsWithTimeout creates a new CrmProspectSearchParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCrmProspectSearchParamsWithTimeout(timeout time.Duration) *CrmProspectSearchParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &CrmProspectSearchParams{
		Count: &countDefault,
		From:  &fromDefault,

		timeout: timeout,
	}
}

// NewCrmProspectSearchParamsWithContext creates a new CrmProspectSearchParams object
// with the default values initialized, and the ability to set a context for a request
func NewCrmProspectSearchParamsWithContext(ctx context.Context) *CrmProspectSearchParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &CrmProspectSearchParams{
		Count: &countDefault,
		From:  &fromDefault,

		Context: ctx,
	}
}

// NewCrmProspectSearchParamsWithHTTPClient creates a new CrmProspectSearchParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCrmProspectSearchParamsWithHTTPClient(client *http.Client) *CrmProspectSearchParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &CrmProspectSearchParams{
		Count:      &countDefault,
		From:       &fromDefault,
		HTTPClient: client,
	}
}

/*CrmProspectSearchParams contains all the parameters to send to the API endpoint
for the crm prospect search operation typically these are written to a http.Request
*/
type CrmProspectSearchParams struct {

	/*ClosedDateFrom
	  From and including

	*/
	ClosedDateFrom *string
	/*ClosedDateTo
	  To and excluding

	*/
	ClosedDateTo *string
	/*ClosedReason
	  Equals

	*/
	ClosedReason *string
	/*Competitor
	  Containing

	*/
	Competitor *string
	/*Count
	  Number of elements to return

	*/
	Count *int64
	/*CreatedDateFrom
	  From and including

	*/
	CreatedDateFrom *string
	/*CreatedDateTo
	  To and excluding

	*/
	CreatedDateTo *string
	/*CustomerID
	  Equals

	*/
	CustomerID *string
	/*Description
	  Containing

	*/
	Description *string
	/*Fields
	  Fields filter pattern

	*/
	Fields *string
	/*From
	  From index

	*/
	From *int64
	/*IsClosed
	  Equals

	*/
	IsClosed *bool
	/*Name
	  Containing

	*/
	Name *string
	/*ProjectID
	  Equals

	*/
	ProjectID *string
	/*ProjectOfferID
	  Equals

	*/
	ProjectOfferID *string
	/*ProspectType
	  Equals

	*/
	ProspectType *string
	/*SalesEmployeeID
	  Equals

	*/
	SalesEmployeeID *string
	/*Sorting
	  Sorting pattern

	*/
	Sorting *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the crm prospect search params
func (o *CrmProspectSearchParams) WithTimeout(timeout time.Duration) *CrmProspectSearchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the crm prospect search params
func (o *CrmProspectSearchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the crm prospect search params
func (o *CrmProspectSearchParams) WithContext(ctx context.Context) *CrmProspectSearchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the crm prospect search params
func (o *CrmProspectSearchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the crm prospect search params
func (o *CrmProspectSearchParams) WithHTTPClient(client *http.Client) *CrmProspectSearchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the crm prospect search params
func (o *CrmProspectSearchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClosedDateFrom adds the closedDateFrom to the crm prospect search params
func (o *CrmProspectSearchParams) WithClosedDateFrom(closedDateFrom *string) *CrmProspectSearchParams {
	o.SetClosedDateFrom(closedDateFrom)
	return o
}

// SetClosedDateFrom adds the closedDateFrom to the crm prospect search params
func (o *CrmProspectSearchParams) SetClosedDateFrom(closedDateFrom *string) {
	o.ClosedDateFrom = closedDateFrom
}

// WithClosedDateTo adds the closedDateTo to the crm prospect search params
func (o *CrmProspectSearchParams) WithClosedDateTo(closedDateTo *string) *CrmProspectSearchParams {
	o.SetClosedDateTo(closedDateTo)
	return o
}

// SetClosedDateTo adds the closedDateTo to the crm prospect search params
func (o *CrmProspectSearchParams) SetClosedDateTo(closedDateTo *string) {
	o.ClosedDateTo = closedDateTo
}

// WithClosedReason adds the closedReason to the crm prospect search params
func (o *CrmProspectSearchParams) WithClosedReason(closedReason *string) *CrmProspectSearchParams {
	o.SetClosedReason(closedReason)
	return o
}

// SetClosedReason adds the closedReason to the crm prospect search params
func (o *CrmProspectSearchParams) SetClosedReason(closedReason *string) {
	o.ClosedReason = closedReason
}

// WithCompetitor adds the competitor to the crm prospect search params
func (o *CrmProspectSearchParams) WithCompetitor(competitor *string) *CrmProspectSearchParams {
	o.SetCompetitor(competitor)
	return o
}

// SetCompetitor adds the competitor to the crm prospect search params
func (o *CrmProspectSearchParams) SetCompetitor(competitor *string) {
	o.Competitor = competitor
}

// WithCount adds the count to the crm prospect search params
func (o *CrmProspectSearchParams) WithCount(count *int64) *CrmProspectSearchParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the crm prospect search params
func (o *CrmProspectSearchParams) SetCount(count *int64) {
	o.Count = count
}

// WithCreatedDateFrom adds the createdDateFrom to the crm prospect search params
func (o *CrmProspectSearchParams) WithCreatedDateFrom(createdDateFrom *string) *CrmProspectSearchParams {
	o.SetCreatedDateFrom(createdDateFrom)
	return o
}

// SetCreatedDateFrom adds the createdDateFrom to the crm prospect search params
func (o *CrmProspectSearchParams) SetCreatedDateFrom(createdDateFrom *string) {
	o.CreatedDateFrom = createdDateFrom
}

// WithCreatedDateTo adds the createdDateTo to the crm prospect search params
func (o *CrmProspectSearchParams) WithCreatedDateTo(createdDateTo *string) *CrmProspectSearchParams {
	o.SetCreatedDateTo(createdDateTo)
	return o
}

// SetCreatedDateTo adds the createdDateTo to the crm prospect search params
func (o *CrmProspectSearchParams) SetCreatedDateTo(createdDateTo *string) {
	o.CreatedDateTo = createdDateTo
}

// WithCustomerID adds the customerID to the crm prospect search params
func (o *CrmProspectSearchParams) WithCustomerID(customerID *string) *CrmProspectSearchParams {
	o.SetCustomerID(customerID)
	return o
}

// SetCustomerID adds the customerId to the crm prospect search params
func (o *CrmProspectSearchParams) SetCustomerID(customerID *string) {
	o.CustomerID = customerID
}

// WithDescription adds the description to the crm prospect search params
func (o *CrmProspectSearchParams) WithDescription(description *string) *CrmProspectSearchParams {
	o.SetDescription(description)
	return o
}

// SetDescription adds the description to the crm prospect search params
func (o *CrmProspectSearchParams) SetDescription(description *string) {
	o.Description = description
}

// WithFields adds the fields to the crm prospect search params
func (o *CrmProspectSearchParams) WithFields(fields *string) *CrmProspectSearchParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the crm prospect search params
func (o *CrmProspectSearchParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithFrom adds the from to the crm prospect search params
func (o *CrmProspectSearchParams) WithFrom(from *int64) *CrmProspectSearchParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the crm prospect search params
func (o *CrmProspectSearchParams) SetFrom(from *int64) {
	o.From = from
}

// WithIsClosed adds the isClosed to the crm prospect search params
func (o *CrmProspectSearchParams) WithIsClosed(isClosed *bool) *CrmProspectSearchParams {
	o.SetIsClosed(isClosed)
	return o
}

// SetIsClosed adds the isClosed to the crm prospect search params
func (o *CrmProspectSearchParams) SetIsClosed(isClosed *bool) {
	o.IsClosed = isClosed
}

// WithName adds the name to the crm prospect search params
func (o *CrmProspectSearchParams) WithName(name *string) *CrmProspectSearchParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the crm prospect search params
func (o *CrmProspectSearchParams) SetName(name *string) {
	o.Name = name
}

// WithProjectID adds the projectID to the crm prospect search params
func (o *CrmProspectSearchParams) WithProjectID(projectID *string) *CrmProspectSearchParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the crm prospect search params
func (o *CrmProspectSearchParams) SetProjectID(projectID *string) {
	o.ProjectID = projectID
}

// WithProjectOfferID adds the projectOfferID to the crm prospect search params
func (o *CrmProspectSearchParams) WithProjectOfferID(projectOfferID *string) *CrmProspectSearchParams {
	o.SetProjectOfferID(projectOfferID)
	return o
}

// SetProjectOfferID adds the projectOfferId to the crm prospect search params
func (o *CrmProspectSearchParams) SetProjectOfferID(projectOfferID *string) {
	o.ProjectOfferID = projectOfferID
}

// WithProspectType adds the prospectType to the crm prospect search params
func (o *CrmProspectSearchParams) WithProspectType(prospectType *string) *CrmProspectSearchParams {
	o.SetProspectType(prospectType)
	return o
}

// SetProspectType adds the prospectType to the crm prospect search params
func (o *CrmProspectSearchParams) SetProspectType(prospectType *string) {
	o.ProspectType = prospectType
}

// WithSalesEmployeeID adds the salesEmployeeID to the crm prospect search params
func (o *CrmProspectSearchParams) WithSalesEmployeeID(salesEmployeeID *string) *CrmProspectSearchParams {
	o.SetSalesEmployeeID(salesEmployeeID)
	return o
}

// SetSalesEmployeeID adds the salesEmployeeId to the crm prospect search params
func (o *CrmProspectSearchParams) SetSalesEmployeeID(salesEmployeeID *string) {
	o.SalesEmployeeID = salesEmployeeID
}

// WithSorting adds the sorting to the crm prospect search params
func (o *CrmProspectSearchParams) WithSorting(sorting *string) *CrmProspectSearchParams {
	o.SetSorting(sorting)
	return o
}

// SetSorting adds the sorting to the crm prospect search params
func (o *CrmProspectSearchParams) SetSorting(sorting *string) {
	o.Sorting = sorting
}

// WriteToRequest writes these params to a swagger request
func (o *CrmProspectSearchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClosedDateFrom != nil {

		// query param closedDateFrom
		var qrClosedDateFrom string
		if o.ClosedDateFrom != nil {
			qrClosedDateFrom = *o.ClosedDateFrom
		}
		qClosedDateFrom := qrClosedDateFrom
		if qClosedDateFrom != "" {
			if err := r.SetQueryParam("closedDateFrom", qClosedDateFrom); err != nil {
				return err
			}
		}

	}

	if o.ClosedDateTo != nil {

		// query param closedDateTo
		var qrClosedDateTo string
		if o.ClosedDateTo != nil {
			qrClosedDateTo = *o.ClosedDateTo
		}
		qClosedDateTo := qrClosedDateTo
		if qClosedDateTo != "" {
			if err := r.SetQueryParam("closedDateTo", qClosedDateTo); err != nil {
				return err
			}
		}

	}

	if o.ClosedReason != nil {

		// query param closedReason
		var qrClosedReason string
		if o.ClosedReason != nil {
			qrClosedReason = *o.ClosedReason
		}
		qClosedReason := qrClosedReason
		if qClosedReason != "" {
			if err := r.SetQueryParam("closedReason", qClosedReason); err != nil {
				return err
			}
		}

	}

	if o.Competitor != nil {

		// query param competitor
		var qrCompetitor string
		if o.Competitor != nil {
			qrCompetitor = *o.Competitor
		}
		qCompetitor := qrCompetitor
		if qCompetitor != "" {
			if err := r.SetQueryParam("competitor", qCompetitor); err != nil {
				return err
			}
		}

	}

	if o.Count != nil {

		// query param count
		var qrCount int64
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt64(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	if o.CreatedDateFrom != nil {

		// query param createdDateFrom
		var qrCreatedDateFrom string
		if o.CreatedDateFrom != nil {
			qrCreatedDateFrom = *o.CreatedDateFrom
		}
		qCreatedDateFrom := qrCreatedDateFrom
		if qCreatedDateFrom != "" {
			if err := r.SetQueryParam("createdDateFrom", qCreatedDateFrom); err != nil {
				return err
			}
		}

	}

	if o.CreatedDateTo != nil {

		// query param createdDateTo
		var qrCreatedDateTo string
		if o.CreatedDateTo != nil {
			qrCreatedDateTo = *o.CreatedDateTo
		}
		qCreatedDateTo := qrCreatedDateTo
		if qCreatedDateTo != "" {
			if err := r.SetQueryParam("createdDateTo", qCreatedDateTo); err != nil {
				return err
			}
		}

	}

	if o.CustomerID != nil {

		// query param customerId
		var qrCustomerID string
		if o.CustomerID != nil {
			qrCustomerID = *o.CustomerID
		}
		qCustomerID := qrCustomerID
		if qCustomerID != "" {
			if err := r.SetQueryParam("customerId", qCustomerID); err != nil {
				return err
			}
		}

	}

	if o.Description != nil {

		// query param description
		var qrDescription string
		if o.Description != nil {
			qrDescription = *o.Description
		}
		qDescription := qrDescription
		if qDescription != "" {
			if err := r.SetQueryParam("description", qDescription); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.From != nil {

		// query param from
		var qrFrom int64
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := swag.FormatInt64(qrFrom)
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	if o.IsClosed != nil {

		// query param isClosed
		var qrIsClosed bool
		if o.IsClosed != nil {
			qrIsClosed = *o.IsClosed
		}
		qIsClosed := swag.FormatBool(qrIsClosed)
		if qIsClosed != "" {
			if err := r.SetQueryParam("isClosed", qIsClosed); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.ProjectID != nil {

		// query param projectId
		var qrProjectID string
		if o.ProjectID != nil {
			qrProjectID = *o.ProjectID
		}
		qProjectID := qrProjectID
		if qProjectID != "" {
			if err := r.SetQueryParam("projectId", qProjectID); err != nil {
				return err
			}
		}

	}

	if o.ProjectOfferID != nil {

		// query param projectOfferId
		var qrProjectOfferID string
		if o.ProjectOfferID != nil {
			qrProjectOfferID = *o.ProjectOfferID
		}
		qProjectOfferID := qrProjectOfferID
		if qProjectOfferID != "" {
			if err := r.SetQueryParam("projectOfferId", qProjectOfferID); err != nil {
				return err
			}
		}

	}

	if o.ProspectType != nil {

		// query param prospectType
		var qrProspectType string
		if o.ProspectType != nil {
			qrProspectType = *o.ProspectType
		}
		qProspectType := qrProspectType
		if qProspectType != "" {
			if err := r.SetQueryParam("prospectType", qProspectType); err != nil {
				return err
			}
		}

	}

	if o.SalesEmployeeID != nil {

		// query param salesEmployeeId
		var qrSalesEmployeeID string
		if o.SalesEmployeeID != nil {
			qrSalesEmployeeID = *o.SalesEmployeeID
		}
		qSalesEmployeeID := qrSalesEmployeeID
		if qSalesEmployeeID != "" {
			if err := r.SetQueryParam("salesEmployeeId", qSalesEmployeeID); err != nil {
				return err
			}
		}

	}

	if o.Sorting != nil {

		// query param sorting
		var qrSorting string
		if o.Sorting != nil {
			qrSorting = *o.Sorting
		}
		qSorting := qrSorting
		if qSorting != "" {
			if err := r.SetQueryParam("sorting", qSorting); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
