// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SalarySettings salary settings
//
// swagger:model SalarySettings
type SalarySettings struct {

	// changes
	// Read Only: true
	Changes []*Change `json:"changes"`

	// id
	ID int32 `json:"id,omitempty"`

	// municipality
	Municipality *Municipality `json:"municipality,omitempty"`

	// Define the Payroll Tax Calculation Method. AA General industries,BB Central government administration and health trusts, CC Exempted business sectors (and undertakings in economic difficulty),DD Agriculture and forestry, fisheries etc., EE Reporting of payroll withholding tax only,GG Road freight transport
	// Required: true
	// Enum: [AA BB CC DD EE GG JJ EMPTY]
	PayrollTaxCalcMethod *string `json:"payrollTaxCalcMethod"`

	// url
	// Read Only: true
	URL string `json:"url,omitempty"`

	// version
	Version int32 `json:"version,omitempty"`
}

// Validate validates this salary settings
func (m *SalarySettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMunicipality(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayrollTaxCalcMethod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SalarySettings) validateChanges(formats strfmt.Registry) error {

	if swag.IsZero(m.Changes) { // not required
		return nil
	}

	for i := 0; i < len(m.Changes); i++ {
		if swag.IsZero(m.Changes[i]) { // not required
			continue
		}

		if m.Changes[i] != nil {
			if err := m.Changes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("changes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SalarySettings) validateMunicipality(formats strfmt.Registry) error {

	if swag.IsZero(m.Municipality) { // not required
		return nil
	}

	if m.Municipality != nil {
		if err := m.Municipality.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("municipality")
			}
			return err
		}
	}

	return nil
}

var salarySettingsTypePayrollTaxCalcMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AA","BB","CC","DD","EE","GG","JJ","EMPTY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		salarySettingsTypePayrollTaxCalcMethodPropEnum = append(salarySettingsTypePayrollTaxCalcMethodPropEnum, v)
	}
}

const (

	// SalarySettingsPayrollTaxCalcMethodAA captures enum value "AA"
	SalarySettingsPayrollTaxCalcMethodAA string = "AA"

	// SalarySettingsPayrollTaxCalcMethodBB captures enum value "BB"
	SalarySettingsPayrollTaxCalcMethodBB string = "BB"

	// SalarySettingsPayrollTaxCalcMethodCC captures enum value "CC"
	SalarySettingsPayrollTaxCalcMethodCC string = "CC"

	// SalarySettingsPayrollTaxCalcMethodDD captures enum value "DD"
	SalarySettingsPayrollTaxCalcMethodDD string = "DD"

	// SalarySettingsPayrollTaxCalcMethodEE captures enum value "EE"
	SalarySettingsPayrollTaxCalcMethodEE string = "EE"

	// SalarySettingsPayrollTaxCalcMethodGG captures enum value "GG"
	SalarySettingsPayrollTaxCalcMethodGG string = "GG"

	// SalarySettingsPayrollTaxCalcMethodJJ captures enum value "JJ"
	SalarySettingsPayrollTaxCalcMethodJJ string = "JJ"

	// SalarySettingsPayrollTaxCalcMethodEMPTY captures enum value "EMPTY"
	SalarySettingsPayrollTaxCalcMethodEMPTY string = "EMPTY"
)

// prop value enum
func (m *SalarySettings) validatePayrollTaxCalcMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, salarySettingsTypePayrollTaxCalcMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SalarySettings) validatePayrollTaxCalcMethod(formats strfmt.Registry) error {

	if err := validate.Required("payrollTaxCalcMethod", "body", m.PayrollTaxCalcMethod); err != nil {
		return err
	}

	// value enum
	if err := m.validatePayrollTaxCalcMethodEnum("payrollTaxCalcMethod", "body", *m.PayrollTaxCalcMethod); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SalarySettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SalarySettings) UnmarshalBinary(b []byte) error {
	var res SalarySettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
