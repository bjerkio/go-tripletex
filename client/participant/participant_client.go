// Code generated by go-swagger; DO NOT EDIT.

package participant

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new participant API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for participant API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ProjectParticipantListDeleteByIds(params *ProjectParticipantListDeleteByIdsParams, authInfo runtime.ClientAuthInfoWriter) error

	ProjectParticipantListPostList(params *ProjectParticipantListPostListParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectParticipantListPostListCreated, error)

	ProjectParticipantGet(params *ProjectParticipantGetParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectParticipantGetOK, error)

	ProjectParticipantPost(params *ProjectParticipantPostParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectParticipantPostCreated, error)

	ProjectParticipantPut(params *ProjectParticipantPutParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectParticipantPutOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ProjectParticipantListDeleteByIds bs e t a delete project participants
*/
func (a *Client) ProjectParticipantListDeleteByIds(params *ProjectParticipantListDeleteByIdsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectParticipantListDeleteByIdsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectParticipantList_deleteByIds",
		Method:             "DELETE",
		PathPattern:        "/project/participant/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectParticipantListDeleteByIdsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  ProjectParticipantListPostList bs e t a add new project participant multiple project participants can be sent in the same request
*/
func (a *Client) ProjectParticipantListPostList(params *ProjectParticipantListPostListParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectParticipantListPostListCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectParticipantListPostListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectParticipantList_postList",
		Method:             "POST",
		PathPattern:        "/project/participant/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectParticipantListPostListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectParticipantListPostListCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProjectParticipantList_postList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectParticipantGet bs e t a find project participant by ID
*/
func (a *Client) ProjectParticipantGet(params *ProjectParticipantGetParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectParticipantGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectParticipantGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectParticipant_get",
		Method:             "GET",
		PathPattern:        "/project/participant/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectParticipantGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectParticipantGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProjectParticipant_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectParticipantPost bs e t a add new project participant
*/
func (a *Client) ProjectParticipantPost(params *ProjectParticipantPostParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectParticipantPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectParticipantPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectParticipant_post",
		Method:             "POST",
		PathPattern:        "/project/participant",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectParticipantPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectParticipantPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProjectParticipant_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProjectParticipantPut bs e t a update project participant
*/
func (a *Client) ProjectParticipantPut(params *ProjectParticipantPutParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectParticipantPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectParticipantPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectParticipant_put",
		Method:             "PUT",
		PathPattern:        "/project/participant/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectParticipantPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectParticipantPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProjectParticipant_put: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
