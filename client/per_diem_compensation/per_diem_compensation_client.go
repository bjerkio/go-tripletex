// Code generated by go-swagger; DO NOT EDIT.

package per_diem_compensation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new per diem compensation API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for per diem compensation API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	TravelExpensePerDiemCompensationDelete(params *TravelExpensePerDiemCompensationDeleteParams, authInfo runtime.ClientAuthInfoWriter) error

	TravelExpensePerDiemCompensationGet(params *TravelExpensePerDiemCompensationGetParams, authInfo runtime.ClientAuthInfoWriter) (*TravelExpensePerDiemCompensationGetOK, error)

	TravelExpensePerDiemCompensationPost(params *TravelExpensePerDiemCompensationPostParams, authInfo runtime.ClientAuthInfoWriter) (*TravelExpensePerDiemCompensationPostCreated, error)

	TravelExpensePerDiemCompensationPut(params *TravelExpensePerDiemCompensationPutParams, authInfo runtime.ClientAuthInfoWriter) (*TravelExpensePerDiemCompensationPutOK, error)

	TravelExpensePerDiemCompensationSearch(params *TravelExpensePerDiemCompensationSearchParams, authInfo runtime.ClientAuthInfoWriter) (*TravelExpensePerDiemCompensationSearchOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  TravelExpensePerDiemCompensationDelete bs e t a delete per diem compensation
*/
func (a *Client) TravelExpensePerDiemCompensationDelete(params *TravelExpensePerDiemCompensationDeleteParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTravelExpensePerDiemCompensationDeleteParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TravelExpensePerDiemCompensation_delete",
		Method:             "DELETE",
		PathPattern:        "/travelExpense/perDiemCompensation/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TravelExpensePerDiemCompensationDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  TravelExpensePerDiemCompensationGet bs e t a get per diem compensation by ID
*/
func (a *Client) TravelExpensePerDiemCompensationGet(params *TravelExpensePerDiemCompensationGetParams, authInfo runtime.ClientAuthInfoWriter) (*TravelExpensePerDiemCompensationGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTravelExpensePerDiemCompensationGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TravelExpensePerDiemCompensation_get",
		Method:             "GET",
		PathPattern:        "/travelExpense/perDiemCompensation/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TravelExpensePerDiemCompensationGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TravelExpensePerDiemCompensationGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TravelExpensePerDiemCompensation_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TravelExpensePerDiemCompensationPost bs e t a create per diem compensation
*/
func (a *Client) TravelExpensePerDiemCompensationPost(params *TravelExpensePerDiemCompensationPostParams, authInfo runtime.ClientAuthInfoWriter) (*TravelExpensePerDiemCompensationPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTravelExpensePerDiemCompensationPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TravelExpensePerDiemCompensation_post",
		Method:             "POST",
		PathPattern:        "/travelExpense/perDiemCompensation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TravelExpensePerDiemCompensationPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TravelExpensePerDiemCompensationPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TravelExpensePerDiemCompensation_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TravelExpensePerDiemCompensationPut bs e t a update per diem compensation
*/
func (a *Client) TravelExpensePerDiemCompensationPut(params *TravelExpensePerDiemCompensationPutParams, authInfo runtime.ClientAuthInfoWriter) (*TravelExpensePerDiemCompensationPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTravelExpensePerDiemCompensationPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TravelExpensePerDiemCompensation_put",
		Method:             "PUT",
		PathPattern:        "/travelExpense/perDiemCompensation/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TravelExpensePerDiemCompensationPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TravelExpensePerDiemCompensationPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TravelExpensePerDiemCompensation_put: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TravelExpensePerDiemCompensationSearch bs e t a find per diem compensations corresponding with sent data
*/
func (a *Client) TravelExpensePerDiemCompensationSearch(params *TravelExpensePerDiemCompensationSearchParams, authInfo runtime.ClientAuthInfoWriter) (*TravelExpensePerDiemCompensationSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTravelExpensePerDiemCompensationSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TravelExpensePerDiemCompensation_search",
		Method:             "GET",
		PathPattern:        "/travelExpense/perDiemCompensation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TravelExpensePerDiemCompensationSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TravelExpensePerDiemCompensationSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TravelExpensePerDiemCompensation_search: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
